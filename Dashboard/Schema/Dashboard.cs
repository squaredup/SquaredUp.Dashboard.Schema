// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dashboard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from dashboard.proto</summary>
  public static partial class DashboardReflection {

    #region Descriptor
    /// <summary>File descriptor for dashboard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DashboardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9kYXNoYm9hcmQucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xlL3Byb3RvYnVm",
            "L3N0cnVjdC5wcm90bxoNb3B0aW9ucy5wcm90byKsBgoJRGFzaGJvYXJkEhoK",
            "BHR5cGUYASABKAlCDJK1GAIwAZK1GAJIARIYCgJpZBgDIAEoCUIMkrUYAggB",
            "krUYAjABEiIKDGRlcml2ZWRfZnJvbRgEIAEoCUIMkrUYAggBkrUYAkABEh0K",
            "BXRpdGxlGAUgASgJQgyStRgCGAGStRgCIAFIABIcCgRuYW1lGAYgASgJQgyS",
            "tRgCEAGStRgCIAFIABJAChZjcmVhdGVkX2Zyb21fcmVmZXJlbmNlGAcgASgL",
            "Mhguc3F1YXJlZHVwLlJlZmVyZW5jZUluZm9CBpK1GAJAARInCgdjb250ZW50",
            "GAggASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlEjMKB2FjdGlvbnMYCSAD",
            "KAsyGi5zcXVhcmVkdXAuRGFzaGJvYXJkQWN0aW9uQgaStRgCOAESJAoOZGFz",
            "aGJvYXJkX21vZGUYCiABKAhCDJK1GAIQAZK1GAI4ARIVCgVkcmFmdBgLIAEo",
            "CEIGkrUYAkABEg8KB3ZlcnNpb24YDCABKAUSLwoFdGFza3MYDSADKAsyFi5n",
            "b29nbGUucHJvdG9idWYuVmFsdWVCCBgBkrUYAjgBEhoKCF9jb21tZW50GA4g",
            "ASgJQggYAZK1GAIgARIUCgRyYW5rGA8gASgFQgaStRgCEAESMgoFbWF0Y2gY",
            "ECABKAsyGy5zcXVhcmVkdXAuUGVyc3BlY3RpdmVNYXRjaEIGkrUYAhABEhwK",
            "BmZvcm1hdBgRIAEoCUIMkrUYAhABkrUYAkgBEicKB2NvbHVtbnMYEiADKAsy",
            "Fi5nb29nbGUucHJvdG9idWYuVmFsdWUSIQoRcmVxdWlyZWRfbGljZW5zZXMY",
            "EyADKAlCBpK1GAJIARIqCgtvcGVuX2FjY2VzcxgUIAEoCzIVLnNxdWFyZWR1",
            "cC5PcGVuQWNjZXNzEiYKBGhlbHAYFSABKAsyGC5zcXVhcmVkdXAuRGFzaGJv",
            "YXJkSGVscBI7Cg5oaWRkZW5fbWF0Y2hlcxgWIAMoCzIbLnNxdWFyZWR1cC5Q",
            "ZXJzcGVjdGl2ZU1hdGNoQgaStRgCEAFCCAoGX1RpdGxlIvsBCg9EYXNoYm9h",
            "cmRBY3Rpb24SGgoEbmFtZRgBIAEoCUIMkrUYAiABkrUYAjgBEg4KBmdsb2Jh",
            "bBgCIAEoCBIpCgdkaXNwbGF5GAMgASgLMhguc3F1YXJlZHVwLkFjdGlvbkRp",
            "c3BsYXkSRgoKcGFyYW1ldGVycxgEIAMoCzIqLnNxdWFyZWR1cC5EYXNoYm9h",
            "cmRBY3Rpb24uUGFyYW1ldGVyc0VudHJ5QgaStRgCOAEaSQoPUGFyYW1ldGVy",
            "c0VudHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmdvb2dsZS5w",
            "cm90b2J1Zi5WYWx1ZToCOAEiKwoNQWN0aW9uRGlzcGxheRIaCgR0ZXh0GAEg",
            "ASgJQgyStRgCIAGStRgCOAEiVgoNUmVmZXJlbmNlSW5mbxIXCgdwYWNrX2lk",
            "GAEgASgJQgaStRgCCAESFwoHaXRlbV9pZBgCIAEoCUIGkrUYAggBEhMKC3Bh",
            "Y2t2ZXJzaW9uGAMgASgJIikKGEFic3RyYWN0RGFzaGJvYXJkQ29udGVudBIN",
            "CgVfdHlwZRgBIAEoCSJFCgpMYXlvdXRMaXN0Eg0KBV90eXBlGAEgASgJEigK",
            "CGNvbnRlbnRzGAIgAygLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlIk4KDExh",
            "eW91dENvbHVtbhINCgVfdHlwZRgBIAEoCRIvCgdjb2x1bW5zGAIgAygLMh4u",
            "c3F1YXJlZHVwLkxheW91dENvbHVtbl9Db2x1bW4iTgoTTGF5b3V0Q29sdW1u",
            "X0NvbHVtbhINCgV3aWR0aBgBIAEoARIoCghjb250ZW50cxgCIAMoCzIWLmdv",
            "b2dsZS5wcm90b2J1Zi5WYWx1ZSKHAQoMQWJzdHJhY3RUaWxlEhsKBV90eXBl",
            "GAEgASgJQgyStRgCMAGStRgCSAESFQoFdGl0bGUYAiABKAlCBpK1GAIgARIb",
            "CgtkZXNjcmlwdGlvbhgDIAEoCUIGkrUYAiABEiYKBmNvbmZpZxgEIAEoCzIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5WYWx1ZSLQAQoQUGVyc3BlY3RpdmVNYXRjaBIY",
            "CgJpZBgBIAEoCUIMkrUYAggBkrUYAjABEhoKBHR5cGUYAiABKAlCDJK1GAIw",
            "AZK1GAJIARIZCgljbGFzc19pZHMYAyABKAlCBpK1GAIIARIZCglncm91cF9p",
            "ZHMYBCABKAlCBpK1GAIIARIaCg5vYmplY3RfY29udGV4dBgFIAEoCEICGAES",
            "HAoQaXNfbW9uaXRvcl9hbGVydBgGIAEoCEICGAESFgoEbmFtZRgHIAEoCUII",
            "GAGStRgCIAEiRwoKT3BlbkFjY2VzcxIPCgdlbmFibGVkGAEgASgIEigKCGNv",
            "bnRleHRzGAIgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlIigKDURhc2hi",
            "b2FyZEhlbHASFwoHY29udGVudBgBIAEoCUIGkrUYAiABQh2qAhpTcXVhcmVk",
            "VXAuRGFzaGJvYXJkLlNjaGVtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.OptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Dashboard), global::SquaredUp.Dashboard.Schema.Dashboard.Parser, new[]{ "Type", "Id", "DerivedFrom", "Title", "Name", "CreatedFromReference", "Content", "Actions", "DashboardMode", "Draft", "Version", "Tasks", "Comment", "Rank", "Match", "Format", "Columns", "RequiredLicenses", "OpenAccess", "Help", "HiddenMatches" }, new[]{ "Title" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.DashboardAction), global::SquaredUp.Dashboard.Schema.DashboardAction.Parser, new[]{ "Name", "Global", "Display", "Parameters" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ActionDisplay), global::SquaredUp.Dashboard.Schema.ActionDisplay.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ReferenceInfo), global::SquaredUp.Dashboard.Schema.ReferenceInfo.Parser, new[]{ "PackId", "ItemId", "Packversion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AbstractDashboardContent), global::SquaredUp.Dashboard.Schema.AbstractDashboardContent.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.LayoutList), global::SquaredUp.Dashboard.Schema.LayoutList.Parser, new[]{ "Type", "Contents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.LayoutColumn), global::SquaredUp.Dashboard.Schema.LayoutColumn.Parser, new[]{ "Type", "Columns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.LayoutColumn_Column), global::SquaredUp.Dashboard.Schema.LayoutColumn_Column.Parser, new[]{ "Width", "Contents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AbstractTile), global::SquaredUp.Dashboard.Schema.AbstractTile.Parser, new[]{ "Type", "Title", "Description", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.PerspectiveMatch), global::SquaredUp.Dashboard.Schema.PerspectiveMatch.Parser, new[]{ "Id", "Type", "ClassIds", "GroupIds", "ObjectContext", "IsMonitorAlert", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.OpenAccess), global::SquaredUp.Dashboard.Schema.OpenAccess.Parser, new[]{ "Enabled", "Contexts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.DashboardHelp), global::SquaredUp.Dashboard.Schema.DashboardHelp.Parser, new[]{ "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Convention notes:
  /// -- all of the field names become camelCased when actually used in JSON
  /// -- StringValue is used in place of string where a field is permitted to be null 
  ///
  ///
  /// </summary>
  public sealed partial class Dashboard : pb::IMessage<Dashboard> {
    private static readonly pb::MessageParser<Dashboard> _parser = new pb::MessageParser<Dashboard>(() => new Dashboard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dashboard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dashboard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dashboard(Dashboard other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      derivedFrom_ = other.derivedFrom_;
      CreatedFromReference = other.createdFromReference_ != null ? other.CreatedFromReference.Clone() : null;
      Content = other.content_ != null ? other.Content.Clone() : null;
      actions_ = other.actions_.Clone();
      dashboardMode_ = other.dashboardMode_;
      draft_ = other.draft_;
      version_ = other.version_;
      tasks_ = other.tasks_.Clone();
      Comment_ = other.Comment_;
      rank_ = other.rank_;
      Match = other.match_ != null ? other.Match.Clone() : null;
      format_ = other.format_;
      columns_ = other.columns_.Clone();
      requiredLicenses_ = other.requiredLicenses_.Clone();
      OpenAccess = other.openAccess_ != null ? other.OpenAccess.Clone() : null;
      Help = other.help_ != null ? other.Help.Clone() : null;
      hiddenMatches_ = other.hiddenMatches_.Clone();
      switch (other.TitleCase) {
        case TitleOneofCase.Title:
          Title = other.Title;
          break;
        case TitleOneofCase.Name:
          Name = other.Name;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dashboard Clone() {
      return new Dashboard(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Typically page/scomdashboard
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// UUID of the dashboard
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "derived_from" field.</summary>
    public const int DerivedFromFieldNumber = 4;
    private string derivedFrom_ = "";
    /// <summary>
    /// ID of the dashboard this is a draft of
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DerivedFrom {
      get { return derivedFrom_; }
      set {
        derivedFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return TitleCase_ == TitleOneofCase.Title ? (string) Title_ : ""; }
      set {
        Title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        TitleCase_ = TitleOneofCase.Title;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    /// <summary>
    /// Perspectives have an identical schema but use 'name' in place of title
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return TitleCase_ == TitleOneofCase.Name ? (string) Title_ : ""; }
      set {
        Title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        TitleCase_ = TitleOneofCase.Name;
      }
    }

    /// <summary>Field number for the "created_from_reference" field.</summary>
    public const int CreatedFromReferenceFieldNumber = 7;
    private global::SquaredUp.Dashboard.Schema.ReferenceInfo createdFromReference_;
    /// <summary>
    /// Details about the reference pack content this dashboard was created/installed from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ReferenceInfo CreatedFromReference {
      get { return createdFromReference_; }
      set {
        createdFromReference_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Value content_;
    /// <summary>
    /// The content of the dashboard is always a single root element - for example, a list or a column
    /// This root element can be of any type but it will almost certainly contain a 'contents' **array** of
    /// further nested elements
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.DashboardAction> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(74, global::SquaredUp.Dashboard.Schema.DashboardAction.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.DashboardAction> actions_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.DashboardAction>();
    /// <summary>
    /// Custom actions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.DashboardAction> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "dashboard_mode" field.</summary>
    public const int DashboardModeFieldNumber = 10;
    private bool dashboardMode_;
    /// <summary>
    /// Used in perspectives - whether to display as a dashboard
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DashboardMode {
      get { return dashboardMode_; }
      set {
        dashboardMode_ = value;
      }
    }

    /// <summary>Field number for the "draft" field.</summary>
    public const int DraftFieldNumber = 11;
    private bool draft_;
    /// <summary>
    /// Whether the dashboard is a draft
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Draft {
      get { return draft_; }
      set {
        draft_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 12;
    private int version_;
    /// <summary>
    /// Version/revision of the dashboard
    ///
    /// This value is used but not currently honoured - e.g. the client side editor does not
    /// have a means of informing the user that they cannot save over a new version, for example
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Value> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(106, global::Google.Protobuf.WellKnownTypes.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> tasks_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// 'Tasks' is an array that previously served the same purpose as actions.
    /// Do not use
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> Tasks {
      get { return tasks_; }
    }

    /// <summary>Field number for the "_comment" field.</summary>
    public const int CommentFieldNumber = 14;
    private string Comment_ = "";
    /// <summary>
    /// Obsolete commentary field
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return Comment_; }
      set {
        Comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 15;
    private int rank_;
    /// <summary>
    /// The ranking order of a perspective
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 16;
    private global::SquaredUp.Dashboard.Schema.PerspectiveMatch match_;
    /// <summary>
    /// Matching predicates for a perspective
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.PerspectiveMatch Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 17;
    private string format_ = "";
    /// <summary>
    /// Format, used for perspectives. Typically "page" but can be 'row'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Value> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(146, global::Google.Protobuf.WellKnownTypes.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> columns_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// If a dashboard is of format 'row' (and is in fact a row perspective), the 'columns'
    /// are all individual cell tiles which can be validated against appropriate tile schema
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "required_licenses" field.</summary>
    public const int RequiredLicensesFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_requiredLicenses_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> requiredLicenses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// String names of the licenses required for view/use. Most common on perspectives
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequiredLicenses {
      get { return requiredLicenses_; }
    }

    /// <summary>Field number for the "open_access" field.</summary>
    public const int OpenAccessFieldNumber = 20;
    private global::SquaredUp.Dashboard.Schema.OpenAccess openAccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.OpenAccess OpenAccess {
      get { return openAccess_; }
      set {
        openAccess_ = value;
      }
    }

    /// <summary>Field number for the "help" field.</summary>
    public const int HelpFieldNumber = 21;
    private global::SquaredUp.Dashboard.Schema.DashboardHelp help_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.DashboardHelp Help {
      get { return help_; }
      set {
        help_ = value;
      }
    }

    /// <summary>Field number for the "hidden_matches" field.</summary>
    public const int HiddenMatchesFieldNumber = 22;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.PerspectiveMatch> _repeated_hiddenMatches_codec
        = pb::FieldCodec.ForMessage(178, global::SquaredUp.Dashboard.Schema.PerspectiveMatch.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.PerspectiveMatch> hiddenMatches_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.PerspectiveMatch>();
    /// <summary>
    ///Predicates for explicitly making a perspective hidden (contrast with 'match')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.PerspectiveMatch> HiddenMatches {
      get { return hiddenMatches_; }
    }

    private object Title_;
    /// <summary>Enum of possible cases for the "_Title" oneof.</summary>
    public enum TitleOneofCase {
      None = 0,
      Title = 5,
      Name = 6,
    }
    private TitleOneofCase TitleCase_ = TitleOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleOneofCase TitleCase {
      get { return TitleCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      TitleCase_ = TitleOneofCase.None;
      Title_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dashboard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dashboard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (DerivedFrom != other.DerivedFrom) return false;
      if (Title != other.Title) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(CreatedFromReference, other.CreatedFromReference)) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if (DashboardMode != other.DashboardMode) return false;
      if (Draft != other.Draft) return false;
      if (Version != other.Version) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      if (Comment != other.Comment) return false;
      if (Rank != other.Rank) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (Format != other.Format) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if(!requiredLicenses_.Equals(other.requiredLicenses_)) return false;
      if (!object.Equals(OpenAccess, other.OpenAccess)) return false;
      if (!object.Equals(Help, other.Help)) return false;
      if(!hiddenMatches_.Equals(other.hiddenMatches_)) return false;
      if (TitleCase != other.TitleCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DerivedFrom.Length != 0) hash ^= DerivedFrom.GetHashCode();
      if (TitleCase_ == TitleOneofCase.Title) hash ^= Title.GetHashCode();
      if (TitleCase_ == TitleOneofCase.Name) hash ^= Name.GetHashCode();
      if (createdFromReference_ != null) hash ^= CreatedFromReference.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (DashboardMode != false) hash ^= DashboardMode.GetHashCode();
      if (Draft != false) hash ^= Draft.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= tasks_.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      hash ^= columns_.GetHashCode();
      hash ^= requiredLicenses_.GetHashCode();
      if (openAccess_ != null) hash ^= OpenAccess.GetHashCode();
      if (help_ != null) hash ^= Help.GetHashCode();
      hash ^= hiddenMatches_.GetHashCode();
      hash ^= (int) TitleCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (DerivedFrom.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DerivedFrom);
      }
      if (TitleCase_ == TitleOneofCase.Title) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (TitleCase_ == TitleOneofCase.Name) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (createdFromReference_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatedFromReference);
      }
      if (content_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Content);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      if (DashboardMode != false) {
        output.WriteRawTag(80);
        output.WriteBool(DashboardMode);
      }
      if (Draft != false) {
        output.WriteRawTag(88);
        output.WriteBool(Draft);
      }
      if (Version != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Version);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (Comment.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Comment);
      }
      if (Rank != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Rank);
      }
      if (match_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Match);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Format);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      requiredLicenses_.WriteTo(output, _repeated_requiredLicenses_codec);
      if (openAccess_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(OpenAccess);
      }
      if (help_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Help);
      }
      hiddenMatches_.WriteTo(output, _repeated_hiddenMatches_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DerivedFrom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DerivedFrom);
      }
      if (TitleCase_ == TitleOneofCase.Title) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (TitleCase_ == TitleOneofCase.Name) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (createdFromReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedFromReference);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (DashboardMode != false) {
        size += 1 + 1;
      }
      if (Draft != false) {
        size += 1 + 1;
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (match_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (Format.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += requiredLicenses_.CalculateSize(_repeated_requiredLicenses_codec);
      if (openAccess_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenAccess);
      }
      if (help_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Help);
      }
      size += hiddenMatches_.CalculateSize(_repeated_hiddenMatches_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dashboard other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DerivedFrom.Length != 0) {
        DerivedFrom = other.DerivedFrom;
      }
      if (other.createdFromReference_ != null) {
        if (createdFromReference_ == null) {
          createdFromReference_ = new global::SquaredUp.Dashboard.Schema.ReferenceInfo();
        }
        CreatedFromReference.MergeFrom(other.CreatedFromReference);
      }
      if (other.content_ != null) {
        if (content_ == null) {
          content_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Content.MergeFrom(other.Content);
      }
      actions_.Add(other.actions_);
      if (other.DashboardMode != false) {
        DashboardMode = other.DashboardMode;
      }
      if (other.Draft != false) {
        Draft = other.Draft;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      tasks_.Add(other.tasks_);
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::SquaredUp.Dashboard.Schema.PerspectiveMatch();
        }
        Match.MergeFrom(other.Match);
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      columns_.Add(other.columns_);
      requiredLicenses_.Add(other.requiredLicenses_);
      if (other.openAccess_ != null) {
        if (openAccess_ == null) {
          openAccess_ = new global::SquaredUp.Dashboard.Schema.OpenAccess();
        }
        OpenAccess.MergeFrom(other.OpenAccess);
      }
      if (other.help_ != null) {
        if (help_ == null) {
          help_ = new global::SquaredUp.Dashboard.Schema.DashboardHelp();
        }
        Help.MergeFrom(other.Help);
      }
      hiddenMatches_.Add(other.hiddenMatches_);
      switch (other.TitleCase) {
        case TitleOneofCase.Title:
          Title = other.Title;
          break;
        case TitleOneofCase.Name:
          Name = other.Name;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            DerivedFrom = input.ReadString();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            if (createdFromReference_ == null) {
              createdFromReference_ = new global::SquaredUp.Dashboard.Schema.ReferenceInfo();
            }
            input.ReadMessage(createdFromReference_);
            break;
          }
          case 66: {
            if (content_ == null) {
              content_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(content_);
            break;
          }
          case 74: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 80: {
            DashboardMode = input.ReadBool();
            break;
          }
          case 88: {
            Draft = input.ReadBool();
            break;
          }
          case 96: {
            Version = input.ReadInt32();
            break;
          }
          case 106: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 114: {
            Comment = input.ReadString();
            break;
          }
          case 120: {
            Rank = input.ReadInt32();
            break;
          }
          case 130: {
            if (match_ == null) {
              match_ = new global::SquaredUp.Dashboard.Schema.PerspectiveMatch();
            }
            input.ReadMessage(match_);
            break;
          }
          case 138: {
            Format = input.ReadString();
            break;
          }
          case 146: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 154: {
            requiredLicenses_.AddEntriesFrom(input, _repeated_requiredLicenses_codec);
            break;
          }
          case 162: {
            if (openAccess_ == null) {
              openAccess_ = new global::SquaredUp.Dashboard.Schema.OpenAccess();
            }
            input.ReadMessage(openAccess_);
            break;
          }
          case 170: {
            if (help_ == null) {
              help_ = new global::SquaredUp.Dashboard.Schema.DashboardHelp();
            }
            input.ReadMessage(help_);
            break;
          }
          case 178: {
            hiddenMatches_.AddEntriesFrom(input, _repeated_hiddenMatches_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Custom action attached to a database
  /// </summary>
  public sealed partial class DashboardAction : pb::IMessage<DashboardAction> {
    private static readonly pb::MessageParser<DashboardAction> _parser = new pb::MessageParser<DashboardAction>(() => new DashboardAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DashboardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardAction(DashboardAction other) : this() {
      name_ = other.name_;
      global_ = other.global_;
      Display = other.display_ != null ? other.Display.Clone() : null;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardAction Clone() {
      return new DashboardAction(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 2;
    private bool global_;
    /// <summary>
    /// Whether to display this action in the UI regardless of whether the owner/container
    /// of the action is currently selected or visible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Global {
      get { return global_; }
      set {
        global_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.ActionDisplay display_;
    /// <summary>
    /// Display options 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ActionDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_parameters_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 34);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> parameters_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Parameters of any type (possibly nested objects)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DashboardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DashboardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Global != other.Global) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!Parameters.Equals(other.Parameters)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Global != false) hash ^= Global.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= Parameters.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Global != false) {
        output.WriteRawTag(16);
        output.WriteBool(Global);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
      parameters_.WriteTo(output, _map_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Global != false) {
        size += 1 + 1;
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += parameters_.CalculateSize(_map_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DashboardAction other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Global != false) {
        Global = other.Global;
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.ActionDisplay();
        }
        Display.MergeFrom(other.Display);
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Global = input.ReadBool();
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.ActionDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
          case 34: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Display options for an action
  /// </summary>
  public sealed partial class ActionDisplay : pb::IMessage<ActionDisplay> {
    private static readonly pb::MessageParser<ActionDisplay> _parser = new pb::MessageParser<ActionDisplay>(() => new ActionDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDisplay(ActionDisplay other) : this() {
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDisplay Clone() {
      return new ActionDisplay(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    /// <summary>
    /// Button text (e.g. 'report availability')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information about what reference pack this dashboard was installed from
  /// </summary>
  public sealed partial class ReferenceInfo : pb::IMessage<ReferenceInfo> {
    private static readonly pb::MessageParser<ReferenceInfo> _parser = new pb::MessageParser<ReferenceInfo>(() => new ReferenceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceInfo(ReferenceInfo other) : this() {
      packId_ = other.packId_;
      itemId_ = other.itemId_;
      packversion_ = other.packversion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceInfo Clone() {
      return new ReferenceInfo(this);
    }

    /// <summary>Field number for the "pack_id" field.</summary>
    public const int PackIdFieldNumber = 1;
    private string packId_ = "";
    /// <summary>
    /// The reference pack ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackId {
      get { return packId_; }
      set {
        packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private string itemId_ = "";
    /// <summary>
    /// The ID of the particular dashboard in the reference pack from which we were
    /// copied/created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packversion" field.</summary>
    public const int PackversionFieldNumber = 3;
    private string packversion_ = "";
    /// <summary>
    /// Version of the reference pack we were installed from 
    ///
    /// !! This property has inconsistent naming - it is NOT camel-cased in JSON and 
    /// therefore it is NOT snake-cased here !!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Packversion {
      get { return packversion_; }
      set {
        packversion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      if (ItemId != other.ItemId) return false;
      if (Packversion != other.Packversion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId.Length != 0) hash ^= PackId.GetHashCode();
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (Packversion.Length != 0) hash ^= Packversion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackId);
      }
      if (ItemId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (Packversion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Packversion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackId);
      }
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (Packversion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Packversion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceInfo other) {
      if (other == null) {
        return;
      }
      if (other.PackId.Length != 0) {
        PackId = other.PackId;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.Packversion.Length != 0) {
        Packversion = other.Packversion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PackId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            Packversion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Fields common to ALL possible root elements and contents elements
  ///
  /// The intention here is that a deserializer will load Content from the root of the dashboard
  /// and cast it to this type to learn what exact type it needs to be loaded as
  /// </summary>
  public sealed partial class AbstractDashboardContent : pb::IMessage<AbstractDashboardContent> {
    private static readonly pb::MessageParser<AbstractDashboardContent> _parser = new pb::MessageParser<AbstractDashboardContent>(() => new AbstractDashboardContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbstractDashboardContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractDashboardContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractDashboardContent(AbstractDashboardContent other) : this() {
      Type_ = other.Type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractDashboardContent Clone() {
      return new AbstractDashboardContent(this);
    }

    /// <summary>Field number for the "_type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string Type_ = "";
    /// <summary>
    /// All root and child elements must have a type to determine what exactly it is
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return Type_; }
      set {
        Type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbstractDashboardContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbstractDashboardContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbstractDashboardContent other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A set of entries in list form
  /// </summary>
  public sealed partial class LayoutList : pb::IMessage<LayoutList> {
    private static readonly pb::MessageParser<LayoutList> _parser = new pb::MessageParser<LayoutList>(() => new LayoutList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutList(LayoutList other) : this() {
      Type_ = other.Type_;
      contents_ = other.contents_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutList Clone() {
      return new LayoutList(this);
    }

    /// <summary>Field number for the "_type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string Type_ = "";
    /// <summary>
    /// Should be layout/list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return Type_; }
      set {
        Type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Value> _repeated_contents_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> contents_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Contents of the list - cast to AbstractDashboardContent to find type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> Contents {
      get { return contents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!contents_.Equals(other.contents_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= contents_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      contents_.WriteTo(output, _repeated_contents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += contents_.CalculateSize(_repeated_contents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutList other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      contents_.Add(other.contents_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            contents_.AddEntriesFrom(input, _repeated_contents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Columns with specific widths making up a dashboard
  /// </summary>
  public sealed partial class LayoutColumn : pb::IMessage<LayoutColumn> {
    private static readonly pb::MessageParser<LayoutColumn> _parser = new pb::MessageParser<LayoutColumn>(() => new LayoutColumn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn(LayoutColumn other) : this() {
      Type_ = other.Type_;
      columns_ = other.columns_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn Clone() {
      return new LayoutColumn(this);
    }

    /// <summary>Field number for the "_type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string Type_ = "";
    /// <summary>
    /// Should be layout/column
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return Type_; }
      set {
        Type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.LayoutColumn_Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.LayoutColumn_Column.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.LayoutColumn_Column> columns_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.LayoutColumn_Column>();
    /// <summary>
    /// Set of individual columns within the layout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.LayoutColumn_Column> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= columns_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutColumn other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      columns_.Add(other.columns_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single column in layout/column
  /// </summary>
  public sealed partial class LayoutColumn_Column : pb::IMessage<LayoutColumn_Column> {
    private static readonly pb::MessageParser<LayoutColumn_Column> _parser = new pb::MessageParser<LayoutColumn_Column>(() => new LayoutColumn_Column());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutColumn_Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn_Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn_Column(LayoutColumn_Column other) : this() {
      width_ = other.width_;
      contents_ = other.contents_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutColumn_Column Clone() {
      return new LayoutColumn_Column(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private double width_;
    /// <summary>
    /// Width of the column
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Value> _repeated_contents_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> contents_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Contents of the column - cast to AbstractDashboardContent to find type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> Contents {
      get { return contents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutColumn_Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutColumn_Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if(!contents_.Equals(other.contents_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0D) hash ^= Width.GetHashCode();
      hash ^= contents_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Width);
      }
      contents_.WriteTo(output, _repeated_contents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0D) {
        size += 1 + 8;
      }
      size += contents_.CalculateSize(_repeated_contents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutColumn_Column other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      contents_.Add(other.contents_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Width = input.ReadDouble();
            break;
          }
          case 18: {
            contents_.AddEntriesFrom(input, _repeated_contents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Fields common to all tiles that enable further dynamic deserialization
  ///
  /// Note that tile/new represents a title where all of the fields are empty (no config, description or 
  /// title)
  /// </summary>
  public sealed partial class AbstractTile : pb::IMessage<AbstractTile> {
    private static readonly pb::MessageParser<AbstractTile> _parser = new pb::MessageParser<AbstractTile>(() => new AbstractTile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbstractTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractTile(AbstractTile other) : this() {
      Type_ = other.Type_;
      title_ = other.title_;
      description_ = other.description_;
      Config = other.config_ != null ? other.Config.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbstractTile Clone() {
      return new AbstractTile(this);
    }

    /// <summary>Field number for the "_type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string Type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return Type_; }
      set {
        Type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// User editable description that is displayed under the title and typically explains what the tile is/does
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Value config_;
    /// <summary>
    /// Arbitrary config data (depends on _Type)
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbstractTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbstractTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (config_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbstractTile other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Config.MergeFrom(other.Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerspectiveMatch : pb::IMessage<PerspectiveMatch> {
    private static readonly pb::MessageParser<PerspectiveMatch> _parser = new pb::MessageParser<PerspectiveMatch>(() => new PerspectiveMatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerspectiveMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerspectiveMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerspectiveMatch(PerspectiveMatch other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      classIds_ = other.classIds_;
      groupIds_ = other.groupIds_;
      objectContext_ = other.objectContext_;
      isMonitorAlert_ = other.isMonitorAlert_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerspectiveMatch Clone() {
      return new PerspectiveMatch(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Exact ID match 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// type of entity to match on, e.g. scom/object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_ids" field.</summary>
    public const int ClassIdsFieldNumber = 3;
    private string classIds_ = "";
    /// <summary>
    /// Class IDs (although singular ID in practice) to match on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassIds {
      get { return classIds_; }
      set {
        classIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 4;
    private string groupIds_ = "";
    /// <summary>
    /// Group IDs (although singular ID in practice) to match on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupIds {
      get { return groupIds_; }
      set {
        groupIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_context" field.</summary>
    public const int ObjectContextFieldNumber = 5;
    private bool objectContext_;
    /// <summary>
    /// Whether to use object context for matching
    /// This value appears in early perspectives but is unused in practice and considered
    /// obsolete
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ObjectContext {
      get { return objectContext_; }
      set {
        objectContext_ = value;
      }
    }

    /// <summary>Field number for the "is_monitor_alert" field.</summary>
    public const int IsMonitorAlertFieldNumber = 6;
    private bool isMonitorAlert_;
    /// <summary>
    /// TODO: Requires documentation. This field appears to be obsolete
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMonitorAlert {
      get { return isMonitorAlert_; }
      set {
        isMonitorAlert_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// Explanatory name of the match - appears unused?
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerspectiveMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerspectiveMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (ClassIds != other.ClassIds) return false;
      if (GroupIds != other.GroupIds) return false;
      if (ObjectContext != other.ObjectContext) return false;
      if (IsMonitorAlert != other.IsMonitorAlert) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ClassIds.Length != 0) hash ^= ClassIds.GetHashCode();
      if (GroupIds.Length != 0) hash ^= GroupIds.GetHashCode();
      if (ObjectContext != false) hash ^= ObjectContext.GetHashCode();
      if (IsMonitorAlert != false) hash ^= IsMonitorAlert.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (ClassIds.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassIds);
      }
      if (GroupIds.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GroupIds);
      }
      if (ObjectContext != false) {
        output.WriteRawTag(40);
        output.WriteBool(ObjectContext);
      }
      if (IsMonitorAlert != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsMonitorAlert);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ClassIds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassIds);
      }
      if (GroupIds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupIds);
      }
      if (ObjectContext != false) {
        size += 1 + 1;
      }
      if (IsMonitorAlert != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerspectiveMatch other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ClassIds.Length != 0) {
        ClassIds = other.ClassIds;
      }
      if (other.GroupIds.Length != 0) {
        GroupIds = other.GroupIds;
      }
      if (other.ObjectContext != false) {
        ObjectContext = other.ObjectContext;
      }
      if (other.IsMonitorAlert != false) {
        IsMonitorAlert = other.IsMonitorAlert;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            ClassIds = input.ReadString();
            break;
          }
          case 34: {
            GroupIds = input.ReadString();
            break;
          }
          case 40: {
            ObjectContext = input.ReadBool();
            break;
          }
          case 48: {
            IsMonitorAlert = input.ReadBool();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenAccess : pb::IMessage<OpenAccess> {
    private static readonly pb::MessageParser<OpenAccess> _parser = new pb::MessageParser<OpenAccess>(() => new OpenAccess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenAccess(OpenAccess other) : this() {
      enabled_ = other.enabled_;
      Contexts = other.contexts_ != null ? other.Contexts.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenAccess Clone() {
      return new OpenAccess(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "contexts" field.</summary>
    public const int ContextsFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Value contexts_;
    /// <summary>
    /// Not currently used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Contexts {
      get { return contexts_; }
      set {
        contexts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (!object.Equals(Contexts, other.Contexts)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (contexts_ != null) hash ^= Contexts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (contexts_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contexts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (contexts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contexts);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenAccess other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.contexts_ != null) {
        if (contexts_ == null) {
          contexts_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Contexts.MergeFrom(other.Contexts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 18: {
            if (contexts_ == null) {
              contexts_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(contexts_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DashboardHelp : pb::IMessage<DashboardHelp> {
    private static readonly pb::MessageParser<DashboardHelp> _parser = new pb::MessageParser<DashboardHelp>(() => new DashboardHelp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DashboardHelp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DashboardReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardHelp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardHelp(DashboardHelp other) : this() {
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DashboardHelp Clone() {
      return new DashboardHelp(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    /// Escaped HTML content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DashboardHelp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DashboardHelp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DashboardHelp other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
