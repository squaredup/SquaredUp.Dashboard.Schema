// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from status.proto</summary>
  public static partial class StatusReflection {

    #region Descriptor
    /// <summary>File descriptor for status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzdGF0dXMucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xlL3Byb3RvYnVmL3N0",
            "cnVjdC5wcm90bxoLc2NvcGUucHJvdG8aDWNvbnRleHQucHJvdG8ipAEKD1N0",
            "YXR1c1RpbGVDb25mZxIpCgdjb250ZXh0GAEgASgLMhguc3F1YXJlZHVwLkNv",
            "bW1vbkNvbnRleHQSMQoGc291cmNlGAIgASgLMiEuc3F1YXJlZHVwLlN0YXR1",
            "c1RpbGVDb25mZ19Tb3VyY2USMwoHZGlzcGxheRgDIAEoCzIiLnNxdWFyZWR1",
            "cC5TdGF0dXNUaWxlQ29uZmdfRGlzcGxheSJrChZTdGF0dXNUaWxlQ29uZmdf",
            "U291cmNlEiUKBXNjb3BlGAEgASgLMhYuc3F1YXJlZHVwLkNvbW1vblNjb3Bl",
            "Eg4KBmFsZXJ0cxgCIAEoCBIaChJleHRlbmRlZFByb3BlcnRpZXMYAyABKAgi",
            "0wEKF1N0YXR1c1RpbGVDb25mZ19EaXNwbGF5Eg0KBWxhYmVsGAEgASgJEhAK",
            "CHN1YmxhYmVsGAIgASgJEjkKBWdyb3VwGAMgASgLMiouc3F1YXJlZHVwLlN0",
            "YXR1c1RpbGVDb25mZ19EaXNwbGF5X1NvcnRLZXkSOAoEc29ydBgEIAEoCzIq",
            "LnNxdWFyZWR1cC5TdGF0dXNUaWxlQ29uZmdfRGlzcGxheV9Tb3J0S2V5EhQK",
            "DGN1c3RvbV9sYWJlbBgFIAEoCRIMCgR6b29tGAYgASgJIkIKH1N0YXR1c1Rp",
            "bGVDb25mZ19EaXNwbGF5X1NvcnRLZXkSEAoIcHJvcGVydHkYASABKAkSDQoF",
            "b3JkZXIYAiABKAkitgEKFVN0YXR1c0Jsb2NrVGlsZUNvbmZpZxIpCgdjb250",
            "ZXh0GAEgASgLMhguc3F1YXJlZHVwLkNvbW1vbkNvbnRleHQSNwoGc291cmNl",
            "GAIgASgLMicuc3F1YXJlZHVwLlN0YXR1c0Jsb2NrVGlsZUNvbmZpZ19Tb3Vy",
            "Y2USOQoHZGlzcGxheRgDIAEoCzIoLnNxdWFyZWR1cC5TdGF0dXNCbG9ja1Rp",
            "bGVDb25maWdfRGlzcGxheSJxChxTdGF0dXNCbG9ja1RpbGVDb25maWdfU291",
            "cmNlEiUKBXNjb3BlGAEgASgLMhYuc3F1YXJlZHVwLkNvbW1vblNjb3BlEg4K",
            "BmFsZXJ0cxgCIAEoCBIaChJleHRlbmRlZFByb3BlcnRpZXMYAyABKAgitwIK",
            "HVN0YXR1c0Jsb2NrVGlsZUNvbmZpZ19EaXNwbGF5Eg0KBWxhYmVsGAEgASgJ",
            "Eg8KB2NvbHVtbnMYAiABKAUSDgoGaGVpZ2h0GAMgASgFEhAKCGZvbnRzaXpl",
            "GAQgASgBEhAKCHN1YmxhYmVsGAUgASgJEj8KBWdyb3VwGAYgASgLMjAuc3F1",
            "YXJlZHVwLlN0YXR1c0Jsb2NrVGlsZUNvbmZpZ19EaXNwbGF5X1NvcnRLZXkS",
            "PgoEc29ydBgHIAEoCzIwLnNxdWFyZWR1cC5TdGF0dXNCbG9ja1RpbGVDb25m",
            "aWdfRGlzcGxheV9Tb3J0S2V5EhQKDGN1c3RvbV9sYWJlbBgIIAEoCRIdChVz",
            "dWJsYWJlbF9jdXN0b21fbGFiZWwYCSABKAkSDAoEem9vbRgKIAEoCSJICiVT",
            "dGF0dXNCbG9ja1RpbGVDb25maWdfRGlzcGxheV9Tb3J0S2V5EhAKCHByb3Bl",
            "cnR5GAEgASgJEg0KBW9yZGVyGAIgASgJIrYBChVTdGF0dXNEb251dFRpbGVD",
            "b25maWcSKQoHY29udGV4dBgBIAEoCzIYLnNxdWFyZWR1cC5Db21tb25Db250",
            "ZXh0EjcKBnNvdXJjZRgCIAEoCzInLnNxdWFyZWR1cC5TdGF0dXNEb251dFRp",
            "bGVDb25maWdfU291cmNlEjkKB2Rpc3BsYXkYAyABKAsyKC5zcXVhcmVkdXAu",
            "U3RhdHVzRG9udXRUaWxlQ29uZmlnX0Rpc3BsYXkicQocU3RhdHVzRG9udXRU",
            "aWxlQ29uZmlnX1NvdXJjZRIlCgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5D",
            "b21tb25TY29wZRIOCgZhbGVydHMYAiABKAgSGgoSZXh0ZW5kZWRQcm9wZXJ0",
            "aWVzGAMgASgIIoQBCh1TdGF0dXNEb251dFRpbGVDb25maWdfRGlzcGxheRIR",
            "CglzaXplX21vZGUYASABKAkSFAoMbGVnZW5kX3NjYWxlGAIgASgBEhMKC3No",
            "b3dfbGVnZW5kGAMgASgIEhcKD2xlZ2VuZF9wb3NpdGlvbhgEIAEoCRIMCgR6",
            "b29tGAUgASgJQh2qAhpTcXVhcmVkVXAuRGFzaGJvYXJkLlNjaGVtYWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusTileConfg), global::SquaredUp.Dashboard.Schema.StatusTileConfg.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source), global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source.Parser, new[]{ "Scope", "Alerts", "ExtendedProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display), global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display.Parser, new[]{ "Label", "Sublabel", "Group", "Sort", "CustomLabel", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey), global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey.Parser, new[]{ "Property", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig), global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source), global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source.Parser, new[]{ "Scope", "Alerts", "ExtendedProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display), global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display.Parser, new[]{ "Label", "Columns", "Height", "Fontsize", "Sublabel", "Group", "Sort", "CustomLabel", "SublabelCustomLabel", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey), global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey.Parser, new[]{ "Property", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig), global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source), global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source.Parser, new[]{ "Scope", "Alerts", "ExtendedProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display), global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display.Parser, new[]{ "SizeMode", "LegendScale", "ShowLegend", "LegendPosition", "Zoom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StatusTileConfg : pb::IMessage<StatusTileConfg> {
    private static readonly pb::MessageParser<StatusTileConfg> _parser = new pb::MessageParser<StatusTileConfg>(() => new StatusTileConfg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusTileConfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg(StatusTileConfg other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg Clone() {
      return new StatusTileConfg(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusTileConfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusTileConfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusTileConfg other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusTileConfg_Source : pb::IMessage<StatusTileConfg_Source> {
    private static readonly pb::MessageParser<StatusTileConfg_Source> _parser = new pb::MessageParser<StatusTileConfg_Source>(() => new StatusTileConfg_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusTileConfg_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Source(StatusTileConfg_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
      alerts_ = other.alerts_;
      extendedProperties_ = other.extendedProperties_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Source Clone() {
      return new StatusTileConfg_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "alerts" field.</summary>
    public const int AlertsFieldNumber = 2;
    private bool alerts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alerts {
      get { return alerts_; }
      set {
        alerts_ = value;
      }
    }

    /// <summary>Field number for the "extendedProperties" field.</summary>
    public const int ExtendedPropertiesFieldNumber = 3;
    private bool extendedProperties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtendedProperties {
      get { return extendedProperties_; }
      set {
        extendedProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusTileConfg_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusTileConfg_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      if (Alerts != other.Alerts) return false;
      if (ExtendedProperties != other.ExtendedProperties) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      if (Alerts != false) hash ^= Alerts.GetHashCode();
      if (ExtendedProperties != false) hash ^= ExtendedProperties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
      if (Alerts != false) {
        output.WriteRawTag(16);
        output.WriteBool(Alerts);
      }
      if (ExtendedProperties != false) {
        output.WriteRawTag(24);
        output.WriteBool(ExtendedProperties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      if (Alerts != false) {
        size += 1 + 1;
      }
      if (ExtendedProperties != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusTileConfg_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      if (other.Alerts != false) {
        Alerts = other.Alerts;
      }
      if (other.ExtendedProperties != false) {
        ExtendedProperties = other.ExtendedProperties;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
          case 16: {
            Alerts = input.ReadBool();
            break;
          }
          case 24: {
            ExtendedProperties = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusTileConfg_Display : pb::IMessage<StatusTileConfg_Display> {
    private static readonly pb::MessageParser<StatusTileConfg_Display> _parser = new pb::MessageParser<StatusTileConfg_Display>(() => new StatusTileConfg_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusTileConfg_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display(StatusTileConfg_Display other) : this() {
      label_ = other.label_;
      sublabel_ = other.sublabel_;
      Group = other.group_ != null ? other.Group.Clone() : null;
      Sort = other.sort_ != null ? other.Sort.Clone() : null;
      customLabel_ = other.customLabel_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display Clone() {
      return new StatusTileConfg_Display(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sublabel" field.</summary>
    public const int SublabelFieldNumber = 2;
    private string sublabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sublabel {
      get { return sublabel_; }
      set {
        sublabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 4;
    private global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 6;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusTileConfg_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusTileConfg_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Sublabel != other.Sublabel) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Sublabel.Length != 0) hash ^= Sublabel.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (sort_ != null) hash ^= Sort.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Sublabel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sublabel);
      }
      if (group_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Group);
      }
      if (sort_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Sort);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Sublabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sublabel);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (sort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusTileConfg_Display other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Sublabel.Length != 0) {
        Sublabel = other.Sublabel;
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.sort_ != null) {
        if (sort_ == null) {
          sort_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey();
        }
        Sort.MergeFrom(other.Sort);
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 18: {
            Sublabel = input.ReadString();
            break;
          }
          case 26: {
            if (group_ == null) {
              group_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey();
            }
            input.ReadMessage(group_);
            break;
          }
          case 34: {
            if (sort_ == null) {
              sort_ = new global::SquaredUp.Dashboard.Schema.StatusTileConfg_Display_SortKey();
            }
            input.ReadMessage(sort_);
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusTileConfg_Display_SortKey : pb::IMessage<StatusTileConfg_Display_SortKey> {
    private static readonly pb::MessageParser<StatusTileConfg_Display_SortKey> _parser = new pb::MessageParser<StatusTileConfg_Display_SortKey>(() => new StatusTileConfg_Display_SortKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusTileConfg_Display_SortKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display_SortKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display_SortKey(StatusTileConfg_Display_SortKey other) : this() {
      property_ = other.property_;
      order_ = other.order_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTileConfg_Display_SortKey Clone() {
      return new StatusTileConfg_Display_SortKey(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private string order_ = "";
    /// <summary>
    /// e.g. asc, desc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Order {
      get { return order_; }
      set {
        order_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusTileConfg_Display_SortKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusTileConfg_Display_SortKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Order != other.Order) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      if (Order.Length != 0) hash ^= Order.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      if (Order.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Order);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      if (Order.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Order);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusTileConfg_Display_SortKey other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      if (other.Order.Length != 0) {
        Order = other.Order;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            Order = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusBlockTileConfig : pb::IMessage<StatusBlockTileConfig> {
    private static readonly pb::MessageParser<StatusBlockTileConfig> _parser = new pb::MessageParser<StatusBlockTileConfig>(() => new StatusBlockTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusBlockTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig(StatusBlockTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig Clone() {
      return new StatusBlockTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusBlockTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusBlockTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusBlockTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusBlockTileConfig_Source : pb::IMessage<StatusBlockTileConfig_Source> {
    private static readonly pb::MessageParser<StatusBlockTileConfig_Source> _parser = new pb::MessageParser<StatusBlockTileConfig_Source>(() => new StatusBlockTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusBlockTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Source(StatusBlockTileConfig_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
      alerts_ = other.alerts_;
      extendedProperties_ = other.extendedProperties_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Source Clone() {
      return new StatusBlockTileConfig_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "alerts" field.</summary>
    public const int AlertsFieldNumber = 2;
    private bool alerts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alerts {
      get { return alerts_; }
      set {
        alerts_ = value;
      }
    }

    /// <summary>Field number for the "extendedProperties" field.</summary>
    public const int ExtendedPropertiesFieldNumber = 3;
    private bool extendedProperties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtendedProperties {
      get { return extendedProperties_; }
      set {
        extendedProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusBlockTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusBlockTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      if (Alerts != other.Alerts) return false;
      if (ExtendedProperties != other.ExtendedProperties) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      if (Alerts != false) hash ^= Alerts.GetHashCode();
      if (ExtendedProperties != false) hash ^= ExtendedProperties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
      if (Alerts != false) {
        output.WriteRawTag(16);
        output.WriteBool(Alerts);
      }
      if (ExtendedProperties != false) {
        output.WriteRawTag(24);
        output.WriteBool(ExtendedProperties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      if (Alerts != false) {
        size += 1 + 1;
      }
      if (ExtendedProperties != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusBlockTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      if (other.Alerts != false) {
        Alerts = other.Alerts;
      }
      if (other.ExtendedProperties != false) {
        ExtendedProperties = other.ExtendedProperties;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
          case 16: {
            Alerts = input.ReadBool();
            break;
          }
          case 24: {
            ExtendedProperties = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusBlockTileConfig_Display : pb::IMessage<StatusBlockTileConfig_Display> {
    private static readonly pb::MessageParser<StatusBlockTileConfig_Display> _parser = new pb::MessageParser<StatusBlockTileConfig_Display>(() => new StatusBlockTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusBlockTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display(StatusBlockTileConfig_Display other) : this() {
      label_ = other.label_;
      columns_ = other.columns_;
      height_ = other.height_;
      fontsize_ = other.fontsize_;
      sublabel_ = other.sublabel_;
      Group = other.group_ != null ? other.Group.Clone() : null;
      Sort = other.sort_ != null ? other.Sort.Clone() : null;
      customLabel_ = other.customLabel_;
      sublabelCustomLabel_ = other.sublabelCustomLabel_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display Clone() {
      return new StatusBlockTileConfig_Display(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private int columns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Columns {
      get { return columns_; }
      set {
        columns_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "fontsize" field.</summary>
    public const int FontsizeFieldNumber = 4;
    private double fontsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fontsize {
      get { return fontsize_; }
      set {
        fontsize_ = value;
      }
    }

    /// <summary>Field number for the "sublabel" field.</summary>
    public const int SublabelFieldNumber = 5;
    private string sublabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sublabel {
      get { return sublabel_; }
      set {
        sublabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 6;
    private global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 7;
    private global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 8;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sublabel_custom_label" field.</summary>
    public const int SublabelCustomLabelFieldNumber = 9;
    private string sublabelCustomLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SublabelCustomLabel {
      get { return sublabelCustomLabel_; }
      set {
        sublabelCustomLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 10;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusBlockTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusBlockTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Columns != other.Columns) return false;
      if (Height != other.Height) return false;
      if (Fontsize != other.Fontsize) return false;
      if (Sublabel != other.Sublabel) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (SublabelCustomLabel != other.SublabelCustomLabel) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Columns != 0) hash ^= Columns.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Fontsize != 0D) hash ^= Fontsize.GetHashCode();
      if (Sublabel.Length != 0) hash ^= Sublabel.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (sort_ != null) hash ^= Sort.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (SublabelCustomLabel.Length != 0) hash ^= SublabelCustomLabel.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Columns != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Columns);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (Fontsize != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Fontsize);
      }
      if (Sublabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sublabel);
      }
      if (group_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Group);
      }
      if (sort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Sort);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomLabel);
      }
      if (SublabelCustomLabel.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SublabelCustomLabel);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Columns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Columns);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Fontsize != 0D) {
        size += 1 + 8;
      }
      if (Sublabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sublabel);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (sort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (SublabelCustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SublabelCustomLabel);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusBlockTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Columns != 0) {
        Columns = other.Columns;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Fontsize != 0D) {
        Fontsize = other.Fontsize;
      }
      if (other.Sublabel.Length != 0) {
        Sublabel = other.Sublabel;
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.sort_ != null) {
        if (sort_ == null) {
          sort_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey();
        }
        Sort.MergeFrom(other.Sort);
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.SublabelCustomLabel.Length != 0) {
        SublabelCustomLabel = other.SublabelCustomLabel;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Columns = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 33: {
            Fontsize = input.ReadDouble();
            break;
          }
          case 42: {
            Sublabel = input.ReadString();
            break;
          }
          case 50: {
            if (group_ == null) {
              group_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey();
            }
            input.ReadMessage(group_);
            break;
          }
          case 58: {
            if (sort_ == null) {
              sort_ = new global::SquaredUp.Dashboard.Schema.StatusBlockTileConfig_Display_SortKey();
            }
            input.ReadMessage(sort_);
            break;
          }
          case 66: {
            CustomLabel = input.ReadString();
            break;
          }
          case 74: {
            SublabelCustomLabel = input.ReadString();
            break;
          }
          case 82: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusBlockTileConfig_Display_SortKey : pb::IMessage<StatusBlockTileConfig_Display_SortKey> {
    private static readonly pb::MessageParser<StatusBlockTileConfig_Display_SortKey> _parser = new pb::MessageParser<StatusBlockTileConfig_Display_SortKey>(() => new StatusBlockTileConfig_Display_SortKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusBlockTileConfig_Display_SortKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display_SortKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display_SortKey(StatusBlockTileConfig_Display_SortKey other) : this() {
      property_ = other.property_;
      order_ = other.order_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusBlockTileConfig_Display_SortKey Clone() {
      return new StatusBlockTileConfig_Display_SortKey(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private string order_ = "";
    /// <summary>
    /// e.g. asc, desc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Order {
      get { return order_; }
      set {
        order_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusBlockTileConfig_Display_SortKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusBlockTileConfig_Display_SortKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Order != other.Order) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      if (Order.Length != 0) hash ^= Order.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      if (Order.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Order);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      if (Order.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Order);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusBlockTileConfig_Display_SortKey other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      if (other.Order.Length != 0) {
        Order = other.Order;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            Order = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusDonutTileConfig : pb::IMessage<StatusDonutTileConfig> {
    private static readonly pb::MessageParser<StatusDonutTileConfig> _parser = new pb::MessageParser<StatusDonutTileConfig>(() => new StatusDonutTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusDonutTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig(StatusDonutTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig Clone() {
      return new StatusDonutTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusDonutTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusDonutTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusDonutTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.StatusDonutTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusDonutTileConfig_Source : pb::IMessage<StatusDonutTileConfig_Source> {
    private static readonly pb::MessageParser<StatusDonutTileConfig_Source> _parser = new pb::MessageParser<StatusDonutTileConfig_Source>(() => new StatusDonutTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusDonutTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Source(StatusDonutTileConfig_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
      alerts_ = other.alerts_;
      extendedProperties_ = other.extendedProperties_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Source Clone() {
      return new StatusDonutTileConfig_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "alerts" field.</summary>
    public const int AlertsFieldNumber = 2;
    private bool alerts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alerts {
      get { return alerts_; }
      set {
        alerts_ = value;
      }
    }

    /// <summary>Field number for the "extendedProperties" field.</summary>
    public const int ExtendedPropertiesFieldNumber = 3;
    private bool extendedProperties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtendedProperties {
      get { return extendedProperties_; }
      set {
        extendedProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusDonutTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusDonutTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      if (Alerts != other.Alerts) return false;
      if (ExtendedProperties != other.ExtendedProperties) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      if (Alerts != false) hash ^= Alerts.GetHashCode();
      if (ExtendedProperties != false) hash ^= ExtendedProperties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
      if (Alerts != false) {
        output.WriteRawTag(16);
        output.WriteBool(Alerts);
      }
      if (ExtendedProperties != false) {
        output.WriteRawTag(24);
        output.WriteBool(ExtendedProperties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      if (Alerts != false) {
        size += 1 + 1;
      }
      if (ExtendedProperties != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusDonutTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      if (other.Alerts != false) {
        Alerts = other.Alerts;
      }
      if (other.ExtendedProperties != false) {
        ExtendedProperties = other.ExtendedProperties;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
          case 16: {
            Alerts = input.ReadBool();
            break;
          }
          case 24: {
            ExtendedProperties = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusDonutTileConfig_Display : pb::IMessage<StatusDonutTileConfig_Display> {
    private static readonly pb::MessageParser<StatusDonutTileConfig_Display> _parser = new pb::MessageParser<StatusDonutTileConfig_Display>(() => new StatusDonutTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusDonutTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.StatusReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Display(StatusDonutTileConfig_Display other) : this() {
      sizeMode_ = other.sizeMode_;
      legendScale_ = other.legendScale_;
      showLegend_ = other.showLegend_;
      legendPosition_ = other.legendPosition_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusDonutTileConfig_Display Clone() {
      return new StatusDonutTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_mode" field.</summary>
    public const int SizeModeFieldNumber = 1;
    private string sizeMode_ = "";
    /// <summary>
    /// e.g. fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeMode {
      get { return sizeMode_; }
      set {
        sizeMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "legend_scale" field.</summary>
    public const int LegendScaleFieldNumber = 2;
    private double legendScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LegendScale {
      get { return legendScale_; }
      set {
        legendScale_ = value;
      }
    }

    /// <summary>Field number for the "show_legend" field.</summary>
    public const int ShowLegendFieldNumber = 3;
    private bool showLegend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowLegend {
      get { return showLegend_; }
      set {
        showLegend_ = value;
      }
    }

    /// <summary>Field number for the "legend_position" field.</summary>
    public const int LegendPositionFieldNumber = 4;
    private string legendPosition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LegendPosition {
      get { return legendPosition_; }
      set {
        legendPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 5;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusDonutTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusDonutTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeMode != other.SizeMode) return false;
      if (LegendScale != other.LegendScale) return false;
      if (ShowLegend != other.ShowLegend) return false;
      if (LegendPosition != other.LegendPosition) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeMode.Length != 0) hash ^= SizeMode.GetHashCode();
      if (LegendScale != 0D) hash ^= LegendScale.GetHashCode();
      if (ShowLegend != false) hash ^= ShowLegend.GetHashCode();
      if (LegendPosition.Length != 0) hash ^= LegendPosition.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeMode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SizeMode);
      }
      if (LegendScale != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LegendScale);
      }
      if (ShowLegend != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowLegend);
      }
      if (LegendPosition.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LegendPosition);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeMode);
      }
      if (LegendScale != 0D) {
        size += 1 + 8;
      }
      if (ShowLegend != false) {
        size += 1 + 1;
      }
      if (LegendPosition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LegendPosition);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusDonutTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeMode.Length != 0) {
        SizeMode = other.SizeMode;
      }
      if (other.LegendScale != 0D) {
        LegendScale = other.LegendScale;
      }
      if (other.ShowLegend != false) {
        ShowLegend = other.ShowLegend;
      }
      if (other.LegendPosition.Length != 0) {
        LegendPosition = other.LegendPosition;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SizeMode = input.ReadString();
            break;
          }
          case 17: {
            LegendScale = input.ReadDouble();
            break;
          }
          case 24: {
            ShowLegend = input.ReadBool();
            break;
          }
          case 34: {
            LegendPosition = input.ReadString();
            break;
          }
          case 42: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
