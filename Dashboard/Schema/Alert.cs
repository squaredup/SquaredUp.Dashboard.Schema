// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alert.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from alert.proto</summary>
  public static partial class AlertReflection {

    #region Descriptor
    /// <summary>File descriptor for alert.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AlertReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgthbGVydC5wcm90bxIJc3F1YXJlZHVwGhxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvGg90aW1lZnJhbWUucHJvdG8aC3Njb3BlLnByb3RvIq4BChNB",
            "bGVydExpc3RUaWxlQ29uZmlnEjUKBnNvdXJjZRgBIAEoCzIlLnNxdWFyZWR1",
            "cC5BbGVydExpc3RUaWxlQ29uZmlnX1NvdXJjZRI3CgdkaXNwbGF5GAIgASgL",
            "MiYuc3F1YXJlZHVwLkFsZXJ0TGlzdFRpbGVDb25maWdfRGlzcGxheRInCgdj",
            "b250ZXh0GAMgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlIuIBChpBbGVy",
            "dExpc3RUaWxlQ29uZmlnX1NvdXJjZRIlCgVzY29wZRgBIAEoCzIWLnNxdWFy",
            "ZWR1cC5Db21tb25TY29wZRISCgpzZXZlcml0aWVzGAIgAygJEhIKCnByaW9y",
            "aXRpZXMYAyADKAkSDwoHc291cmNlcxgEIAMoCRIlCgVvd25lchgFIAEoCzIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5WYWx1ZRIOCgZzdGF0ZXMYBiADKAkSLQoJdGlt",
            "ZWZyYW1lGAcgASgLMhouc3F1YXJlZHVwLkNvbW1vblRpbWVmcmFtZSJyChtB",
            "bGVydExpc3RUaWxlQ29uZmlnX0Rpc3BsYXkSDQoFbGltaXQYASABKAUSEwoL",
            "c2hvd190aXRsZXMYAiABKAgSEAoIc2hvd19hbGwYAyABKAgSDwoHY29sdW1u",
            "cxgEIAMoCRIMCgR6b29tGAUgASgJIrABChRBbGVydERvbnV0VGlsZUNvbmZp",
            "ZxI1CgZzb3VyY2UYASABKAsyJS5zcXVhcmVkdXAuQWxlcnRMaXN0VGlsZUNv",
            "bmZpZ19Tb3VyY2USOAoHZGlzcGxheRgCIAEoCzInLnNxdWFyZWR1cC5BbGVy",
            "dERvbnV0VGlsZUNvbmZpZ19EaXNwbGF5EicKB2NvbnRleHQYAyABKAsyFi5n",
            "b29nbGUucHJvdG9idWYuVmFsdWUi8wEKHEFsZXJ0RG9udXRUaWxlQ29uZmln",
            "X0Rpc3BsYXkSEQoJc2l6ZV9tb2RlGAEgASgJEhQKDGxlZ2VuZF9zY2FsZRgC",
            "IAEoARITCgtzaG93X2xlZ2VuZBgDIAEoCBIXCg9sZWdlbmRfcG9zaXRpb24Y",
            "BCABKAkSEAoIZ3JvdXBpbmcYBSABKAkSOgoHbWFwcGluZxgGIAEoCzIpLnNx",
            "dWFyZWR1cC5BbGVydERvbnV0VGlsZV9EaXNwbGF5TWFwcGluZ3MSIAoYZ3Jv",
            "dXBpbmdfZmlsdGVyX3Byb3BlcnR5GAcgASgJEgwKBHpvb20YCCABKAkixgEK",
            "HkFsZXJ0RG9udXRUaWxlX0Rpc3BsYXlNYXBwaW5ncxJFCgZ2YWx1ZXMYASAD",
            "KAsyNS5zcXVhcmVkdXAuQWxlcnREb251dFRpbGVfRGlzcGxheU1hcHBpbmdz",
            "LlZhbHVlc0VudHJ5Gl0KC1ZhbHVlc0VudHJ5EgsKA2tleRgBIAEoCRI9CgV2",
            "YWx1ZRgCIAEoCzIuLnNxdWFyZWR1cC5BbGVydERvbnV0VGlsZV9TdGF0dXNE",
            "aXNwbGF5TWFwcGluZzoCOAEiVQojQWxlcnREb251dFRpbGVfU3RhdHVzRGlz",
            "cGxheU1hcHBpbmcSDQoFdmFsdWUYASABKAUSDgoGY29sb3VyGAIgASgJEg8K",
            "B2Rpc3BsYXkYAyABKAlCHaoCGlNxdWFyZWRVcC5EYXNoYm9hcmQuU2NoZW1h",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertListTileConfig), global::SquaredUp.Dashboard.Schema.AlertListTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source), global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source.Parser, new[]{ "Scope", "Severities", "Priorities", "Sources", "Owner", "States", "Timeframe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display), global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display.Parser, new[]{ "Limit", "ShowTitles", "ShowAll", "Columns", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig), global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display), global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display.Parser, new[]{ "SizeMode", "LegendScale", "ShowLegend", "LegendPosition", "Grouping", "Mapping", "GroupingFilterProperty", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings), global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings.Parser, new[]{ "Values" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping), global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping.Parser, new[]{ "Value", "Colour", "Display" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Tile config of tile/alert-list
  /// </summary>
  public sealed partial class AlertListTileConfig : pb::IMessage<AlertListTileConfig> {
    private static readonly pb::MessageParser<AlertListTileConfig> _parser = new pb::MessageParser<AlertListTileConfig>(() => new AlertListTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertListTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig(AlertListTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig Clone() {
      return new AlertListTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value context_;
    /// <summary>
    /// TODO: Typing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertListTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertListTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertListTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Source options for alert list tile
  /// </summary>
  public sealed partial class AlertListTileConfig_Source : pb::IMessage<AlertListTileConfig_Source> {
    private static readonly pb::MessageParser<AlertListTileConfig_Source> _parser = new pb::MessageParser<AlertListTileConfig_Source>(() => new AlertListTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertListTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Source(AlertListTileConfig_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
      severities_ = other.severities_.Clone();
      priorities_ = other.priorities_.Clone();
      sources_ = other.sources_.Clone();
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      states_ = other.states_.Clone();
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Source Clone() {
      return new AlertListTileConfig_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "severities" field.</summary>
    public const int SeveritiesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_severities_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> severities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of severity types - encoded as integers in strings (e.g. "1")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Severities {
      get { return severities_; }
    }

    /// <summary>Field number for the "priorities" field.</summary>
    public const int PrioritiesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_priorities_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> priorities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of priority types - encoded as integers in strings (e.g. "1")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Priorities {
      get { return priorities_; }
    }

    /// <summary>Field number for the "sources" field.</summary>
    public const int SourcesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_sources_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> sources_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Alert sources - typically "monitor" or "rule" (or both)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sources {
      get { return sources_; }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Value owner_;
    /// <summary>
    /// Alert owner (filter). Typically "any" or "me"
    ///
    /// This is encoded as 'value' because it arbitrarily switches between 
    /// a string or an array with only one element
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_states_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> states_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of states permitted - encoded as integers in strings (e.g. "-1")
    ///
    /// Typical value appears to be any (open) encoded as -1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> States {
      get { return states_; }
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 7;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    /// <summary>
    /// Timeframe of the alert display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertListTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertListTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      if(!severities_.Equals(other.severities_)) return false;
      if(!priorities_.Equals(other.priorities_)) return false;
      if(!sources_.Equals(other.sources_)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if(!states_.Equals(other.states_)) return false;
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      hash ^= severities_.GetHashCode();
      hash ^= priorities_.GetHashCode();
      hash ^= sources_.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      hash ^= states_.GetHashCode();
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
      severities_.WriteTo(output, _repeated_severities_codec);
      priorities_.WriteTo(output, _repeated_priorities_codec);
      sources_.WriteTo(output, _repeated_sources_codec);
      if (owner_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Owner);
      }
      states_.WriteTo(output, _repeated_states_codec);
      if (timeframe_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      size += severities_.CalculateSize(_repeated_severities_codec);
      size += priorities_.CalculateSize(_repeated_priorities_codec);
      size += sources_.CalculateSize(_repeated_sources_codec);
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      size += states_.CalculateSize(_repeated_states_codec);
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertListTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      severities_.Add(other.severities_);
      priorities_.Add(other.priorities_);
      sources_.Add(other.sources_);
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Owner.MergeFrom(other.Owner);
      }
      states_.Add(other.states_);
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
          case 18: {
            severities_.AddEntriesFrom(input, _repeated_severities_codec);
            break;
          }
          case 26: {
            priorities_.AddEntriesFrom(input, _repeated_priorities_codec);
            break;
          }
          case 34: {
            sources_.AddEntriesFrom(input, _repeated_sources_codec);
            break;
          }
          case 42: {
            if (owner_ == null) {
              owner_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 50: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 58: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Display options for alert list
  /// </summary>
  public sealed partial class AlertListTileConfig_Display : pb::IMessage<AlertListTileConfig_Display> {
    private static readonly pb::MessageParser<AlertListTileConfig_Display> _parser = new pb::MessageParser<AlertListTileConfig_Display>(() => new AlertListTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertListTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Display(AlertListTileConfig_Display other) : this() {
      limit_ = other.limit_;
      showTitles_ = other.showTitles_;
      showAll_ = other.showAll_;
      columns_ = other.columns_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertListTileConfig_Display Clone() {
      return new AlertListTileConfig_Display(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private int limit_;
    /// <summary>
    /// Max alerts to display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "show_titles" field.</summary>
    public const int ShowTitlesFieldNumber = 2;
    private bool showTitles_;
    /// <summary>
    /// Whether to display column titles
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowTitles {
      get { return showTitles_; }
      set {
        showTitles_ = value;
      }
    }

    /// <summary>Field number for the "show_all" field.</summary>
    public const int ShowAllFieldNumber = 3;
    private bool showAll_;
    /// <summary>
    /// Whether to show all alerts regardless of limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAll {
      get { return showAll_; }
      set {
        showAll_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Column names to display in the list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 5;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertListTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertListTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (ShowTitles != other.ShowTitles) return false;
      if (ShowAll != other.ShowAll) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (ShowTitles != false) hash ^= ShowTitles.GetHashCode();
      if (ShowAll != false) hash ^= ShowAll.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Limit);
      }
      if (ShowTitles != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowTitles);
      }
      if (ShowAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowAll);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (ShowTitles != false) {
        size += 1 + 1;
      }
      if (ShowAll != false) {
        size += 1 + 1;
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertListTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.ShowTitles != false) {
        ShowTitles = other.ShowTitles;
      }
      if (other.ShowAll != false) {
        ShowAll = other.ShowAll;
      }
      columns_.Add(other.columns_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadInt32();
            break;
          }
          case 16: {
            ShowTitles = input.ReadBool();
            break;
          }
          case 24: {
            ShowAll = input.ReadBool();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 42: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tile config of tile/alertlist-donut
  /// </summary>
  public sealed partial class AlertDonutTileConfig : pb::IMessage<AlertDonutTileConfig> {
    private static readonly pb::MessageParser<AlertDonutTileConfig> _parser = new pb::MessageParser<AlertDonutTileConfig>(() => new AlertDonutTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertDonutTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig(AlertDonutTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig Clone() {
      return new AlertDonutTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source source_;
    /// <summary>
    /// We use the same source config as alert-list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value context_;
    /// <summary>
    /// TODO: Typing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertDonutTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertDonutTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertDonutTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.AlertListTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.AlertDonutTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlertDonutTileConfig_Display : pb::IMessage<AlertDonutTileConfig_Display> {
    private static readonly pb::MessageParser<AlertDonutTileConfig_Display> _parser = new pb::MessageParser<AlertDonutTileConfig_Display>(() => new AlertDonutTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertDonutTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig_Display(AlertDonutTileConfig_Display other) : this() {
      sizeMode_ = other.sizeMode_;
      legendScale_ = other.legendScale_;
      showLegend_ = other.showLegend_;
      legendPosition_ = other.legendPosition_;
      grouping_ = other.grouping_;
      Mapping = other.mapping_ != null ? other.Mapping.Clone() : null;
      groupingFilterProperty_ = other.groupingFilterProperty_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTileConfig_Display Clone() {
      return new AlertDonutTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_mode" field.</summary>
    public const int SizeModeFieldNumber = 1;
    private string sizeMode_ = "";
    /// <summary>
    /// Size behaviour of the doughnut - typically 'default' or 'fill'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeMode {
      get { return sizeMode_; }
      set {
        sizeMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "legend_scale" field.</summary>
    public const int LegendScaleFieldNumber = 2;
    private double legendScale_;
    /// <summary>
    /// The scale factor of the legend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LegendScale {
      get { return legendScale_; }
      set {
        legendScale_ = value;
      }
    }

    /// <summary>Field number for the "show_legend" field.</summary>
    public const int ShowLegendFieldNumber = 3;
    private bool showLegend_;
    /// <summary>
    /// Whether to display a legend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowLegend {
      get { return showLegend_; }
      set {
        showLegend_ = value;
      }
    }

    /// <summary>Field number for the "legend_position" field.</summary>
    public const int LegendPositionFieldNumber = 4;
    private string legendPosition_ = "";
    /// <summary>
    /// Position of the legend - e.g. left, right etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LegendPosition {
      get { return legendPosition_; }
      set {
        legendPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grouping" field.</summary>
    public const int GroupingFieldNumber = 5;
    private string grouping_ = "";
    /// <summary>
    /// How to perform grouping - e.g. the default is "severity"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grouping {
      get { return grouping_; }
      set {
        grouping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapping" field.</summary>
    public const int MappingFieldNumber = 6;
    private global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings mapping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings Mapping {
      get { return mapping_; }
      set {
        mapping_ = value;
      }
    }

    /// <summary>Field number for the "grouping_filter_property" field.</summary>
    public const int GroupingFilterPropertyFieldNumber = 7;
    private string groupingFilterProperty_ = "";
    /// <summary>
    /// How groups are filtered - e.g. default is "Severity"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupingFilterProperty {
      get { return groupingFilterProperty_; }
      set {
        groupingFilterProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 8;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertDonutTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertDonutTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeMode != other.SizeMode) return false;
      if (LegendScale != other.LegendScale) return false;
      if (ShowLegend != other.ShowLegend) return false;
      if (LegendPosition != other.LegendPosition) return false;
      if (Grouping != other.Grouping) return false;
      if (!object.Equals(Mapping, other.Mapping)) return false;
      if (GroupingFilterProperty != other.GroupingFilterProperty) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeMode.Length != 0) hash ^= SizeMode.GetHashCode();
      if (LegendScale != 0D) hash ^= LegendScale.GetHashCode();
      if (ShowLegend != false) hash ^= ShowLegend.GetHashCode();
      if (LegendPosition.Length != 0) hash ^= LegendPosition.GetHashCode();
      if (Grouping.Length != 0) hash ^= Grouping.GetHashCode();
      if (mapping_ != null) hash ^= Mapping.GetHashCode();
      if (GroupingFilterProperty.Length != 0) hash ^= GroupingFilterProperty.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeMode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SizeMode);
      }
      if (LegendScale != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LegendScale);
      }
      if (ShowLegend != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowLegend);
      }
      if (LegendPosition.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LegendPosition);
      }
      if (Grouping.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Grouping);
      }
      if (mapping_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Mapping);
      }
      if (GroupingFilterProperty.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GroupingFilterProperty);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeMode);
      }
      if (LegendScale != 0D) {
        size += 1 + 8;
      }
      if (ShowLegend != false) {
        size += 1 + 1;
      }
      if (LegendPosition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LegendPosition);
      }
      if (Grouping.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Grouping);
      }
      if (mapping_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapping);
      }
      if (GroupingFilterProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingFilterProperty);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertDonutTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeMode.Length != 0) {
        SizeMode = other.SizeMode;
      }
      if (other.LegendScale != 0D) {
        LegendScale = other.LegendScale;
      }
      if (other.ShowLegend != false) {
        ShowLegend = other.ShowLegend;
      }
      if (other.LegendPosition.Length != 0) {
        LegendPosition = other.LegendPosition;
      }
      if (other.Grouping.Length != 0) {
        Grouping = other.Grouping;
      }
      if (other.mapping_ != null) {
        if (mapping_ == null) {
          mapping_ = new global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings();
        }
        Mapping.MergeFrom(other.Mapping);
      }
      if (other.GroupingFilterProperty.Length != 0) {
        GroupingFilterProperty = other.GroupingFilterProperty;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SizeMode = input.ReadString();
            break;
          }
          case 17: {
            LegendScale = input.ReadDouble();
            break;
          }
          case 24: {
            ShowLegend = input.ReadBool();
            break;
          }
          case 34: {
            LegendPosition = input.ReadString();
            break;
          }
          case 42: {
            Grouping = input.ReadString();
            break;
          }
          case 50: {
            if (mapping_ == null) {
              mapping_ = new global::SquaredUp.Dashboard.Schema.AlertDonutTile_DisplayMappings();
            }
            input.ReadMessage(mapping_);
            break;
          }
          case 58: {
            GroupingFilterProperty = input.ReadString();
            break;
          }
          case 66: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Mappings from status names to display settings such as colour
  /// </summary>
  public sealed partial class AlertDonutTile_DisplayMappings : pb::IMessage<AlertDonutTile_DisplayMappings> {
    private static readonly pb::MessageParser<AlertDonutTile_DisplayMappings> _parser = new pb::MessageParser<AlertDonutTile_DisplayMappings>(() => new AlertDonutTile_DisplayMappings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertDonutTile_DisplayMappings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_DisplayMappings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_DisplayMappings(AlertDonutTile_DisplayMappings other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_DisplayMappings Clone() {
      return new AlertDonutTile_DisplayMappings(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping>.Codec _map_values_codec
        = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping.Parser), 10);
    private readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping> values_ = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping>();
    /// <summary>
    /// Status name -> mapping settings such as colour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::SquaredUp.Dashboard.Schema.AlertDonutTile_StatusDisplayMapping> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertDonutTile_DisplayMappings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertDonutTile_DisplayMappings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Values.Equals(other.Values)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Values.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _map_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_map_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertDonutTile_DisplayMappings other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Mapping of a given status into display settings
  /// </summary>
  public sealed partial class AlertDonutTile_StatusDisplayMapping : pb::IMessage<AlertDonutTile_StatusDisplayMapping> {
    private static readonly pb::MessageParser<AlertDonutTile_StatusDisplayMapping> _parser = new pb::MessageParser<AlertDonutTile_StatusDisplayMapping>(() => new AlertDonutTile_StatusDisplayMapping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertDonutTile_StatusDisplayMapping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.AlertReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_StatusDisplayMapping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_StatusDisplayMapping(AlertDonutTile_StatusDisplayMapping other) : this() {
      value_ = other.value_;
      colour_ = other.colour_;
      display_ = other.display_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertDonutTile_StatusDisplayMapping Clone() {
      return new AlertDonutTile_StatusDisplayMapping(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "colour" field.</summary>
    public const int ColourFieldNumber = 2;
    private string colour_ = "";
    /// <summary>
    /// Hex colour value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Colour {
      get { return colour_; }
      set {
        colour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private string display_ = "";
    /// <summary>
    /// Display name of the mapping (e.g. "Information")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertDonutTile_StatusDisplayMapping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertDonutTile_StatusDisplayMapping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Colour != other.Colour) return false;
      if (Display != other.Display) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Colour.Length != 0) hash ^= Colour.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (Colour.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Colour);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Colour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Colour);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertDonutTile_StatusDisplayMapping other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Colour.Length != 0) {
        Colour = other.Colour;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
          case 18: {
            Colour = input.ReadString();
            break;
          }
          case 26: {
            Display = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
