// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from rule.proto</summary>
  public static partial class RuleReflection {

    #region Descriptor
    /// <summary>File descriptor for rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpydWxlLnByb3RvEglzcXVhcmVkdXAaHGdvb2dsZS9wcm90b2J1Zi9zdHJ1",
            "Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byJOChRS",
            "dWxlQ29uZmlnVGlsZUNvbmZpZxI2CgZzb3VyY2UYASABKAsyJi5zcXVhcmVk",
            "dXAuUnVsZUNvbmZpZ1RpbGVDb25maWdfU291cmNlIkEKG1J1bGVDb25maWdU",
            "aWxlQ29uZmlnX1NvdXJjZRIPCgdydWxlX2lkGAEgASgJEhEKCXJ1bGVfb25s",
            "eRgCIAEoCCKLAQoVUnVsZURldGFpbHNUaWxlQ29uZmlnEjcKBnNvdXJjZRgB",
            "IAEoCzInLnNxdWFyZWR1cC5SdWxlRGV0YWlsc1RpbGVDb25maWdfU291cmNl",
            "EjkKB2Rpc3BsYXkYAiABKAsyKC5zcXVhcmVkdXAuUnVsZURldGFpbHNUaWxl",
            "Q29uZmlnX0Rpc3BsYXkiLwocUnVsZURldGFpbHNUaWxlQ29uZmlnX1NvdXJj",
            "ZRIPCgdydWxlX2lkGAEgASgJIjcKHVJ1bGVEZXRhaWxzVGlsZUNvbmZpZ19E",
            "aXNwbGF5EhYKDnNob3dfZHJpbGxkb3duGAEgASgIInkKD1J1bGVzVGlsZUNv",
            "bmZpZxIxCgZzb3VyY2UYASABKAsyIS5zcXVhcmVkdXAuUnVsZXNUaWxlQ29u",
            "ZmlnX1NvdXJjZRIzCgdkaXNwbGF5GAIgASgLMiIuc3F1YXJlZHVwLlJ1bGVz",
            "VGlsZUNvbmZpZ19EaXNwbGF5IioKFlJ1bGVzVGlsZUNvbmZpZ19Tb3VyY2US",
            "EAoIcnVsZV9pZHMYASADKAkiNQoXUnVsZXNUaWxlQ29uZmlnX0Rpc3BsYXkS",
            "DAoEc2hvdxgBIAMoCRIMCgR6b29tGAIgASgJQh2qAhpTcXVhcmVkVXAuRGFz",
            "aGJvYXJkLlNjaGVtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig), global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig.Parser, new[]{ "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source), global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source.Parser, new[]{ "RuleId", "RuleOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig), global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source), global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source.Parser, new[]{ "RuleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display), global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display.Parser, new[]{ "ShowDrilldown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RulesTileConfig), global::SquaredUp.Dashboard.Schema.RulesTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source), global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source.Parser, new[]{ "RuleIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display), global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display.Parser, new[]{ "Show", "Zoom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// tile/ruleconfig
  /// </summary>
  public sealed partial class RuleConfigTileConfig : pb::IMessage<RuleConfigTileConfig> {
    private static readonly pb::MessageParser<RuleConfigTileConfig> _parser = new pb::MessageParser<RuleConfigTileConfig>(() => new RuleConfigTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleConfigTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig(RuleConfigTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig Clone() {
      return new RuleConfigTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleConfigTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleConfigTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleConfigTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.RuleConfigTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuleConfigTileConfig_Source : pb::IMessage<RuleConfigTileConfig_Source> {
    private static readonly pb::MessageParser<RuleConfigTileConfig_Source> _parser = new pb::MessageParser<RuleConfigTileConfig_Source>(() => new RuleConfigTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleConfigTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig_Source(RuleConfigTileConfig_Source other) : this() {
      ruleId_ = other.ruleId_;
      ruleOnly_ = other.ruleOnly_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleConfigTileConfig_Source Clone() {
      return new RuleConfigTileConfig_Source(this);
    }

    /// <summary>Field number for the "rule_id" field.</summary>
    public const int RuleIdFieldNumber = 1;
    private string ruleId_ = "";
    /// <summary>
    /// ID of the rule - typically 'inherit'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuleId {
      get { return ruleId_; }
      set {
        ruleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rule_only" field.</summary>
    public const int RuleOnlyFieldNumber = 2;
    private bool ruleOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RuleOnly {
      get { return ruleOnly_; }
      set {
        ruleOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleConfigTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleConfigTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuleId != other.RuleId) return false;
      if (RuleOnly != other.RuleOnly) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuleId.Length != 0) hash ^= RuleId.GetHashCode();
      if (RuleOnly != false) hash ^= RuleOnly.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RuleId);
      }
      if (RuleOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(RuleOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleId);
      }
      if (RuleOnly != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleConfigTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.RuleId.Length != 0) {
        RuleId = other.RuleId;
      }
      if (other.RuleOnly != false) {
        RuleOnly = other.RuleOnly;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RuleId = input.ReadString();
            break;
          }
          case 16: {
            RuleOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuleDetailsTileConfig : pb::IMessage<RuleDetailsTileConfig> {
    private static readonly pb::MessageParser<RuleDetailsTileConfig> _parser = new pb::MessageParser<RuleDetailsTileConfig>(() => new RuleDetailsTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleDetailsTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig(RuleDetailsTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig Clone() {
      return new RuleDetailsTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleDetailsTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleDetailsTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleDetailsTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.RuleDetailsTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuleDetailsTileConfig_Source : pb::IMessage<RuleDetailsTileConfig_Source> {
    private static readonly pb::MessageParser<RuleDetailsTileConfig_Source> _parser = new pb::MessageParser<RuleDetailsTileConfig_Source>(() => new RuleDetailsTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleDetailsTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Source(RuleDetailsTileConfig_Source other) : this() {
      ruleId_ = other.ruleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Source Clone() {
      return new RuleDetailsTileConfig_Source(this);
    }

    /// <summary>Field number for the "rule_id" field.</summary>
    public const int RuleIdFieldNumber = 1;
    private string ruleId_ = "";
    /// <summary>
    /// ID of the rule - typically 'inherit'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuleId {
      get { return ruleId_; }
      set {
        ruleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleDetailsTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleDetailsTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuleId != other.RuleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuleId.Length != 0) hash ^= RuleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RuleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleDetailsTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.RuleId.Length != 0) {
        RuleId = other.RuleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RuleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuleDetailsTileConfig_Display : pb::IMessage<RuleDetailsTileConfig_Display> {
    private static readonly pb::MessageParser<RuleDetailsTileConfig_Display> _parser = new pb::MessageParser<RuleDetailsTileConfig_Display>(() => new RuleDetailsTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleDetailsTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Display(RuleDetailsTileConfig_Display other) : this() {
      showDrilldown_ = other.showDrilldown_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetailsTileConfig_Display Clone() {
      return new RuleDetailsTileConfig_Display(this);
    }

    /// <summary>Field number for the "show_drilldown" field.</summary>
    public const int ShowDrilldownFieldNumber = 1;
    private bool showDrilldown_;
    /// <summary>
    /// Whether to display drilldown per rule
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowDrilldown {
      get { return showDrilldown_; }
      set {
        showDrilldown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleDetailsTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleDetailsTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowDrilldown != other.ShowDrilldown) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowDrilldown != false) hash ^= ShowDrilldown.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowDrilldown != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowDrilldown);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowDrilldown != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleDetailsTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowDrilldown != false) {
        ShowDrilldown = other.ShowDrilldown;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowDrilldown = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RulesTileConfig : pb::IMessage<RulesTileConfig> {
    private static readonly pb::MessageParser<RulesTileConfig> _parser = new pb::MessageParser<RulesTileConfig>(() => new RulesTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RulesTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig(RulesTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig Clone() {
      return new RulesTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RulesTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RulesTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RulesTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.RulesTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.RulesTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RulesTileConfig_Source : pb::IMessage<RulesTileConfig_Source> {
    private static readonly pb::MessageParser<RulesTileConfig_Source> _parser = new pb::MessageParser<RulesTileConfig_Source>(() => new RulesTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RulesTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Source(RulesTileConfig_Source other) : this() {
      ruleIds_ = other.ruleIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Source Clone() {
      return new RulesTileConfig_Source(this);
    }

    /// <summary>Field number for the "rule_ids" field.</summary>
    public const int RuleIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ruleIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ruleIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// IDs of the rules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RuleIds {
      get { return ruleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RulesTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RulesTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ruleIds_.Equals(other.ruleIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ruleIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ruleIds_.WriteTo(output, _repeated_ruleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ruleIds_.CalculateSize(_repeated_ruleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RulesTileConfig_Source other) {
      if (other == null) {
        return;
      }
      ruleIds_.Add(other.ruleIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ruleIds_.AddEntriesFrom(input, _repeated_ruleIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RulesTileConfig_Display : pb::IMessage<RulesTileConfig_Display> {
    private static readonly pb::MessageParser<RulesTileConfig_Display> _parser = new pb::MessageParser<RulesTileConfig_Display>(() => new RulesTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RulesTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.RuleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Display(RulesTileConfig_Display other) : this() {
      show_ = other.show_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesTileConfig_Display Clone() {
      return new RulesTileConfig_Display(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_show_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> show_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Rule statuses to display (e.g. Enabled, Disabled)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Show {
      get { return show_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 2;
    private string zoom_ = "";
    /// <summary>
    /// Zoom level e.g. "column"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RulesTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RulesTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!show_.Equals(other.show_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= show_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      show_.WriteTo(output, _repeated_show_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += show_.CalculateSize(_repeated_show_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RulesTileConfig_Display other) {
      if (other == null) {
        return;
      }
      show_.Add(other.show_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            show_.AddEntriesFrom(input, _repeated_show_codec);
            break;
          }
          case 18: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
