// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from image.proto</summary>
  public static partial class ImageReflection {

    #region Descriptor
    /// <summary>File descriptor for image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtpbWFnZS5wcm90bxIJc3F1YXJlZHVwGhxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aDWNv",
            "bnRleHQucHJvdG8imQEKD0ltYWdlVGlsZUNvbmZpZxIpCgdjb250ZXh0GAEg",
            "ASgLMhguc3F1YXJlZHVwLkNvbW1vbkNvbnRleHQSMwoHZGlzcGxheRgCIAEo",
            "CzIiLnNxdWFyZWR1cC5JbWFnZVRpbGVDb25maWdfRGlzcGxheRImCgZzb3Vy",
            "Y2UYAyABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUidgoXSW1hZ2VUaWxl",
            "Q29uZmlnX0Rpc3BsYXkSDAoEc2l6ZRgBIAEoARILCgNzcmMYAiABKAkSDQoF",
            "c2hhcGUYAyABKAkSDQoFbGFiZWwYBCABKAkSFAoMY3VzdG9tX2xhYmVsGAUg",
            "ASgJEgwKBHpvb20YBiABKAkiYAoVSW1hZ2VUaWxlQ29uZmlnX1Njb3BlEhAK",
            "CGdyb3VwX2lkGAEgASgJEhIKCm9iamVjdF9pZHMYAiADKAkSDwoHY2xhc3NJ",
            "ZBgDIAEoCRIQCghjcml0ZXJpYRgEIAEoCUIdqgIaU3F1YXJlZFVwLkRhc2hi",
            "b2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ImageTileConfig), global::SquaredUp.Dashboard.Schema.ImageTileConfig.Parser, new[]{ "Context", "Display", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display), global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display.Parser, new[]{ "Size", "Src", "Shape", "Label", "CustomLabel", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ImageTileConfig_Scope), global::SquaredUp.Dashboard.Schema.ImageTileConfig_Scope.Parser, new[]{ "GroupId", "ObjectIds", "ClassId", "Criteria" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// tile/image
  /// </summary>
  public sealed partial class ImageTileConfig : pb::IMessage<ImageTileConfig> {
    private static readonly pb::MessageParser<ImageTileConfig> _parser = new pb::MessageParser<ImageTileConfig>(() => new ImageTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.ImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig(ImageTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig Clone() {
      return new ImageTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value source_;
    /// <summary>
    /// Generally empty (source: {})
    ///
    /// Unlike other tiles, the scope ends up in context for this tile 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.ImageTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (source_ == null) {
              source_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageTileConfig_Display : pb::IMessage<ImageTileConfig_Display> {
    private static readonly pb::MessageParser<ImageTileConfig_Display> _parser = new pb::MessageParser<ImageTileConfig_Display>(() => new ImageTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.ImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Display(ImageTileConfig_Display other) : this() {
      size_ = other.size_;
      src_ = other.src_;
      shape_ = other.shape_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Display Clone() {
      return new ImageTileConfig_Display(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private double size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 2;
    private string src_ = "";
    /// <summary>
    /// Relative URL of the image (relative to the host)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Src {
      get { return src_; }
      set {
        src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 3;
    private string shape_ = "";
    /// <summary>
    /// e.g. circle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shape {
      get { return shape_; }
      set {
        shape_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    /// <summary>
    /// Can be name, path, custom
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    /// <summary>
    /// Custom label template, if supplied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 6;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Src != other.Src) return false;
      if (Shape != other.Shape) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0D) hash ^= Size.GetHashCode();
      if (Src.Length != 0) hash ^= Src.GetHashCode();
      if (Shape.Length != 0) hash ^= Shape.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Size);
      }
      if (Src.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Src);
      }
      if (Shape.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Shape);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0D) {
        size += 1 + 8;
      }
      if (Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
      }
      if (Shape.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shape);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0D) {
        Size = other.Size;
      }
      if (other.Src.Length != 0) {
        Src = other.Src;
      }
      if (other.Shape.Length != 0) {
        Shape = other.Shape;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Size = input.ReadDouble();
            break;
          }
          case 18: {
            Src = input.ReadString();
            break;
          }
          case 26: {
            Shape = input.ReadString();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageTileConfig_Scope : pb::IMessage<ImageTileConfig_Scope> {
    private static readonly pb::MessageParser<ImageTileConfig_Scope> _parser = new pb::MessageParser<ImageTileConfig_Scope>(() => new ImageTileConfig_Scope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageTileConfig_Scope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.ImageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Scope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Scope(ImageTileConfig_Scope other) : this() {
      groupId_ = other.groupId_;
      objectIds_ = other.objectIds_.Clone();
      classId_ = other.classId_;
      criteria_ = other.criteria_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageTileConfig_Scope Clone() {
      return new ImageTileConfig_Scope(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// Group ID of the scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_ids" field.</summary>
    public const int ObjectIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_objectIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> objectIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Multiple specific object IDs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ObjectIds {
      get { return objectIds_; }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 3;
    private string classId_ = "";
    /// <summary>
    /// A specific class ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 4;
    private string criteria_ = "";
    /// <summary>
    /// Criteria (such as severity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Criteria {
      get { return criteria_; }
      set {
        criteria_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageTileConfig_Scope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageTileConfig_Scope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!objectIds_.Equals(other.objectIds_)) return false;
      if (ClassId != other.ClassId) return false;
      if (Criteria != other.Criteria) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= objectIds_.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (Criteria.Length != 0) hash ^= Criteria.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      objectIds_.WriteTo(output, _repeated_objectIds_codec);
      if (ClassId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassId);
      }
      if (Criteria.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Criteria);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += objectIds_.CalculateSize(_repeated_objectIds_codec);
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (Criteria.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Criteria);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageTileConfig_Scope other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      objectIds_.Add(other.objectIds_);
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.Criteria.Length != 0) {
        Criteria = other.Criteria;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            objectIds_.AddEntriesFrom(input, _repeated_objectIds_codec);
            break;
          }
          case 26: {
            ClassId = input.ReadString();
            break;
          }
          case 34: {
            Criteria = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
