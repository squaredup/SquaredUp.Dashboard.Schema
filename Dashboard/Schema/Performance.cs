// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from performance.proto</summary>
  public static partial class PerformanceReflection {

    #region Descriptor
    /// <summary>File descriptor for performance.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerformanceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwZXJmb3JtYW5jZS5wcm90bxIJc3F1YXJlZHVwGhxnb29nbGUvcHJvdG9i",
            "dWYvc3RydWN0LnByb3RvGgtzY29wZS5wcm90bxoPdGltZWZyYW1lLnByb3Rv",
            "GhhwZXJmb3JtYW5jZV9zaGFyZWQucHJvdG8igQEKFUFsbFNjb21QZXJmVGls",
            "ZUNvbmZpZxIyCgZzb3VyY2UYASABKAsyIi5zcXVhcmVkdXAuQ29tbW9uUGVy",
            "Zm9ybWFuY2VTb3VyY2USNAoHZGlzcGxheRgCIAEoCzIjLnNxdWFyZWR1cC5D",
            "b21tb25QZXJmb3JtYW5jZURpc3BsYXkiwAEKF1Njb21QZXJmQXNCYXJUaWxl",
            "Q29uZmlnEjIKBnNvdXJjZRgBIAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJm",
            "b3JtYW5jZVNvdXJjZRI0CgdkaXNwbGF5GAIgASgLMiMuc3F1YXJlZHVwLkNv",
            "bW1vblBlcmZvcm1hbmNlRGlzcGxheRI7Cgdjb250ZXh0GAMgASgLMiouc3F1",
            "YXJlZHVwLlNjb21QZXJmQXNCYXJUaWxlQ29uZmlnX0NvbnRleHQiSAofU2Nv",
            "bVBlcmZBc0JhclRpbGVDb25maWdfQ29udGV4dBIlCgVzY29wZRgBIAEoCzIW",
            "LnNxdWFyZWR1cC5Db21tb25TY29wZSLTAQobU2NvbVBlcmZBc0hlYXRtYXBU",
            "aWxlQ29uZmlnEj8KB2NvbnRleHQYASABKAsyLi5zcXVhcmVkdXAuU2NvbVBl",
            "cmZBc0hlYXRtYXBUaWxlQ29uZmlnX0NvbnRleHQSMgoGc291cmNlGAIgASgL",
            "MiIuc3F1YXJlZHVwLkNvbW1vblBlcmZvcm1hbmNlU291cmNlEj8KB2Rpc3Bs",
            "YXkYAyABKAsyLi5zcXVhcmVkdXAuU2NvbVBlcmZBc0hlYXRtYXBUaWxlQ29u",
            "ZmlnX0Rpc3BsYXkiTAojU2NvbVBlcmZBc0hlYXRtYXBUaWxlQ29uZmlnX0Nv",
            "bnRleHQSJQoFc2NvcGUYASABKAsyFi5zcXVhcmVkdXAuQ29tbW9uU2NvcGUi",
            "pwEKI1Njb21QZXJmQXNIZWF0bWFwVGlsZUNvbmZpZ19EaXNwbGF5EhIKCnNp",
            "emVfc2NhbGUYASABKAESCwoDcmVkGAIgASgNEg0KBWdyZWVuGAMgASgNEgwK",
            "BGJsdWUYBCABKA0SDQoFYWxwaGEYBSABKA0SFQoNc2l6ZV9wcm9wZXJ0eRgG",
            "IAEoCRIOCgZoZWlnaHQYByABKAESDAoEem9vbRgIIAEoCSLMAQodU2NvbVBl",
            "cmZBc0xpbmVHcmFwaFRpbGVDb25maWcSQQoHY29udGV4dBgBIAEoCzIwLnNx",
            "dWFyZWR1cC5TY29tUGVyZkFzTGluZUdyYXBoVGlsZUNvbmZpZ19Db250ZXh0",
            "EjIKBnNvdXJjZRgCIAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5j",
            "ZVNvdXJjZRI0CgdkaXNwbGF5GAMgASgLMiMuc3F1YXJlZHVwLkNvbW1vblBl",
            "cmZvcm1hbmNlRGlzcGxheSJOCiVTY29tUGVyZkFzTGluZUdyYXBoVGlsZUNv",
            "bmZpZ19Db250ZXh0EiUKBXNjb3BlGAEgASgLMhYuc3F1YXJlZHVwLkNvbW1v",
            "blNjb3BlIo8BCiNTY29tUGVyZkFzTGluZUdyYXBoUmVwb3J0VGlsZUNvbmZp",
            "ZxIyCgZzb3VyY2UYASABKAsyIi5zcXVhcmVkdXAuQ29tbW9uUGVyZm9ybWFu",
            "Y2VTb3VyY2USNAoHZGlzcGxheRgCIAEoCzIjLnNxdWFyZWR1cC5Db21tb25Q",
            "ZXJmb3JtYW5jZURpc3BsYXkizgEKHlNjb21QZXJmQXNTcGFya2xpbmVzVGls",
            "ZUNvbmZpZxJCCgdjb250ZXh0GAEgASgLMjEuc3F1YXJlZHVwLlNjb21QZXJm",
            "QXNTcGFya2xpbmVzVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNvdXJjZRgCIAEo",
            "CzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJjZRI0CgdkaXNw",
            "bGF5GAMgASgLMiMuc3F1YXJlZHVwLkNvbW1vblBlcmZvcm1hbmNlRGlzcGxh",
            "eSJPCiZTY29tUGVyZkFzU3BhcmtsaW5lc1RpbGVDb25maWdfQ29udGV4dBIl",
            "CgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5Db21tb25TY29wZUIdqgIaU3F1",
            "YXJlZFVwLkRhc2hib2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.PerformanceSharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.AllScomPerfTileConfig), global::SquaredUp.Dashboard.Schema.AllScomPerfTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig), global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig), global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display), global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display.Parser, new[]{ "SizeScale", "Red", "Green", "Blue", "Alpha", "SizeProperty", "Height", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig), global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphReportTileConfig), global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphReportTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig), global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// tile/allscomperf
  /// </summary>
  public sealed partial class AllScomPerfTileConfig : pb::IMessage<AllScomPerfTileConfig> {
    private static readonly pb::MessageParser<AllScomPerfTileConfig> _parser = new pb::MessageParser<AllScomPerfTileConfig>(() => new AllScomPerfTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllScomPerfTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllScomPerfTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllScomPerfTileConfig(AllScomPerfTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllScomPerfTileConfig Clone() {
      return new AllScomPerfTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllScomPerfTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllScomPerfTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllScomPerfTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsBarTileConfig : pb::IMessage<ScomPerfAsBarTileConfig> {
    private static readonly pb::MessageParser<ScomPerfAsBarTileConfig> _parser = new pb::MessageParser<ScomPerfAsBarTileConfig>(() => new ScomPerfAsBarTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsBarTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig(ScomPerfAsBarTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig Clone() {
      return new ScomPerfAsBarTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsBarTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsBarTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsBarTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsBarTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsBarTileConfig_Context : pb::IMessage<ScomPerfAsBarTileConfig_Context> {
    private static readonly pb::MessageParser<ScomPerfAsBarTileConfig_Context> _parser = new pb::MessageParser<ScomPerfAsBarTileConfig_Context>(() => new ScomPerfAsBarTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsBarTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig_Context(ScomPerfAsBarTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsBarTileConfig_Context Clone() {
      return new ScomPerfAsBarTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsBarTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsBarTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsBarTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsHeatmapTileConfig : pb::IMessage<ScomPerfAsHeatmapTileConfig> {
    private static readonly pb::MessageParser<ScomPerfAsHeatmapTileConfig> _parser = new pb::MessageParser<ScomPerfAsHeatmapTileConfig>(() => new ScomPerfAsHeatmapTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsHeatmapTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig(ScomPerfAsHeatmapTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig Clone() {
      return new ScomPerfAsHeatmapTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsHeatmapTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsHeatmapTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsHeatmapTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsHeatmapTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsHeatmapTileConfig_Context : pb::IMessage<ScomPerfAsHeatmapTileConfig_Context> {
    private static readonly pb::MessageParser<ScomPerfAsHeatmapTileConfig_Context> _parser = new pb::MessageParser<ScomPerfAsHeatmapTileConfig_Context>(() => new ScomPerfAsHeatmapTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsHeatmapTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Context(ScomPerfAsHeatmapTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Context Clone() {
      return new ScomPerfAsHeatmapTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsHeatmapTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsHeatmapTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsHeatmapTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsHeatmapTileConfig_Display : pb::IMessage<ScomPerfAsHeatmapTileConfig_Display> {
    private static readonly pb::MessageParser<ScomPerfAsHeatmapTileConfig_Display> _parser = new pb::MessageParser<ScomPerfAsHeatmapTileConfig_Display>(() => new ScomPerfAsHeatmapTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsHeatmapTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Display(ScomPerfAsHeatmapTileConfig_Display other) : this() {
      sizeScale_ = other.sizeScale_;
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      sizeProperty_ = other.sizeProperty_;
      height_ = other.height_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsHeatmapTileConfig_Display Clone() {
      return new ScomPerfAsHeatmapTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_scale" field.</summary>
    public const int SizeScaleFieldNumber = 1;
    private double sizeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeScale {
      get { return sizeScale_; }
      set {
        sizeScale_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 2;
    private uint red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 3;
    private uint green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 4;
    private uint blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 5;
    private uint alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "size_property" field.</summary>
    public const int SizePropertyFieldNumber = 6;
    private string sizeProperty_ = "";
    /// <summary>
    /// e.g. properties.isVirtualNode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeProperty {
      get { return sizeProperty_; }
      set {
        sizeProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 8;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsHeatmapTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsHeatmapTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeScale != other.SizeScale) return false;
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      if (Alpha != other.Alpha) return false;
      if (SizeProperty != other.SizeProperty) return false;
      if (Height != other.Height) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeScale != 0D) hash ^= SizeScale.GetHashCode();
      if (Red != 0) hash ^= Red.GetHashCode();
      if (Green != 0) hash ^= Green.GetHashCode();
      if (Blue != 0) hash ^= Blue.GetHashCode();
      if (Alpha != 0) hash ^= Alpha.GetHashCode();
      if (SizeProperty.Length != 0) hash ^= SizeProperty.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeScale != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SizeScale);
      }
      if (Red != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Red);
      }
      if (Green != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Green);
      }
      if (Blue != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Blue);
      }
      if (Alpha != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Alpha);
      }
      if (SizeProperty.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SizeProperty);
      }
      if (Height != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Height);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeScale != 0D) {
        size += 1 + 8;
      }
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Red);
      }
      if (Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Green);
      }
      if (Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blue);
      }
      if (Alpha != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Alpha);
      }
      if (SizeProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeProperty);
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsHeatmapTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeScale != 0D) {
        SizeScale = other.SizeScale;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.Green != 0) {
        Green = other.Green;
      }
      if (other.Blue != 0) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0) {
        Alpha = other.Alpha;
      }
      if (other.SizeProperty.Length != 0) {
        SizeProperty = other.SizeProperty;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SizeScale = input.ReadDouble();
            break;
          }
          case 16: {
            Red = input.ReadUInt32();
            break;
          }
          case 24: {
            Green = input.ReadUInt32();
            break;
          }
          case 32: {
            Blue = input.ReadUInt32();
            break;
          }
          case 40: {
            Alpha = input.ReadUInt32();
            break;
          }
          case 50: {
            SizeProperty = input.ReadString();
            break;
          }
          case 57: {
            Height = input.ReadDouble();
            break;
          }
          case 66: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsLineGraphTileConfig : pb::IMessage<ScomPerfAsLineGraphTileConfig> {
    private static readonly pb::MessageParser<ScomPerfAsLineGraphTileConfig> _parser = new pb::MessageParser<ScomPerfAsLineGraphTileConfig>(() => new ScomPerfAsLineGraphTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsLineGraphTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig(ScomPerfAsLineGraphTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig Clone() {
      return new ScomPerfAsLineGraphTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsLineGraphTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsLineGraphTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsLineGraphTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsLineGraphTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsLineGraphTileConfig_Context : pb::IMessage<ScomPerfAsLineGraphTileConfig_Context> {
    private static readonly pb::MessageParser<ScomPerfAsLineGraphTileConfig_Context> _parser = new pb::MessageParser<ScomPerfAsLineGraphTileConfig_Context>(() => new ScomPerfAsLineGraphTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsLineGraphTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig_Context(ScomPerfAsLineGraphTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphTileConfig_Context Clone() {
      return new ScomPerfAsLineGraphTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsLineGraphTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsLineGraphTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsLineGraphTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsLineGraphReportTileConfig : pb::IMessage<ScomPerfAsLineGraphReportTileConfig> {
    private static readonly pb::MessageParser<ScomPerfAsLineGraphReportTileConfig> _parser = new pb::MessageParser<ScomPerfAsLineGraphReportTileConfig>(() => new ScomPerfAsLineGraphReportTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsLineGraphReportTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphReportTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphReportTileConfig(ScomPerfAsLineGraphReportTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsLineGraphReportTileConfig Clone() {
      return new ScomPerfAsLineGraphReportTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsLineGraphReportTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsLineGraphReportTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsLineGraphReportTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsSparklinesTileConfig : pb::IMessage<ScomPerfAsSparklinesTileConfig> {
    private static readonly pb::MessageParser<ScomPerfAsSparklinesTileConfig> _parser = new pb::MessageParser<ScomPerfAsSparklinesTileConfig>(() => new ScomPerfAsSparklinesTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsSparklinesTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig(ScomPerfAsSparklinesTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig Clone() {
      return new ScomPerfAsSparklinesTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsSparklinesTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsSparklinesTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsSparklinesTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomPerfAsSparklinesTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomPerfAsSparklinesTileConfig_Context : pb::IMessage<ScomPerfAsSparklinesTileConfig_Context> {
    private static readonly pb::MessageParser<ScomPerfAsSparklinesTileConfig_Context> _parser = new pb::MessageParser<ScomPerfAsSparklinesTileConfig_Context>(() => new ScomPerfAsSparklinesTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomPerfAsSparklinesTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig_Context(ScomPerfAsSparklinesTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomPerfAsSparklinesTileConfig_Context Clone() {
      return new ScomPerfAsSparklinesTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomPerfAsSparklinesTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomPerfAsSparklinesTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomPerfAsSparklinesTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
