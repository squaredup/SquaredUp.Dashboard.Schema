// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from monitor.proto</summary>
  public static partial class MonitorReflection {

    #region Descriptor
    /// <summary>File descriptor for monitor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonitorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tb25pdG9yLnByb3RvEglzcXVhcmVkdXAaHGdvb2dsZS9wcm90b2J1Zi9z",
            "dHJ1Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byJU",
            "ChdNb25pdG9yQ29uZmlnVGlsZUNvbmZpZxI5CgZzb3VyY2UYASABKAsyKS5z",
            "cXVhcmVkdXAuTW9uaXRvckNvbmZpZ1RpbGVDb25maWdfU291cmNlIkIKHk1v",
            "bml0b3JDb25maWdUaWxlQ29uZmlnX1NvdXJjZRISCgptb25pdG9yX2lkGAEg",
            "ASgJEgwKBHpvb20YAiABKAkilAEKGE1vbml0b3JEZXRhaWxzVGlsZUNvbmZp",
            "ZxI6CgZzb3VyY2UYASABKAsyKi5zcXVhcmVkdXAuTW9uaXRvckRldGFpbHNU",
            "aWxlQ29uZmlnX1NvdXJjZRI8CgdkaXNwbGF5GAIgASgLMisuc3F1YXJlZHVw",
            "Lk1vbml0b3JEZXRhaWxzVGlsZUNvbmZpZ19EaXNwbGF5IjUKH01vbml0b3JE",
            "ZXRhaWxzVGlsZUNvbmZpZ19Tb3VyY2USEgoKbW9uaXRvcl9pZBgBIAEoCSJI",
            "CiBNb25pdG9yRGV0YWlsc1RpbGVDb25maWdfRGlzcGxheRIWCg5zaG93X2Ry",
            "aWxsZG93bhgBIAEoCBIMCgR6b29tGAIgASgJIroBChJNb25pdG9yc1RpbGVD",
            "b25maWcSNgoHY29udGV4dBgBIAEoCzIlLnNxdWFyZWR1cC5Nb25pdG9yc1Rp",
            "bGVDb25maWdfQ29udGV4dBI2CgdkaXNwbGF5GAIgASgLMiUuc3F1YXJlZHVw",
            "Lk1vbml0b3JzVGlsZUNvbmZpZ19EaXNwbGF5EjQKBnNvdXJjZRgDIAEoCzIk",
            "LnNxdWFyZWR1cC5Nb25pdG9yc1RpbGVDb25maWdfU291cmNlIkMKGk1vbml0",
            "b3JzVGlsZUNvbmZpZ19Db250ZXh0EiUKBXNjb3BlGAEgASgLMhYuZ29vZ2xl",
            "LnByb3RvYnVmLlZhbHVlIkEKGk1vbml0b3JzVGlsZUNvbmZpZ19EaXNwbGF5",
            "EhUKDWhlYWx0aF9zdGF0ZXMYASADKAkSDAoEem9vbRgCIAEoCSIwChlNb25p",
            "dG9yc1RpbGVDb25maWdfU291cmNlEhMKC21vbml0b3JfaWRzGAEgAygJIiUK",
            "I01vbml0b3JTdGF0ZUNoYW5nZUhpc3RvcnlUaWxlQ29uZmlnQh2qAhpTcXVh",
            "cmVkVXAuRGFzaGJvYXJkLlNjaGVtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig), global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig.Parser, new[]{ "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source), global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source.Parser, new[]{ "MonitorId", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig), global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source), global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source.Parser, new[]{ "MonitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display), global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display.Parser, new[]{ "ShowDrilldown", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorsTileConfig), global::SquaredUp.Dashboard.Schema.MonitorsTileConfig.Parser, new[]{ "Context", "Display", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context), global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display), global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display.Parser, new[]{ "HealthStates", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source), global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source.Parser, new[]{ "MonitorIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MonitorStateChangeHistoryTileConfig), global::SquaredUp.Dashboard.Schema.MonitorStateChangeHistoryTileConfig.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// tile/monitorconfig
  /// </summary>
  public sealed partial class MonitorConfigTileConfig : pb::IMessage<MonitorConfigTileConfig> {
    private static readonly pb::MessageParser<MonitorConfigTileConfig> _parser = new pb::MessageParser<MonitorConfigTileConfig>(() => new MonitorConfigTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorConfigTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig(MonitorConfigTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig Clone() {
      return new MonitorConfigTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorConfigTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorConfigTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorConfigTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.MonitorConfigTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorConfigTileConfig_Source : pb::IMessage<MonitorConfigTileConfig_Source> {
    private static readonly pb::MessageParser<MonitorConfigTileConfig_Source> _parser = new pb::MessageParser<MonitorConfigTileConfig_Source>(() => new MonitorConfigTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorConfigTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig_Source(MonitorConfigTileConfig_Source other) : this() {
      monitorId_ = other.monitorId_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfigTileConfig_Source Clone() {
      return new MonitorConfigTileConfig_Source(this);
    }

    /// <summary>Field number for the "monitor_id" field.</summary>
    public const int MonitorIdFieldNumber = 1;
    private string monitorId_ = "";
    /// <summary>
    /// ID of the monitor - typically 'inherit'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonitorId {
      get { return monitorId_; }
      set {
        monitorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 2;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorConfigTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorConfigTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonitorId != other.MonitorId) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonitorId.Length != 0) hash ^= MonitorId.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonitorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MonitorId);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonitorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonitorId);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorConfigTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.MonitorId.Length != 0) {
        MonitorId = other.MonitorId;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MonitorId = input.ReadString();
            break;
          }
          case 18: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// tile/monitordetails
  /// </summary>
  public sealed partial class MonitorDetailsTileConfig : pb::IMessage<MonitorDetailsTileConfig> {
    private static readonly pb::MessageParser<MonitorDetailsTileConfig> _parser = new pb::MessageParser<MonitorDetailsTileConfig>(() => new MonitorDetailsTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorDetailsTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig(MonitorDetailsTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig Clone() {
      return new MonitorDetailsTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorDetailsTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorDetailsTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorDetailsTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.MonitorDetailsTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorDetailsTileConfig_Source : pb::IMessage<MonitorDetailsTileConfig_Source> {
    private static readonly pb::MessageParser<MonitorDetailsTileConfig_Source> _parser = new pb::MessageParser<MonitorDetailsTileConfig_Source>(() => new MonitorDetailsTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorDetailsTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Source(MonitorDetailsTileConfig_Source other) : this() {
      monitorId_ = other.monitorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Source Clone() {
      return new MonitorDetailsTileConfig_Source(this);
    }

    /// <summary>Field number for the "monitor_id" field.</summary>
    public const int MonitorIdFieldNumber = 1;
    private string monitorId_ = "";
    /// <summary>
    /// ID of the monitor - typically 'inherit'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonitorId {
      get { return monitorId_; }
      set {
        monitorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorDetailsTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorDetailsTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonitorId != other.MonitorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonitorId.Length != 0) hash ^= MonitorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonitorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MonitorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonitorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonitorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorDetailsTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.MonitorId.Length != 0) {
        MonitorId = other.MonitorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MonitorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorDetailsTileConfig_Display : pb::IMessage<MonitorDetailsTileConfig_Display> {
    private static readonly pb::MessageParser<MonitorDetailsTileConfig_Display> _parser = new pb::MessageParser<MonitorDetailsTileConfig_Display>(() => new MonitorDetailsTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorDetailsTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Display(MonitorDetailsTileConfig_Display other) : this() {
      showDrilldown_ = other.showDrilldown_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorDetailsTileConfig_Display Clone() {
      return new MonitorDetailsTileConfig_Display(this);
    }

    /// <summary>Field number for the "show_drilldown" field.</summary>
    public const int ShowDrilldownFieldNumber = 1;
    private bool showDrilldown_;
    /// <summary>
    /// Whether to display drilldowns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowDrilldown {
      get { return showDrilldown_; }
      set {
        showDrilldown_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 2;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorDetailsTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorDetailsTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowDrilldown != other.ShowDrilldown) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowDrilldown != false) hash ^= ShowDrilldown.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowDrilldown != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowDrilldown);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowDrilldown != false) {
        size += 1 + 1;
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorDetailsTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowDrilldown != false) {
        ShowDrilldown = other.ShowDrilldown;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowDrilldown = input.ReadBool();
            break;
          }
          case 18: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorsTileConfig : pb::IMessage<MonitorsTileConfig> {
    private static readonly pb::MessageParser<MonitorsTileConfig> _parser = new pb::MessageParser<MonitorsTileConfig>(() => new MonitorsTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorsTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig(MonitorsTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig Clone() {
      return new MonitorsTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorsTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorsTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorsTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.MonitorsTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorsTileConfig_Context : pb::IMessage<MonitorsTileConfig_Context> {
    private static readonly pb::MessageParser<MonitorsTileConfig_Context> _parser = new pb::MessageParser<MonitorsTileConfig_Context>(() => new MonitorsTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorsTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Context(MonitorsTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Context Clone() {
      return new MonitorsTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Value scope_;
    /// <summary>
    /// TODO: Generally unsued?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorsTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorsTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorsTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorsTileConfig_Display : pb::IMessage<MonitorsTileConfig_Display> {
    private static readonly pb::MessageParser<MonitorsTileConfig_Display> _parser = new pb::MessageParser<MonitorsTileConfig_Display>(() => new MonitorsTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorsTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Display(MonitorsTileConfig_Display other) : this() {
      healthStates_ = other.healthStates_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Display Clone() {
      return new MonitorsTileConfig_Display(this);
    }

    /// <summary>Field number for the "health_states" field.</summary>
    public const int HealthStatesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_healthStates_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> healthStates_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Health states (e.g. warning, error) to display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HealthStates {
      get { return healthStates_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 2;
    private string zoom_ = "";
    /// <summary>
    /// Zoom level (e.g. 'column')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorsTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorsTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!healthStates_.Equals(other.healthStates_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= healthStates_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      healthStates_.WriteTo(output, _repeated_healthStates_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += healthStates_.CalculateSize(_repeated_healthStates_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorsTileConfig_Display other) {
      if (other == null) {
        return;
      }
      healthStates_.Add(other.healthStates_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            healthStates_.AddEntriesFrom(input, _repeated_healthStates_codec);
            break;
          }
          case 18: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorsTileConfig_Source : pb::IMessage<MonitorsTileConfig_Source> {
    private static readonly pb::MessageParser<MonitorsTileConfig_Source> _parser = new pb::MessageParser<MonitorsTileConfig_Source>(() => new MonitorsTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorsTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Source(MonitorsTileConfig_Source other) : this() {
      monitorIds_ = other.monitorIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorsTileConfig_Source Clone() {
      return new MonitorsTileConfig_Source(this);
    }

    /// <summary>Field number for the "monitor_ids" field.</summary>
    public const int MonitorIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_monitorIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> monitorIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of monitor IDs to actually use as the source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MonitorIds {
      get { return monitorIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorsTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorsTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monitorIds_.Equals(other.monitorIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monitorIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monitorIds_.WriteTo(output, _repeated_monitorIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monitorIds_.CalculateSize(_repeated_monitorIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorsTileConfig_Source other) {
      if (other == null) {
        return;
      }
      monitorIds_.Add(other.monitorIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monitorIds_.AddEntriesFrom(input, _repeated_monitorIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorStateChangeHistoryTileConfig : pb::IMessage<MonitorStateChangeHistoryTileConfig> {
    private static readonly pb::MessageParser<MonitorStateChangeHistoryTileConfig> _parser = new pb::MessageParser<MonitorStateChangeHistoryTileConfig>(() => new MonitorStateChangeHistoryTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorStateChangeHistoryTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.MonitorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorStateChangeHistoryTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorStateChangeHistoryTileConfig(MonitorStateChangeHistoryTileConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorStateChangeHistoryTileConfig Clone() {
      return new MonitorStateChangeHistoryTileConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorStateChangeHistoryTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorStateChangeHistoryTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorStateChangeHistoryTileConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
