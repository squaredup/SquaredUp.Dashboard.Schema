// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heuristics.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from heuristics.proto</summary>
  public static partial class HeuristicsReflection {

    #region Descriptor
    /// <summary>File descriptor for heuristics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeuristicsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBoZXVyaXN0aWNzLnByb3RvEglzcXVhcmVkdXAaHGdvb2dsZS9wcm90b2J1",
            "Zi9zdHJ1Y3QucHJvdG8aD3RpbWVmcmFtZS5wcm90bxoLc2NvcGUucHJvdG8a",
            "GHBlcmZvcm1hbmNlX3NoYXJlZC5wcm90bxoNY29udGV4dC5wcm90byLPAQoe",
            "SGV1cmlzdGljMV9BbGVydExpc3RUaWxlQ29uZmlnEkAKBnNvdXJjZRgBIAEo",
            "CzIwLnNxdWFyZWR1cC5IZXVyaXN0aWMxX0FsZXJ0TGlzdFRpbGVDb25maWdf",
            "U291cmNlEkIKB2Rpc3BsYXkYAiABKAsyMS5zcXVhcmVkdXAuSGV1cmlzdGlj",
            "MV9BbGVydExpc3RUaWxlQ29uZmlnX0Rpc3BsYXkSJwoHY29udGV4dBgDIAEo",
            "CzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZSLtAQolSGV1cmlzdGljMV9BbGVy",
            "dExpc3RUaWxlQ29uZmlnX1NvdXJjZRIlCgVzY29wZRgBIAEoCzIWLnNxdWFy",
            "ZWR1cC5Db21tb25TY29wZRISCgpzZXZlcml0aWVzGAIgAygJEhIKCnByaW9y",
            "aXRpZXMYAyADKAkSDwoHc291cmNlcxgEIAMoCRIlCgVvd25lchgFIAEoCzIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5WYWx1ZRIOCgZzdGF0ZXMYBiADKAkSLQoJdGlt",
            "ZWZyYW1lGAcgASgLMhouc3F1YXJlZHVwLkNvbW1vblRpbWVmcmFtZSJ9CiZI",
            "ZXVyaXN0aWMxX0FsZXJ0TGlzdFRpbGVDb25maWdfRGlzcGxheRINCgVsaW1p",
            "dBgBIAEoBRITCgtzaG93X3RpdGxlcxgCIAEoCRIQCghzaG93X2FsbBgDIAEo",
            "CBIPCgdjb2x1bW5zGAQgAygJEgwKBHpvb20YBSABKAki+AIKI0hldXJpc3Rp",
            "YzJfQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5Eg0KBXJhbmdlGAEgASgJEg8K",
            "B3VuaXRrZXkYAiADKAkSDgoGaGVpZ2h0GAMgASgBEg0KBWxhYmVsGAQgASgJ",
            "EhQKDGN1c3RvbV9sYWJlbBgFIAEoCRIVCg1saW5rX3RlbXBsYXRlGAYgASgJ",
            "EhYKDmxhYmVsX3RlbXBsYXRlGAcgASgJEhAKCHJhbmdlbWF4GAggASgBEhAK",
            "CHJhbmdlbWluGAkgASgBEk4KCG1ldGFkYXRhGAogAygLMjwuc3F1YXJlZHVw",
            "LkhldXJpc3RpYzJfQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5Lk1ldGFkYXRh",
            "RW50cnkSEAoIc2hvd19rZXkYCyABKAgaRwoNTWV0YWRhdGFFbnRyeRILCgNr",
            "ZXkYASABKAkSJQoFdmFsdWUYAiABKAsyFi5nb29nbGUucHJvdG9idWYuVmFs",
            "dWU6AjgBIuEBCiJIZXVyaXN0aWMyX1Njb21QZXJmQXNCYXJUaWxlQ29uZmln",
            "EjIKBnNvdXJjZRgBIAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5j",
            "ZVNvdXJjZRI/CgdkaXNwbGF5GAIgASgLMi4uc3F1YXJlZHVwLkhldXJpc3Rp",
            "YzJfQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5EkYKB2NvbnRleHQYAyABKAsy",
            "NS5zcXVhcmVkdXAuSGV1cmlzdGljMl9TY29tUGVyZkFzQmFyVGlsZUNvbmZp",
            "Z19Db250ZXh0IlMKKkhldXJpc3RpYzJfU2NvbVBlcmZBc0JhclRpbGVDb25m",
            "aWdfQ29udGV4dBIlCgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5Db21tb25T",
            "Y29wZSL0AQomSGV1cmlzdGljMl9TY29tUGVyZkFzSGVhdG1hcFRpbGVDb25m",
            "aWcSSgoHY29udGV4dBgBIAEoCzI5LnNxdWFyZWR1cC5IZXVyaXN0aWMyX1Nj",
            "b21QZXJmQXNIZWF0bWFwVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNvdXJjZRgC",
            "IAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJjZRJKCgdk",
            "aXNwbGF5GAMgASgLMjkuc3F1YXJlZHVwLkhldXJpc3RpYzJfU2NvbVBlcmZB",
            "c0hlYXRtYXBUaWxlQ29uZmlnX0Rpc3BsYXkiVwouSGV1cmlzdGljMl9TY29t",
            "UGVyZkFzSGVhdG1hcFRpbGVDb25maWdfQ29udGV4dBIlCgVzY29wZRgBIAEo",
            "CzIWLnNxdWFyZWR1cC5Db21tb25TY29wZSKyAQouSGV1cmlzdGljMl9TY29t",
            "UGVyZkFzSGVhdG1hcFRpbGVDb25maWdfRGlzcGxheRISCgpzaXplX3NjYWxl",
            "GAEgASgBEgsKA3JlZBgCIAEoDRINCgVncmVlbhgDIAEoDRIMCgRibHVlGAQg",
            "ASgNEg0KBWFscGhhGAUgASgNEhUKDXNpemVfcHJvcGVydHkYBiABKAkSDgoG",
            "aGVpZ2h0GAcgASgBEgwKBHpvb20YCCABKAki7QEKKEhldXJpc3RpYzJfU2Nv",
            "bVBlcmZBc0xpbmVHcmFwaFRpbGVDb25maWcSTAoHY29udGV4dBgBIAEoCzI7",
            "LnNxdWFyZWR1cC5IZXVyaXN0aWMyX1Njb21QZXJmQXNMaW5lR3JhcGhUaWxl",
            "Q29uZmlnX0NvbnRleHQSMgoGc291cmNlGAIgASgLMiIuc3F1YXJlZHVwLkNv",
            "bW1vblBlcmZvcm1hbmNlU291cmNlEj8KB2Rpc3BsYXkYAyABKAsyLi5zcXVh",
            "cmVkdXAuSGV1cmlzdGljMl9Db21tb25QZXJmb3JtYW5jZURpc3BsYXkiWQow",
            "SGV1cmlzdGljMl9TY29tUGVyZkFzTGluZUdyYXBoVGlsZUNvbmZpZ19Db250",
            "ZXh0EiUKBXNjb3BlGAEgASgLMhYuc3F1YXJlZHVwLkNvbW1vblNjb3BlIqUB",
            "Ci5IZXVyaXN0aWMyX1Njb21QZXJmQXNMaW5lR3JhcGhSZXBvcnRUaWxlQ29u",
            "ZmlnEjIKBnNvdXJjZRgBIAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3Jt",
            "YW5jZVNvdXJjZRI/CgdkaXNwbGF5GAIgASgLMi4uc3F1YXJlZHVwLkhldXJp",
            "c3RpYzJfQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5Iu8BCilIZXVyaXN0aWMy",
            "X1Njb21QZXJmQXNTcGFya2xpbmVzVGlsZUNvbmZpZxJNCgdjb250ZXh0GAEg",
            "ASgLMjwuc3F1YXJlZHVwLkhldXJpc3RpYzJfU2NvbVBlcmZBc1NwYXJrbGlu",
            "ZXNUaWxlQ29uZmlnX0NvbnRleHQSMgoGc291cmNlGAIgASgLMiIuc3F1YXJl",
            "ZHVwLkNvbW1vblBlcmZvcm1hbmNlU291cmNlEj8KB2Rpc3BsYXkYAyABKAsy",
            "Li5zcXVhcmVkdXAuSGV1cmlzdGljMl9Db21tb25QZXJmb3JtYW5jZURpc3Bs",
            "YXkiWgoxSGV1cmlzdGljMl9TY29tUGVyZkFzU3BhcmtsaW5lc1RpbGVDb25m",
            "aWdfQ29udGV4dBIlCgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5Db21tb25T",
            "Y29wZSLFAQoaSGV1cmlzdGljM19WaXNpb1RpbGVDb25maWcSKQoHY29udGV4",
            "dBgBIAEoCzIYLnNxdWFyZWR1cC5Db21tb25Db250ZXh0EjwKBnNvdXJjZRgC",
            "IAEoCzIsLnNxdWFyZWR1cC5IZXVyaXN0aWMzX1Zpc2lvVGlsZUNvbmZpZ19T",
            "b3VyY2USPgoHZGlzcGxheRgDIAEoCzItLnNxdWFyZWR1cC5IZXVyaXN0aWMz",
            "X1Zpc2lvVGlsZUNvbmZpZ19EaXNwbGF5IkoKIUhldXJpc3RpYzNfVmlzaW9U",
            "aWxlQ29uZmlnX1NvdXJjZRIlCgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5D",
            "b21tb25TY29wZSKmAQoiSGV1cmlzdGljM19WaXNpb1RpbGVDb25maWdfRGlz",
            "cGxheRIQCghiZWhhdmlvchgBIAEoCRIVCg1pY29ucG9zaXRpb254GAIgASgJ",
            "EhUKDWljb25wb3NpdGlvbnkYAyABKAkSEAoIaWNvbnNpemUYBCABKAkSDAoE",
            "cGF0aBgFIAEoCRISCgpjb2xvcm1hdGNoGAYgASgJEgwKBHpvb20YByABKAki",
            "+QIKI0hldXJpc3RpYzRfQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5Eg0KBXJh",
            "bmdlGAEgASgJEhAKCHVuaXRfa2V5GAIgAygJEg4KBmhlaWdodBgDIAEoARIN",
            "CgVsYWJlbBgEIAEoCRIUCgxjdXN0b21fbGFiZWwYBSABKAkSFQoNbGlua190",
            "ZW1wbGF0ZRgGIAEoCRIWCg5sYWJlbF90ZW1wbGF0ZRgHIAEoCRIQCghyYW5n",
            "ZW1heBgIIAEoARIQCghyYW5nZW1pbhgJIAEoARJOCghtZXRhZGF0YRgKIAMo",
            "CzI8LnNxdWFyZWR1cC5IZXVyaXN0aWM0X0NvbW1vblBlcmZvcm1hbmNlRGlz",
            "cGxheS5NZXRhZGF0YUVudHJ5EhAKCHNob3dfa2V5GAsgASgJGkcKDU1ldGFk",
            "YXRhRW50cnkSCwoDa2V5GAEgASgJEiUKBXZhbHVlGAIgASgLMhYuZ29vZ2xl",
            "LnByb3RvYnVmLlZhbHVlOgI4ASLhAQoiSGV1cmlzdGljNF9TY29tUGVyZkFz",
            "QmFyVGlsZUNvbmZpZxIyCgZzb3VyY2UYASABKAsyIi5zcXVhcmVkdXAuQ29t",
            "bW9uUGVyZm9ybWFuY2VTb3VyY2USPwoHZGlzcGxheRgCIAEoCzIuLnNxdWFy",
            "ZWR1cC5IZXVyaXN0aWM0X0NvbW1vblBlcmZvcm1hbmNlRGlzcGxheRJGCgdj",
            "b250ZXh0GAMgASgLMjUuc3F1YXJlZHVwLkhldXJpc3RpYzRfU2NvbVBlcmZB",
            "c0JhclRpbGVDb25maWdfQ29udGV4dCJTCipIZXVyaXN0aWM0X1Njb21QZXJm",
            "QXNCYXJUaWxlQ29uZmlnX0NvbnRleHQSJQoFc2NvcGUYASABKAsyFi5zcXVh",
            "cmVkdXAuQ29tbW9uU2NvcGUi9AEKJkhldXJpc3RpYzRfU2NvbVBlcmZBc0hl",
            "YXRtYXBUaWxlQ29uZmlnEkoKB2NvbnRleHQYASABKAsyOS5zcXVhcmVkdXAu",
            "SGV1cmlzdGljNF9TY29tUGVyZkFzSGVhdG1hcFRpbGVDb25maWdfQ29udGV4",
            "dBIyCgZzb3VyY2UYAiABKAsyIi5zcXVhcmVkdXAuQ29tbW9uUGVyZm9ybWFu",
            "Y2VTb3VyY2USSgoHZGlzcGxheRgDIAEoCzI5LnNxdWFyZWR1cC5IZXVyaXN0",
            "aWM0X1Njb21QZXJmQXNIZWF0bWFwVGlsZUNvbmZpZ19EaXNwbGF5IlcKLkhl",
            "dXJpc3RpYzRfU2NvbVBlcmZBc0hlYXRtYXBUaWxlQ29uZmlnX0NvbnRleHQS",
            "JQoFc2NvcGUYASABKAsyFi5zcXVhcmVkdXAuQ29tbW9uU2NvcGUisgEKLkhl",
            "dXJpc3RpYzRfU2NvbVBlcmZBc0hlYXRtYXBUaWxlQ29uZmlnX0Rpc3BsYXkS",
            "EgoKc2l6ZV9zY2FsZRgBIAEoARILCgNyZWQYAiABKA0SDQoFZ3JlZW4YAyAB",
            "KA0SDAoEYmx1ZRgEIAEoDRINCgVhbHBoYRgFIAEoDRIVCg1zaXplX3Byb3Bl",
            "cnR5GAYgASgJEg4KBmhlaWdodBgHIAEoARIMCgR6b29tGAggASgJIu0BCihI",
            "ZXVyaXN0aWM0X1Njb21QZXJmQXNMaW5lR3JhcGhUaWxlQ29uZmlnEkwKB2Nv",
            "bnRleHQYASABKAsyOy5zcXVhcmVkdXAuSGV1cmlzdGljNF9TY29tUGVyZkFz",
            "TGluZUdyYXBoVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNvdXJjZRgCIAEoCzIi",
            "LnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJjZRI/CgdkaXNwbGF5",
            "GAMgASgLMi4uc3F1YXJlZHVwLkhldXJpc3RpYzRfQ29tbW9uUGVyZm9ybWFu",
            "Y2VEaXNwbGF5IlkKMEhldXJpc3RpYzRfU2NvbVBlcmZBc0xpbmVHcmFwaFRp",
            "bGVDb25maWdfQ29udGV4dBIlCgVzY29wZRgBIAEoCzIWLnNxdWFyZWR1cC5D",
            "b21tb25TY29wZSKlAQouSGV1cmlzdGljNF9TY29tUGVyZkFzTGluZUdyYXBo",
            "UmVwb3J0VGlsZUNvbmZpZxIyCgZzb3VyY2UYASABKAsyIi5zcXVhcmVkdXAu",
            "Q29tbW9uUGVyZm9ybWFuY2VTb3VyY2USPwoHZGlzcGxheRgCIAEoCzIuLnNx",
            "dWFyZWR1cC5IZXVyaXN0aWM0X0NvbW1vblBlcmZvcm1hbmNlRGlzcGxheSLv",
            "AQopSGV1cmlzdGljNF9TY29tUGVyZkFzU3BhcmtsaW5lc1RpbGVDb25maWcS",
            "TQoHY29udGV4dBgBIAEoCzI8LnNxdWFyZWR1cC5IZXVyaXN0aWM0X1Njb21Q",
            "ZXJmQXNTcGFya2xpbmVzVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNvdXJjZRgC",
            "IAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJjZRI/Cgdk",
            "aXNwbGF5GAMgASgLMi4uc3F1YXJlZHVwLkhldXJpc3RpYzRfQ29tbW9uUGVy",
            "Zm9ybWFuY2VEaXNwbGF5IloKMUhldXJpc3RpYzRfU2NvbVBlcmZBc1NwYXJr",
            "bGluZXNUaWxlQ29uZmlnX0NvbnRleHQSJQoFc2NvcGUYASABKAsyFi5zcXVh",
            "cmVkdXAuQ29tbW9uU2NvcGUiqQMKI0hldXJpc3RpYzVfQ29tbW9uUGVyZm9y",
            "bWFuY2VEaXNwbGF5Eg0KBXJhbmdlGAEgASgJEhAKCHVuaXRfa2V5GAIgAygJ",
            "Eg4KBmhlaWdodBgDIAEoARINCgVsYWJlbBgEIAEoCRIUCgxjdXN0b21fbGFi",
            "ZWwYBSABKAkSFQoNbGlua190ZW1wbGF0ZRgGIAEoCRIWCg5sYWJlbF90ZW1w",
            "bGF0ZRgHIAEoCRIoCghyYW5nZW1heBgIIAEoCzIWLmdvb2dsZS5wcm90b2J1",
            "Zi5WYWx1ZRIoCghyYW5nZW1pbhgJIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5W",
            "YWx1ZRJOCghtZXRhZGF0YRgKIAMoCzI8LnNxdWFyZWR1cC5IZXVyaXN0aWM1",
            "X0NvbW1vblBlcmZvcm1hbmNlRGlzcGxheS5NZXRhZGF0YUVudHJ5EhAKCHNo",
            "b3dfa2V5GAsgASgJGkcKDU1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEiUK",
            "BXZhbHVlGAIgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlOgI4ASLhAQoi",
            "SGV1cmlzdGljNV9TY29tUGVyZkFzQmFyVGlsZUNvbmZpZxIyCgZzb3VyY2UY",
            "ASABKAsyIi5zcXVhcmVkdXAuQ29tbW9uUGVyZm9ybWFuY2VTb3VyY2USPwoH",
            "ZGlzcGxheRgCIAEoCzIuLnNxdWFyZWR1cC5IZXVyaXN0aWM1X0NvbW1vblBl",
            "cmZvcm1hbmNlRGlzcGxheRJGCgdjb250ZXh0GAMgASgLMjUuc3F1YXJlZHVw",
            "LkhldXJpc3RpYzVfU2NvbVBlcmZBc0JhclRpbGVDb25maWdfQ29udGV4dCJT",
            "CipIZXVyaXN0aWM1X1Njb21QZXJmQXNCYXJUaWxlQ29uZmlnX0NvbnRleHQS",
            "JQoFc2NvcGUYASABKAsyFi5zcXVhcmVkdXAuQ29tbW9uU2NvcGUi9AEKJkhl",
            "dXJpc3RpYzVfU2NvbVBlcmZBc0hlYXRtYXBUaWxlQ29uZmlnEkoKB2NvbnRl",
            "eHQYASABKAsyOS5zcXVhcmVkdXAuSGV1cmlzdGljNV9TY29tUGVyZkFzSGVh",
            "dG1hcFRpbGVDb25maWdfQ29udGV4dBIyCgZzb3VyY2UYAiABKAsyIi5zcXVh",
            "cmVkdXAuQ29tbW9uUGVyZm9ybWFuY2VTb3VyY2USSgoHZGlzcGxheRgDIAEo",
            "CzI5LnNxdWFyZWR1cC5IZXVyaXN0aWM1X1Njb21QZXJmQXNIZWF0bWFwVGls",
            "ZUNvbmZpZ19EaXNwbGF5IlcKLkhldXJpc3RpYzVfU2NvbVBlcmZBc0hlYXRt",
            "YXBUaWxlQ29uZmlnX0NvbnRleHQSJQoFc2NvcGUYASABKAsyFi5zcXVhcmVk",
            "dXAuQ29tbW9uU2NvcGUiqgIKLkhldXJpc3RpYzVfU2NvbVBlcmZBc0hlYXRt",
            "YXBUaWxlQ29uZmlnX0Rpc3BsYXkSEgoKc2l6ZV9zY2FsZRgBIAEoARIjCgNy",
            "ZWQYAiABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUSJQoFZ3JlZW4YAyAB",
            "KAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUSJAoEYmx1ZRgEIAEoCzIWLmdv",
            "b2dsZS5wcm90b2J1Zi5WYWx1ZRIlCgVhbHBoYRgFIAEoCzIWLmdvb2dsZS5w",
            "cm90b2J1Zi5WYWx1ZRIVCg1zaXplX3Byb3BlcnR5GAYgASgJEiYKBmhlaWdo",
            "dBgHIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZRIMCgR6b29tGAggASgJ",
            "Iu0BCihIZXVyaXN0aWM1X1Njb21QZXJmQXNMaW5lR3JhcGhUaWxlQ29uZmln",
            "EkwKB2NvbnRleHQYASABKAsyOy5zcXVhcmVkdXAuSGV1cmlzdGljNV9TY29t",
            "UGVyZkFzTGluZUdyYXBoVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNvdXJjZRgC",
            "IAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJjZRI/Cgdk",
            "aXNwbGF5GAMgASgLMi4uc3F1YXJlZHVwLkhldXJpc3RpYzVfQ29tbW9uUGVy",
            "Zm9ybWFuY2VEaXNwbGF5IlkKMEhldXJpc3RpYzVfU2NvbVBlcmZBc0xpbmVH",
            "cmFwaFRpbGVDb25maWdfQ29udGV4dBIlCgVzY29wZRgBIAEoCzIWLnNxdWFy",
            "ZWR1cC5Db21tb25TY29wZSKlAQouSGV1cmlzdGljNV9TY29tUGVyZkFzTGlu",
            "ZUdyYXBoUmVwb3J0VGlsZUNvbmZpZxIyCgZzb3VyY2UYASABKAsyIi5zcXVh",
            "cmVkdXAuQ29tbW9uUGVyZm9ybWFuY2VTb3VyY2USPwoHZGlzcGxheRgCIAEo",
            "CzIuLnNxdWFyZWR1cC5IZXVyaXN0aWM1X0NvbW1vblBlcmZvcm1hbmNlRGlz",
            "cGxheSLvAQopSGV1cmlzdGljNV9TY29tUGVyZkFzU3BhcmtsaW5lc1RpbGVD",
            "b25maWcSTQoHY29udGV4dBgBIAEoCzI8LnNxdWFyZWR1cC5IZXVyaXN0aWM1",
            "X1Njb21QZXJmQXNTcGFya2xpbmVzVGlsZUNvbmZpZ19Db250ZXh0EjIKBnNv",
            "dXJjZRgCIAEoCzIiLnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZVNvdXJj",
            "ZRI/CgdkaXNwbGF5GAMgASgLMi4uc3F1YXJlZHVwLkhldXJpc3RpYzVfQ29t",
            "bW9uUGVyZm9ybWFuY2VEaXNwbGF5IloKMUhldXJpc3RpYzVfU2NvbVBlcmZB",
            "c1NwYXJrbGluZXNUaWxlQ29uZmlnX0NvbnRleHQSJQoFc2NvcGUYASABKAsy",
            "Fi5zcXVhcmVkdXAuQ29tbW9uU2NvcGVCHaoCGlNxdWFyZWRVcC5EYXNoYm9h",
            "cmQuU2NoZW1hYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.PerformanceSharedReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source), global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source.Parser, new[]{ "Scope", "Severities", "Priorities", "Sources", "Owner", "States", "Timeframe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display), global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display.Parser, new[]{ "Limit", "ShowTitles", "ShowAll", "Columns", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay), global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay.Parser, new[]{ "Range", "Unitkey", "Height", "Label", "CustomLabel", "LinkTemplate", "LabelTemplate", "Rangemax", "Rangemin", "Metadata", "ShowKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display.Parser, new[]{ "SizeScale", "Red", "Green", "Blue", "Alpha", "SizeProperty", "Height", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphReportTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphReportTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source), global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display), global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display.Parser, new[]{ "Behavior", "Iconpositionx", "Iconpositiony", "Iconsize", "Path", "Colormatch", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay), global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay.Parser, new[]{ "Range", "UnitKey", "Height", "Label", "CustomLabel", "LinkTemplate", "LabelTemplate", "Rangemax", "Rangemin", "Metadata", "ShowKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display.Parser, new[]{ "SizeScale", "Red", "Green", "Blue", "Alpha", "SizeProperty", "Height", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphReportTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphReportTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay), global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay.Parser, new[]{ "Range", "UnitKey", "Height", "Label", "CustomLabel", "LinkTemplate", "LabelTemplate", "Rangemax", "Rangemin", "Metadata", "ShowKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig.Parser, new[]{ "Source", "Display", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display.Parser, new[]{ "SizeScale", "Red", "Green", "Blue", "Alpha", "SizeProperty", "Height", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphReportTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphReportTileConfig.Parser, new[]{ "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context), global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context.Parser, new[]{ "Scope" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Heuristic1_AlertListTileConfig : pb::IMessage<Heuristic1_AlertListTileConfig> {
    private static readonly pb::MessageParser<Heuristic1_AlertListTileConfig> _parser = new pb::MessageParser<Heuristic1_AlertListTileConfig>(() => new Heuristic1_AlertListTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic1_AlertListTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig(Heuristic1_AlertListTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig Clone() {
      return new Heuristic1_AlertListTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value context_;
    /// <summary>
    /// TODO: Typing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic1_AlertListTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic1_AlertListTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic1_AlertListTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic1_AlertListTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic1_AlertListTileConfig_Source : pb::IMessage<Heuristic1_AlertListTileConfig_Source> {
    private static readonly pb::MessageParser<Heuristic1_AlertListTileConfig_Source> _parser = new pb::MessageParser<Heuristic1_AlertListTileConfig_Source>(() => new Heuristic1_AlertListTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic1_AlertListTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Source(Heuristic1_AlertListTileConfig_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
      severities_ = other.severities_.Clone();
      priorities_ = other.priorities_.Clone();
      sources_ = other.sources_.Clone();
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      states_ = other.states_.Clone();
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Source Clone() {
      return new Heuristic1_AlertListTileConfig_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "severities" field.</summary>
    public const int SeveritiesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_severities_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> severities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of severity types - encoded as integers in strings (e.g. "1")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Severities {
      get { return severities_; }
    }

    /// <summary>Field number for the "priorities" field.</summary>
    public const int PrioritiesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_priorities_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> priorities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of priority types - encoded as integers in strings (e.g. "1")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Priorities {
      get { return priorities_; }
    }

    /// <summary>Field number for the "sources" field.</summary>
    public const int SourcesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_sources_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> sources_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Alert sources - typically "monitor" or "rule" (or both)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sources {
      get { return sources_; }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Value owner_;
    /// <summary>
    /// Alert owner (filter). Typically "any" or "me"
    ///
    /// This is encoded as 'value' because it arbitrarily switches between 
    /// a string or an array with only one element
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_states_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> states_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Set of states permitted - encoded as integers in strings (e.g. "-1")
    ///
    /// Typical value appears to be any (open) encoded as -1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> States {
      get { return states_; }
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 7;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    /// <summary>
    /// Timeframe of the alert display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic1_AlertListTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic1_AlertListTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      if(!severities_.Equals(other.severities_)) return false;
      if(!priorities_.Equals(other.priorities_)) return false;
      if(!sources_.Equals(other.sources_)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if(!states_.Equals(other.states_)) return false;
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      hash ^= severities_.GetHashCode();
      hash ^= priorities_.GetHashCode();
      hash ^= sources_.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      hash ^= states_.GetHashCode();
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
      severities_.WriteTo(output, _repeated_severities_codec);
      priorities_.WriteTo(output, _repeated_priorities_codec);
      sources_.WriteTo(output, _repeated_sources_codec);
      if (owner_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Owner);
      }
      states_.WriteTo(output, _repeated_states_codec);
      if (timeframe_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      size += severities_.CalculateSize(_repeated_severities_codec);
      size += priorities_.CalculateSize(_repeated_priorities_codec);
      size += sources_.CalculateSize(_repeated_sources_codec);
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      size += states_.CalculateSize(_repeated_states_codec);
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic1_AlertListTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      severities_.Add(other.severities_);
      priorities_.Add(other.priorities_);
      sources_.Add(other.sources_);
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Owner.MergeFrom(other.Owner);
      }
      states_.Add(other.states_);
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
          case 18: {
            severities_.AddEntriesFrom(input, _repeated_severities_codec);
            break;
          }
          case 26: {
            priorities_.AddEntriesFrom(input, _repeated_priorities_codec);
            break;
          }
          case 34: {
            sources_.AddEntriesFrom(input, _repeated_sources_codec);
            break;
          }
          case 42: {
            if (owner_ == null) {
              owner_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 50: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 58: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Display options for alert list
  /// </summary>
  public sealed partial class Heuristic1_AlertListTileConfig_Display : pb::IMessage<Heuristic1_AlertListTileConfig_Display> {
    private static readonly pb::MessageParser<Heuristic1_AlertListTileConfig_Display> _parser = new pb::MessageParser<Heuristic1_AlertListTileConfig_Display>(() => new Heuristic1_AlertListTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic1_AlertListTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Display(Heuristic1_AlertListTileConfig_Display other) : this() {
      limit_ = other.limit_;
      showTitles_ = other.showTitles_;
      showAll_ = other.showAll_;
      columns_ = other.columns_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic1_AlertListTileConfig_Display Clone() {
      return new Heuristic1_AlertListTileConfig_Display(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private int limit_;
    /// <summary>
    /// Max alerts to display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "show_titles" field.</summary>
    public const int ShowTitlesFieldNumber = 2;
    private string showTitles_ = "";
    /// <summary>
    /// Whether to display column titles
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowTitles {
      get { return showTitles_; }
      set {
        showTitles_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "show_all" field.</summary>
    public const int ShowAllFieldNumber = 3;
    private bool showAll_;
    /// <summary>
    /// Whether to show all alerts regardless of limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAll {
      get { return showAll_; }
      set {
        showAll_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Column names to display in the list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 5;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic1_AlertListTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic1_AlertListTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (ShowTitles != other.ShowTitles) return false;
      if (ShowAll != other.ShowAll) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (ShowTitles.Length != 0) hash ^= ShowTitles.GetHashCode();
      if (ShowAll != false) hash ^= ShowAll.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Limit);
      }
      if (ShowTitles.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShowTitles);
      }
      if (ShowAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowAll);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (ShowTitles.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowTitles);
      }
      if (ShowAll != false) {
        size += 1 + 1;
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic1_AlertListTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.ShowTitles.Length != 0) {
        ShowTitles = other.ShowTitles;
      }
      if (other.ShowAll != false) {
        ShowAll = other.ShowAll;
      }
      columns_.Add(other.columns_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadInt32();
            break;
          }
          case 18: {
            ShowTitles = input.ReadString();
            break;
          }
          case 24: {
            ShowAll = input.ReadBool();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 42: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_CommonPerformanceDisplay : pb::IMessage<Heuristic2_CommonPerformanceDisplay> {
    private static readonly pb::MessageParser<Heuristic2_CommonPerformanceDisplay> _parser = new pb::MessageParser<Heuristic2_CommonPerformanceDisplay>(() => new Heuristic2_CommonPerformanceDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_CommonPerformanceDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_CommonPerformanceDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_CommonPerformanceDisplay(Heuristic2_CommonPerformanceDisplay other) : this() {
      range_ = other.range_;
      unitkey_ = other.unitkey_.Clone();
      height_ = other.height_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      linkTemplate_ = other.linkTemplate_;
      labelTemplate_ = other.labelTemplate_;
      rangemax_ = other.rangemax_;
      rangemin_ = other.rangemin_;
      metadata_ = other.metadata_.Clone();
      showKey_ = other.showKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_CommonPerformanceDisplay Clone() {
      return new Heuristic2_CommonPerformanceDisplay(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private string range_ = "";
    /// <summary>
    /// e.g. fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Range {
      get { return range_; }
      set {
        range_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unitkey" field.</summary>
    public const int UnitkeyFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unitkey_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unitkey_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// unitkey instead of unitKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Unitkey {
      get { return unitkey_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_template" field.</summary>
    public const int LinkTemplateFieldNumber = 6;
    private string linkTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkTemplate {
      get { return linkTemplate_; }
      set {
        linkTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 7;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rangemax" field.</summary>
    public const int RangemaxFieldNumber = 8;
    private double rangemax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemax {
      get { return rangemax_; }
      set {
        rangemax_ = value;
      }
    }

    /// <summary>Field number for the "rangemin" field.</summary>
    public const int RangeminFieldNumber = 9;
    private double rangemin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemin {
      get { return rangemin_; }
      set {
        rangemin_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 82);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> metadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Unknown/unverified content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "show_key" field.</summary>
    public const int ShowKeyFieldNumber = 11;
    private bool showKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowKey {
      get { return showKey_; }
      set {
        showKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_CommonPerformanceDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_CommonPerformanceDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if(!unitkey_.Equals(other.unitkey_)) return false;
      if (Height != other.Height) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (LinkTemplate != other.LinkTemplate) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      if (Rangemax != other.Rangemax) return false;
      if (Rangemin != other.Rangemin) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (ShowKey != other.ShowKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range.Length != 0) hash ^= Range.GetHashCode();
      hash ^= unitkey_.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (LinkTemplate.Length != 0) hash ^= LinkTemplate.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      if (Rangemax != 0D) hash ^= Rangemax.GetHashCode();
      if (Rangemin != 0D) hash ^= Rangemin.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (ShowKey != false) hash ^= ShowKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Range);
      }
      unitkey_.WriteTo(output, _repeated_unitkey_codec);
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LabelTemplate);
      }
      if (Rangemax != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rangemax);
      }
      if (Rangemin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Rangemin);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (ShowKey != false) {
        output.WriteRawTag(88);
        output.WriteBool(ShowKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Range);
      }
      size += unitkey_.CalculateSize(_repeated_unitkey_codec);
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      if (Rangemax != 0D) {
        size += 1 + 8;
      }
      if (Rangemin != 0D) {
        size += 1 + 8;
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (ShowKey != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_CommonPerformanceDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Range.Length != 0) {
        Range = other.Range;
      }
      unitkey_.Add(other.unitkey_);
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.LinkTemplate.Length != 0) {
        LinkTemplate = other.LinkTemplate;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
      if (other.Rangemax != 0D) {
        Rangemax = other.Rangemax;
      }
      if (other.Rangemin != 0D) {
        Rangemin = other.Rangemin;
      }
      metadata_.Add(other.metadata_);
      if (other.ShowKey != false) {
        ShowKey = other.ShowKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Range = input.ReadString();
            break;
          }
          case 18: {
            unitkey_.AddEntriesFrom(input, _repeated_unitkey_codec);
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            LinkTemplate = input.ReadString();
            break;
          }
          case 58: {
            LabelTemplate = input.ReadString();
            break;
          }
          case 65: {
            Rangemax = input.ReadDouble();
            break;
          }
          case 73: {
            Rangemin = input.ReadDouble();
            break;
          }
          case 82: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 88: {
            ShowKey = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsBarTileConfig : pb::IMessage<Heuristic2_ScomPerfAsBarTileConfig> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig>(() => new Heuristic2_ScomPerfAsBarTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig(Heuristic2_ScomPerfAsBarTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig Clone() {
      return new Heuristic2_ScomPerfAsBarTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsBarTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsBarTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsBarTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsBarTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsBarTileConfig_Context : pb::IMessage<Heuristic2_ScomPerfAsBarTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig_Context> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig_Context>(() => new Heuristic2_ScomPerfAsBarTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsBarTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig_Context(Heuristic2_ScomPerfAsBarTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsBarTileConfig_Context Clone() {
      return new Heuristic2_ScomPerfAsBarTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsBarTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsBarTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsBarTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsHeatmapTileConfig : pb::IMessage<Heuristic2_ScomPerfAsHeatmapTileConfig> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig>(() => new Heuristic2_ScomPerfAsHeatmapTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig(Heuristic2_ScomPerfAsHeatmapTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig Clone() {
      return new Heuristic2_ScomPerfAsHeatmapTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsHeatmapTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsHeatmapTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsHeatmapTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsHeatmapTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsHeatmapTileConfig_Context : pb::IMessage<Heuristic2_ScomPerfAsHeatmapTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Context> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Context>(() => new Heuristic2_ScomPerfAsHeatmapTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Context(Heuristic2_ScomPerfAsHeatmapTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Context Clone() {
      return new Heuristic2_ScomPerfAsHeatmapTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsHeatmapTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsHeatmapTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsHeatmapTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsHeatmapTileConfig_Display : pb::IMessage<Heuristic2_ScomPerfAsHeatmapTileConfig_Display> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Display> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Display>(() => new Heuristic2_ScomPerfAsHeatmapTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsHeatmapTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Display(Heuristic2_ScomPerfAsHeatmapTileConfig_Display other) : this() {
      sizeScale_ = other.sizeScale_;
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      sizeProperty_ = other.sizeProperty_;
      height_ = other.height_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsHeatmapTileConfig_Display Clone() {
      return new Heuristic2_ScomPerfAsHeatmapTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_scale" field.</summary>
    public const int SizeScaleFieldNumber = 1;
    private double sizeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeScale {
      get { return sizeScale_; }
      set {
        sizeScale_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 2;
    private uint red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 3;
    private uint green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 4;
    private uint blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 5;
    private uint alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "size_property" field.</summary>
    public const int SizePropertyFieldNumber = 6;
    private string sizeProperty_ = "";
    /// <summary>
    /// e.g. properties.isVirtualNode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeProperty {
      get { return sizeProperty_; }
      set {
        sizeProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 8;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsHeatmapTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsHeatmapTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeScale != other.SizeScale) return false;
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      if (Alpha != other.Alpha) return false;
      if (SizeProperty != other.SizeProperty) return false;
      if (Height != other.Height) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeScale != 0D) hash ^= SizeScale.GetHashCode();
      if (Red != 0) hash ^= Red.GetHashCode();
      if (Green != 0) hash ^= Green.GetHashCode();
      if (Blue != 0) hash ^= Blue.GetHashCode();
      if (Alpha != 0) hash ^= Alpha.GetHashCode();
      if (SizeProperty.Length != 0) hash ^= SizeProperty.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeScale != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SizeScale);
      }
      if (Red != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Red);
      }
      if (Green != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Green);
      }
      if (Blue != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Blue);
      }
      if (Alpha != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Alpha);
      }
      if (SizeProperty.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SizeProperty);
      }
      if (Height != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Height);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeScale != 0D) {
        size += 1 + 8;
      }
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Red);
      }
      if (Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Green);
      }
      if (Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blue);
      }
      if (Alpha != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Alpha);
      }
      if (SizeProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeProperty);
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsHeatmapTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeScale != 0D) {
        SizeScale = other.SizeScale;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.Green != 0) {
        Green = other.Green;
      }
      if (other.Blue != 0) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0) {
        Alpha = other.Alpha;
      }
      if (other.SizeProperty.Length != 0) {
        SizeProperty = other.SizeProperty;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SizeScale = input.ReadDouble();
            break;
          }
          case 16: {
            Red = input.ReadUInt32();
            break;
          }
          case 24: {
            Green = input.ReadUInt32();
            break;
          }
          case 32: {
            Blue = input.ReadUInt32();
            break;
          }
          case 40: {
            Alpha = input.ReadUInt32();
            break;
          }
          case 50: {
            SizeProperty = input.ReadString();
            break;
          }
          case 57: {
            Height = input.ReadDouble();
            break;
          }
          case 66: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsLineGraphTileConfig : pb::IMessage<Heuristic2_ScomPerfAsLineGraphTileConfig> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig>(() => new Heuristic2_ScomPerfAsLineGraphTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig(Heuristic2_ScomPerfAsLineGraphTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig Clone() {
      return new Heuristic2_ScomPerfAsLineGraphTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsLineGraphTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsLineGraphTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsLineGraphTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsLineGraphTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsLineGraphTileConfig_Context : pb::IMessage<Heuristic2_ScomPerfAsLineGraphTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig_Context> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig_Context>(() => new Heuristic2_ScomPerfAsLineGraphTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsLineGraphTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig_Context(Heuristic2_ScomPerfAsLineGraphTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphTileConfig_Context Clone() {
      return new Heuristic2_ScomPerfAsLineGraphTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsLineGraphTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsLineGraphTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsLineGraphTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsLineGraphReportTileConfig : pb::IMessage<Heuristic2_ScomPerfAsLineGraphReportTileConfig> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsLineGraphReportTileConfig> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsLineGraphReportTileConfig>(() => new Heuristic2_ScomPerfAsLineGraphReportTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsLineGraphReportTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphReportTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphReportTileConfig(Heuristic2_ScomPerfAsLineGraphReportTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsLineGraphReportTileConfig Clone() {
      return new Heuristic2_ScomPerfAsLineGraphReportTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsLineGraphReportTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsLineGraphReportTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsLineGraphReportTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsSparklinesTileConfig : pb::IMessage<Heuristic2_ScomPerfAsSparklinesTileConfig> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig>(() => new Heuristic2_ScomPerfAsSparklinesTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig(Heuristic2_ScomPerfAsSparklinesTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig Clone() {
      return new Heuristic2_ScomPerfAsSparklinesTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsSparklinesTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsSparklinesTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsSparklinesTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_ScomPerfAsSparklinesTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic2_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic2_ScomPerfAsSparklinesTileConfig_Context : pb::IMessage<Heuristic2_ScomPerfAsSparklinesTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig_Context> _parser = new pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig_Context>(() => new Heuristic2_ScomPerfAsSparklinesTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic2_ScomPerfAsSparklinesTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig_Context(Heuristic2_ScomPerfAsSparklinesTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic2_ScomPerfAsSparklinesTileConfig_Context Clone() {
      return new Heuristic2_ScomPerfAsSparklinesTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic2_ScomPerfAsSparklinesTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic2_ScomPerfAsSparklinesTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic2_ScomPerfAsSparklinesTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic3_VisioTileConfig : pb::IMessage<Heuristic3_VisioTileConfig> {
    private static readonly pb::MessageParser<Heuristic3_VisioTileConfig> _parser = new pb::MessageParser<Heuristic3_VisioTileConfig>(() => new Heuristic3_VisioTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic3_VisioTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig(Heuristic3_VisioTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig Clone() {
      return new Heuristic3_VisioTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic3_VisioTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic3_VisioTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic3_VisioTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic3_VisioTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic3_VisioTileConfig_Source : pb::IMessage<Heuristic3_VisioTileConfig_Source> {
    private static readonly pb::MessageParser<Heuristic3_VisioTileConfig_Source> _parser = new pb::MessageParser<Heuristic3_VisioTileConfig_Source>(() => new Heuristic3_VisioTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic3_VisioTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Source(Heuristic3_VisioTileConfig_Source other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Source Clone() {
      return new Heuristic3_VisioTileConfig_Source(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic3_VisioTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic3_VisioTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic3_VisioTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic3_VisioTileConfig_Display : pb::IMessage<Heuristic3_VisioTileConfig_Display> {
    private static readonly pb::MessageParser<Heuristic3_VisioTileConfig_Display> _parser = new pb::MessageParser<Heuristic3_VisioTileConfig_Display>(() => new Heuristic3_VisioTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic3_VisioTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Display(Heuristic3_VisioTileConfig_Display other) : this() {
      behavior_ = other.behavior_;
      iconpositionx_ = other.iconpositionx_;
      iconpositiony_ = other.iconpositiony_;
      iconsize_ = other.iconsize_;
      path_ = other.path_;
      colormatch_ = other.colormatch_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic3_VisioTileConfig_Display Clone() {
      return new Heuristic3_VisioTileConfig_Display(this);
    }

    /// <summary>Field number for the "behavior" field.</summary>
    public const int BehaviorFieldNumber = 1;
    private string behavior_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Behavior {
      get { return behavior_; }
      set {
        behavior_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconpositionx" field.</summary>
    public const int IconpositionxFieldNumber = 2;
    private string iconpositionx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iconpositionx {
      get { return iconpositionx_; }
      set {
        iconpositionx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconpositiony" field.</summary>
    public const int IconpositionyFieldNumber = 3;
    private string iconpositiony_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iconpositiony {
      get { return iconpositiony_; }
      set {
        iconpositiony_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconsize" field.</summary>
    public const int IconsizeFieldNumber = 4;
    private string iconsize_ = "";
    /// <summary>
    /// Can be specified as string for no particular reason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iconsize {
      get { return iconsize_; }
      set {
        iconsize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colormatch" field.</summary>
    public const int ColormatchFieldNumber = 6;
    private string colormatch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Colormatch {
      get { return colormatch_; }
      set {
        colormatch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 7;
    private string zoom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic3_VisioTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic3_VisioTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Behavior != other.Behavior) return false;
      if (Iconpositionx != other.Iconpositionx) return false;
      if (Iconpositiony != other.Iconpositiony) return false;
      if (Iconsize != other.Iconsize) return false;
      if (Path != other.Path) return false;
      if (Colormatch != other.Colormatch) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Behavior.Length != 0) hash ^= Behavior.GetHashCode();
      if (Iconpositionx.Length != 0) hash ^= Iconpositionx.GetHashCode();
      if (Iconpositiony.Length != 0) hash ^= Iconpositiony.GetHashCode();
      if (Iconsize.Length != 0) hash ^= Iconsize.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Colormatch.Length != 0) hash ^= Colormatch.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Behavior.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Behavior);
      }
      if (Iconpositionx.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Iconpositionx);
      }
      if (Iconpositiony.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Iconpositiony);
      }
      if (Iconsize.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Iconsize);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (Colormatch.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Colormatch);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Behavior.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Behavior);
      }
      if (Iconpositionx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iconpositionx);
      }
      if (Iconpositiony.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iconpositiony);
      }
      if (Iconsize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iconsize);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Colormatch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Colormatch);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic3_VisioTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Behavior.Length != 0) {
        Behavior = other.Behavior;
      }
      if (other.Iconpositionx.Length != 0) {
        Iconpositionx = other.Iconpositionx;
      }
      if (other.Iconpositiony.Length != 0) {
        Iconpositiony = other.Iconpositiony;
      }
      if (other.Iconsize.Length != 0) {
        Iconsize = other.Iconsize;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Colormatch.Length != 0) {
        Colormatch = other.Colormatch;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Behavior = input.ReadString();
            break;
          }
          case 18: {
            Iconpositionx = input.ReadString();
            break;
          }
          case 26: {
            Iconpositiony = input.ReadString();
            break;
          }
          case 34: {
            Iconsize = input.ReadString();
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 50: {
            Colormatch = input.ReadString();
            break;
          }
          case 58: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_CommonPerformanceDisplay : pb::IMessage<Heuristic4_CommonPerformanceDisplay> {
    private static readonly pb::MessageParser<Heuristic4_CommonPerformanceDisplay> _parser = new pb::MessageParser<Heuristic4_CommonPerformanceDisplay>(() => new Heuristic4_CommonPerformanceDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_CommonPerformanceDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_CommonPerformanceDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_CommonPerformanceDisplay(Heuristic4_CommonPerformanceDisplay other) : this() {
      range_ = other.range_;
      unitKey_ = other.unitKey_.Clone();
      height_ = other.height_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      linkTemplate_ = other.linkTemplate_;
      labelTemplate_ = other.labelTemplate_;
      rangemax_ = other.rangemax_;
      rangemin_ = other.rangemin_;
      metadata_ = other.metadata_.Clone();
      showKey_ = other.showKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_CommonPerformanceDisplay Clone() {
      return new Heuristic4_CommonPerformanceDisplay(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private string range_ = "";
    /// <summary>
    /// e.g. fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Range {
      get { return range_; }
      set {
        range_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_key" field.</summary>
    public const int UnitKeyFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unitKey_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unitKey_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// unitkey instead of unitKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnitKey {
      get { return unitKey_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_template" field.</summary>
    public const int LinkTemplateFieldNumber = 6;
    private string linkTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkTemplate {
      get { return linkTemplate_; }
      set {
        linkTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 7;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rangemax" field.</summary>
    public const int RangemaxFieldNumber = 8;
    private double rangemax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemax {
      get { return rangemax_; }
      set {
        rangemax_ = value;
      }
    }

    /// <summary>Field number for the "rangemin" field.</summary>
    public const int RangeminFieldNumber = 9;
    private double rangemin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemin {
      get { return rangemin_; }
      set {
        rangemin_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 82);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> metadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Unknown/unverified content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "show_key" field.</summary>
    public const int ShowKeyFieldNumber = 11;
    private string showKey_ = "";
    /// <summary>
    /// Incorrectly provided as string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowKey {
      get { return showKey_; }
      set {
        showKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_CommonPerformanceDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_CommonPerformanceDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if(!unitKey_.Equals(other.unitKey_)) return false;
      if (Height != other.Height) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (LinkTemplate != other.LinkTemplate) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      if (Rangemax != other.Rangemax) return false;
      if (Rangemin != other.Rangemin) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (ShowKey != other.ShowKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range.Length != 0) hash ^= Range.GetHashCode();
      hash ^= unitKey_.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (LinkTemplate.Length != 0) hash ^= LinkTemplate.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      if (Rangemax != 0D) hash ^= Rangemax.GetHashCode();
      if (Rangemin != 0D) hash ^= Rangemin.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (ShowKey.Length != 0) hash ^= ShowKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Range);
      }
      unitKey_.WriteTo(output, _repeated_unitKey_codec);
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LabelTemplate);
      }
      if (Rangemax != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rangemax);
      }
      if (Rangemin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Rangemin);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (ShowKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShowKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Range);
      }
      size += unitKey_.CalculateSize(_repeated_unitKey_codec);
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      if (Rangemax != 0D) {
        size += 1 + 8;
      }
      if (Rangemin != 0D) {
        size += 1 + 8;
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (ShowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_CommonPerformanceDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Range.Length != 0) {
        Range = other.Range;
      }
      unitKey_.Add(other.unitKey_);
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.LinkTemplate.Length != 0) {
        LinkTemplate = other.LinkTemplate;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
      if (other.Rangemax != 0D) {
        Rangemax = other.Rangemax;
      }
      if (other.Rangemin != 0D) {
        Rangemin = other.Rangemin;
      }
      metadata_.Add(other.metadata_);
      if (other.ShowKey.Length != 0) {
        ShowKey = other.ShowKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Range = input.ReadString();
            break;
          }
          case 18: {
            unitKey_.AddEntriesFrom(input, _repeated_unitKey_codec);
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            LinkTemplate = input.ReadString();
            break;
          }
          case 58: {
            LabelTemplate = input.ReadString();
            break;
          }
          case 65: {
            Rangemax = input.ReadDouble();
            break;
          }
          case 73: {
            Rangemin = input.ReadDouble();
            break;
          }
          case 82: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 90: {
            ShowKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsBarTileConfig : pb::IMessage<Heuristic4_ScomPerfAsBarTileConfig> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig>(() => new Heuristic4_ScomPerfAsBarTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig(Heuristic4_ScomPerfAsBarTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig Clone() {
      return new Heuristic4_ScomPerfAsBarTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsBarTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsBarTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsBarTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsBarTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsBarTileConfig_Context : pb::IMessage<Heuristic4_ScomPerfAsBarTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig_Context> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig_Context>(() => new Heuristic4_ScomPerfAsBarTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsBarTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig_Context(Heuristic4_ScomPerfAsBarTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsBarTileConfig_Context Clone() {
      return new Heuristic4_ScomPerfAsBarTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsBarTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsBarTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsBarTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsHeatmapTileConfig : pb::IMessage<Heuristic4_ScomPerfAsHeatmapTileConfig> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig>(() => new Heuristic4_ScomPerfAsHeatmapTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig(Heuristic4_ScomPerfAsHeatmapTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig Clone() {
      return new Heuristic4_ScomPerfAsHeatmapTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsHeatmapTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsHeatmapTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsHeatmapTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsHeatmapTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsHeatmapTileConfig_Context : pb::IMessage<Heuristic4_ScomPerfAsHeatmapTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Context> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Context>(() => new Heuristic4_ScomPerfAsHeatmapTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Context(Heuristic4_ScomPerfAsHeatmapTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Context Clone() {
      return new Heuristic4_ScomPerfAsHeatmapTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsHeatmapTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsHeatmapTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsHeatmapTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsHeatmapTileConfig_Display : pb::IMessage<Heuristic4_ScomPerfAsHeatmapTileConfig_Display> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Display> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Display>(() => new Heuristic4_ScomPerfAsHeatmapTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsHeatmapTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Display(Heuristic4_ScomPerfAsHeatmapTileConfig_Display other) : this() {
      sizeScale_ = other.sizeScale_;
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      sizeProperty_ = other.sizeProperty_;
      height_ = other.height_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsHeatmapTileConfig_Display Clone() {
      return new Heuristic4_ScomPerfAsHeatmapTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_scale" field.</summary>
    public const int SizeScaleFieldNumber = 1;
    private double sizeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeScale {
      get { return sizeScale_; }
      set {
        sizeScale_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 2;
    private uint red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 3;
    private uint green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 4;
    private uint blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 5;
    private uint alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "size_property" field.</summary>
    public const int SizePropertyFieldNumber = 6;
    private string sizeProperty_ = "";
    /// <summary>
    /// e.g. properties.isVirtualNode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeProperty {
      get { return sizeProperty_; }
      set {
        sizeProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 8;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsHeatmapTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsHeatmapTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeScale != other.SizeScale) return false;
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      if (Alpha != other.Alpha) return false;
      if (SizeProperty != other.SizeProperty) return false;
      if (Height != other.Height) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeScale != 0D) hash ^= SizeScale.GetHashCode();
      if (Red != 0) hash ^= Red.GetHashCode();
      if (Green != 0) hash ^= Green.GetHashCode();
      if (Blue != 0) hash ^= Blue.GetHashCode();
      if (Alpha != 0) hash ^= Alpha.GetHashCode();
      if (SizeProperty.Length != 0) hash ^= SizeProperty.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeScale != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SizeScale);
      }
      if (Red != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Red);
      }
      if (Green != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Green);
      }
      if (Blue != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Blue);
      }
      if (Alpha != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Alpha);
      }
      if (SizeProperty.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SizeProperty);
      }
      if (Height != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Height);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeScale != 0D) {
        size += 1 + 8;
      }
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Red);
      }
      if (Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Green);
      }
      if (Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blue);
      }
      if (Alpha != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Alpha);
      }
      if (SizeProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeProperty);
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsHeatmapTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeScale != 0D) {
        SizeScale = other.SizeScale;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.Green != 0) {
        Green = other.Green;
      }
      if (other.Blue != 0) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0) {
        Alpha = other.Alpha;
      }
      if (other.SizeProperty.Length != 0) {
        SizeProperty = other.SizeProperty;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SizeScale = input.ReadDouble();
            break;
          }
          case 16: {
            Red = input.ReadUInt32();
            break;
          }
          case 24: {
            Green = input.ReadUInt32();
            break;
          }
          case 32: {
            Blue = input.ReadUInt32();
            break;
          }
          case 40: {
            Alpha = input.ReadUInt32();
            break;
          }
          case 50: {
            SizeProperty = input.ReadString();
            break;
          }
          case 57: {
            Height = input.ReadDouble();
            break;
          }
          case 66: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsLineGraphTileConfig : pb::IMessage<Heuristic4_ScomPerfAsLineGraphTileConfig> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig>(() => new Heuristic4_ScomPerfAsLineGraphTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig(Heuristic4_ScomPerfAsLineGraphTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig Clone() {
      return new Heuristic4_ScomPerfAsLineGraphTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsLineGraphTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsLineGraphTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsLineGraphTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsLineGraphTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsLineGraphTileConfig_Context : pb::IMessage<Heuristic4_ScomPerfAsLineGraphTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig_Context> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig_Context>(() => new Heuristic4_ScomPerfAsLineGraphTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsLineGraphTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig_Context(Heuristic4_ScomPerfAsLineGraphTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphTileConfig_Context Clone() {
      return new Heuristic4_ScomPerfAsLineGraphTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsLineGraphTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsLineGraphTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsLineGraphTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsLineGraphReportTileConfig : pb::IMessage<Heuristic4_ScomPerfAsLineGraphReportTileConfig> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsLineGraphReportTileConfig> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsLineGraphReportTileConfig>(() => new Heuristic4_ScomPerfAsLineGraphReportTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsLineGraphReportTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphReportTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphReportTileConfig(Heuristic4_ScomPerfAsLineGraphReportTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsLineGraphReportTileConfig Clone() {
      return new Heuristic4_ScomPerfAsLineGraphReportTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsLineGraphReportTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsLineGraphReportTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsLineGraphReportTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsSparklinesTileConfig : pb::IMessage<Heuristic4_ScomPerfAsSparklinesTileConfig> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig>(() => new Heuristic4_ScomPerfAsSparklinesTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig(Heuristic4_ScomPerfAsSparklinesTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig Clone() {
      return new Heuristic4_ScomPerfAsSparklinesTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsSparklinesTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsSparklinesTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsSparklinesTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_ScomPerfAsSparklinesTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic4_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic4_ScomPerfAsSparklinesTileConfig_Context : pb::IMessage<Heuristic4_ScomPerfAsSparklinesTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig_Context> _parser = new pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig_Context>(() => new Heuristic4_ScomPerfAsSparklinesTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic4_ScomPerfAsSparklinesTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig_Context(Heuristic4_ScomPerfAsSparklinesTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic4_ScomPerfAsSparklinesTileConfig_Context Clone() {
      return new Heuristic4_ScomPerfAsSparklinesTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic4_ScomPerfAsSparklinesTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic4_ScomPerfAsSparklinesTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic4_ScomPerfAsSparklinesTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_CommonPerformanceDisplay : pb::IMessage<Heuristic5_CommonPerformanceDisplay> {
    private static readonly pb::MessageParser<Heuristic5_CommonPerformanceDisplay> _parser = new pb::MessageParser<Heuristic5_CommonPerformanceDisplay>(() => new Heuristic5_CommonPerformanceDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_CommonPerformanceDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_CommonPerformanceDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_CommonPerformanceDisplay(Heuristic5_CommonPerformanceDisplay other) : this() {
      range_ = other.range_;
      unitKey_ = other.unitKey_.Clone();
      height_ = other.height_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      linkTemplate_ = other.linkTemplate_;
      labelTemplate_ = other.labelTemplate_;
      Rangemax = other.rangemax_ != null ? other.Rangemax.Clone() : null;
      Rangemin = other.rangemin_ != null ? other.Rangemin.Clone() : null;
      metadata_ = other.metadata_.Clone();
      showKey_ = other.showKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_CommonPerformanceDisplay Clone() {
      return new Heuristic5_CommonPerformanceDisplay(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private string range_ = "";
    /// <summary>
    /// e.g. fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Range {
      get { return range_; }
      set {
        range_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_key" field.</summary>
    public const int UnitKeyFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unitKey_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unitKey_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// unitkey instead of unitKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnitKey {
      get { return unitKey_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_template" field.</summary>
    public const int LinkTemplateFieldNumber = 6;
    private string linkTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkTemplate {
      get { return linkTemplate_; }
      set {
        linkTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 7;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rangemax" field.</summary>
    public const int RangemaxFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Value rangemax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Rangemax {
      get { return rangemax_; }
      set {
        rangemax_ = value;
      }
    }

    /// <summary>Field number for the "rangemin" field.</summary>
    public const int RangeminFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Value rangemin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Rangemin {
      get { return rangemin_; }
      set {
        rangemin_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 82);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> metadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Unknown/unverified content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "show_key" field.</summary>
    public const int ShowKeyFieldNumber = 11;
    private string showKey_ = "";
    /// <summary>
    /// Incorrectly provided as string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowKey {
      get { return showKey_; }
      set {
        showKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_CommonPerformanceDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_CommonPerformanceDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if(!unitKey_.Equals(other.unitKey_)) return false;
      if (Height != other.Height) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (LinkTemplate != other.LinkTemplate) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      if (!object.Equals(Rangemax, other.Rangemax)) return false;
      if (!object.Equals(Rangemin, other.Rangemin)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (ShowKey != other.ShowKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range.Length != 0) hash ^= Range.GetHashCode();
      hash ^= unitKey_.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (LinkTemplate.Length != 0) hash ^= LinkTemplate.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      if (rangemax_ != null) hash ^= Rangemax.GetHashCode();
      if (rangemin_ != null) hash ^= Rangemin.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (ShowKey.Length != 0) hash ^= ShowKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Range);
      }
      unitKey_.WriteTo(output, _repeated_unitKey_codec);
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LabelTemplate);
      }
      if (rangemax_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Rangemax);
      }
      if (rangemin_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Rangemin);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (ShowKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShowKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Range);
      }
      size += unitKey_.CalculateSize(_repeated_unitKey_codec);
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      if (rangemax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rangemax);
      }
      if (rangemin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rangemin);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (ShowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_CommonPerformanceDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Range.Length != 0) {
        Range = other.Range;
      }
      unitKey_.Add(other.unitKey_);
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.LinkTemplate.Length != 0) {
        LinkTemplate = other.LinkTemplate;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
      if (other.rangemax_ != null) {
        if (rangemax_ == null) {
          rangemax_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Rangemax.MergeFrom(other.Rangemax);
      }
      if (other.rangemin_ != null) {
        if (rangemin_ == null) {
          rangemin_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Rangemin.MergeFrom(other.Rangemin);
      }
      metadata_.Add(other.metadata_);
      if (other.ShowKey.Length != 0) {
        ShowKey = other.ShowKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Range = input.ReadString();
            break;
          }
          case 18: {
            unitKey_.AddEntriesFrom(input, _repeated_unitKey_codec);
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            LinkTemplate = input.ReadString();
            break;
          }
          case 58: {
            LabelTemplate = input.ReadString();
            break;
          }
          case 66: {
            if (rangemax_ == null) {
              rangemax_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(rangemax_);
            break;
          }
          case 74: {
            if (rangemin_ == null) {
              rangemin_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(rangemin_);
            break;
          }
          case 82: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 90: {
            ShowKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsBarTileConfig : pb::IMessage<Heuristic5_ScomPerfAsBarTileConfig> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig>(() => new Heuristic5_ScomPerfAsBarTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig(Heuristic5_ScomPerfAsBarTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig Clone() {
      return new Heuristic5_ScomPerfAsBarTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsBarTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsBarTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (context_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsBarTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsBarTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsBarTileConfig_Context : pb::IMessage<Heuristic5_ScomPerfAsBarTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig_Context> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig_Context>(() => new Heuristic5_ScomPerfAsBarTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsBarTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig_Context(Heuristic5_ScomPerfAsBarTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsBarTileConfig_Context Clone() {
      return new Heuristic5_ScomPerfAsBarTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsBarTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsBarTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsBarTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsHeatmapTileConfig : pb::IMessage<Heuristic5_ScomPerfAsHeatmapTileConfig> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig>(() => new Heuristic5_ScomPerfAsHeatmapTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig(Heuristic5_ScomPerfAsHeatmapTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig Clone() {
      return new Heuristic5_ScomPerfAsHeatmapTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsHeatmapTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsHeatmapTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsHeatmapTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsHeatmapTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsHeatmapTileConfig_Context : pb::IMessage<Heuristic5_ScomPerfAsHeatmapTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Context> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Context>(() => new Heuristic5_ScomPerfAsHeatmapTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Context(Heuristic5_ScomPerfAsHeatmapTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Context Clone() {
      return new Heuristic5_ScomPerfAsHeatmapTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsHeatmapTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsHeatmapTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsHeatmapTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsHeatmapTileConfig_Display : pb::IMessage<Heuristic5_ScomPerfAsHeatmapTileConfig_Display> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Display> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Display>(() => new Heuristic5_ScomPerfAsHeatmapTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsHeatmapTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Display(Heuristic5_ScomPerfAsHeatmapTileConfig_Display other) : this() {
      sizeScale_ = other.sizeScale_;
      Red = other.red_ != null ? other.Red.Clone() : null;
      Green = other.green_ != null ? other.Green.Clone() : null;
      Blue = other.blue_ != null ? other.Blue.Clone() : null;
      Alpha = other.alpha_ != null ? other.Alpha.Clone() : null;
      sizeProperty_ = other.sizeProperty_;
      Height = other.height_ != null ? other.Height.Clone() : null;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsHeatmapTileConfig_Display Clone() {
      return new Heuristic5_ScomPerfAsHeatmapTileConfig_Display(this);
    }

    /// <summary>Field number for the "size_scale" field.</summary>
    public const int SizeScaleFieldNumber = 1;
    private double sizeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeScale {
      get { return sizeScale_; }
      set {
        sizeScale_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Value red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Value blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Value alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "size_property" field.</summary>
    public const int SizePropertyFieldNumber = 6;
    private string sizeProperty_ = "";
    /// <summary>
    /// e.g. properties.isVirtualNode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SizeProperty {
      get { return sizeProperty_; }
      set {
        sizeProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Value height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 8;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsHeatmapTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsHeatmapTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeScale != other.SizeScale) return false;
      if (!object.Equals(Red, other.Red)) return false;
      if (!object.Equals(Green, other.Green)) return false;
      if (!object.Equals(Blue, other.Blue)) return false;
      if (!object.Equals(Alpha, other.Alpha)) return false;
      if (SizeProperty != other.SizeProperty) return false;
      if (!object.Equals(Height, other.Height)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeScale != 0D) hash ^= SizeScale.GetHashCode();
      if (red_ != null) hash ^= Red.GetHashCode();
      if (green_ != null) hash ^= Green.GetHashCode();
      if (blue_ != null) hash ^= Blue.GetHashCode();
      if (alpha_ != null) hash ^= Alpha.GetHashCode();
      if (SizeProperty.Length != 0) hash ^= SizeProperty.GetHashCode();
      if (height_ != null) hash ^= Height.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeScale != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SizeScale);
      }
      if (red_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Red);
      }
      if (green_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Green);
      }
      if (blue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Blue);
      }
      if (alpha_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Alpha);
      }
      if (SizeProperty.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SizeProperty);
      }
      if (height_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Height);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeScale != 0D) {
        size += 1 + 8;
      }
      if (red_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Red);
      }
      if (green_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Green);
      }
      if (blue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blue);
      }
      if (alpha_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alpha);
      }
      if (SizeProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SizeProperty);
      }
      if (height_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Height);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsHeatmapTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.SizeScale != 0D) {
        SizeScale = other.SizeScale;
      }
      if (other.red_ != null) {
        if (red_ == null) {
          red_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Red.MergeFrom(other.Red);
      }
      if (other.green_ != null) {
        if (green_ == null) {
          green_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Green.MergeFrom(other.Green);
      }
      if (other.blue_ != null) {
        if (blue_ == null) {
          blue_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Blue.MergeFrom(other.Blue);
      }
      if (other.alpha_ != null) {
        if (alpha_ == null) {
          alpha_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Alpha.MergeFrom(other.Alpha);
      }
      if (other.SizeProperty.Length != 0) {
        SizeProperty = other.SizeProperty;
      }
      if (other.height_ != null) {
        if (height_ == null) {
          height_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Height.MergeFrom(other.Height);
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SizeScale = input.ReadDouble();
            break;
          }
          case 18: {
            if (red_ == null) {
              red_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(red_);
            break;
          }
          case 26: {
            if (green_ == null) {
              green_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(green_);
            break;
          }
          case 34: {
            if (blue_ == null) {
              blue_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(blue_);
            break;
          }
          case 42: {
            if (alpha_ == null) {
              alpha_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(alpha_);
            break;
          }
          case 50: {
            SizeProperty = input.ReadString();
            break;
          }
          case 58: {
            if (height_ == null) {
              height_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(height_);
            break;
          }
          case 66: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsLineGraphTileConfig : pb::IMessage<Heuristic5_ScomPerfAsLineGraphTileConfig> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig>(() => new Heuristic5_ScomPerfAsLineGraphTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig(Heuristic5_ScomPerfAsLineGraphTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig Clone() {
      return new Heuristic5_ScomPerfAsLineGraphTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsLineGraphTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsLineGraphTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsLineGraphTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsLineGraphTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsLineGraphTileConfig_Context : pb::IMessage<Heuristic5_ScomPerfAsLineGraphTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig_Context> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig_Context>(() => new Heuristic5_ScomPerfAsLineGraphTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsLineGraphTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig_Context(Heuristic5_ScomPerfAsLineGraphTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphTileConfig_Context Clone() {
      return new Heuristic5_ScomPerfAsLineGraphTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsLineGraphTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsLineGraphTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsLineGraphTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsLineGraphReportTileConfig : pb::IMessage<Heuristic5_ScomPerfAsLineGraphReportTileConfig> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsLineGraphReportTileConfig> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsLineGraphReportTileConfig>(() => new Heuristic5_ScomPerfAsLineGraphReportTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsLineGraphReportTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphReportTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphReportTileConfig(Heuristic5_ScomPerfAsLineGraphReportTileConfig other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsLineGraphReportTileConfig Clone() {
      return new Heuristic5_ScomPerfAsLineGraphReportTileConfig(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsLineGraphReportTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsLineGraphReportTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsLineGraphReportTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsSparklinesTileConfig : pb::IMessage<Heuristic5_ScomPerfAsSparklinesTileConfig> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig>(() => new Heuristic5_ScomPerfAsSparklinesTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig(Heuristic5_ScomPerfAsSparklinesTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig Clone() {
      return new Heuristic5_ScomPerfAsSparklinesTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsSparklinesTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsSparklinesTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsSparklinesTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_ScomPerfAsSparklinesTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.Heuristic5_CommonPerformanceDisplay();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heuristic5_ScomPerfAsSparklinesTileConfig_Context : pb::IMessage<Heuristic5_ScomPerfAsSparklinesTileConfig_Context> {
    private static readonly pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig_Context> _parser = new pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig_Context>(() => new Heuristic5_ScomPerfAsSparklinesTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heuristic5_ScomPerfAsSparklinesTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.HeuristicsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig_Context(Heuristic5_ScomPerfAsSparklinesTileConfig_Context other) : this() {
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heuristic5_ScomPerfAsSparklinesTileConfig_Context Clone() {
      return new Heuristic5_ScomPerfAsSparklinesTileConfig_Context(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonScope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heuristic5_ScomPerfAsSparklinesTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heuristic5_ScomPerfAsSparklinesTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heuristic5_ScomPerfAsSparklinesTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.CommonScope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
