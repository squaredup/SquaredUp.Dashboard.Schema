// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from dynamic.proto</summary>
  public static partial class DynamicReflection {

    #region Descriptor
    /// <summary>File descriptor for dynamic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DynamicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1keW5hbWljLnByb3RvEglzcXVhcmVkdXAaHGdvb2dsZS9wcm90b2J1Zi9z",
            "dHJ1Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxoL",
            "c2NvcGUucHJvdG8aDWNvbnRleHQucHJvdG8aD3RpbWVmcmFtZS5wcm90bxoY",
            "cGVyZm9ybWFuY2Vfc2hhcmVkLnByb3RvIn8KFkR5bmFtaWNUYWJsZVRpbGVD",
            "b25maWcSKQoHY29udGV4dBgBIAEoCzIYLnNxdWFyZWR1cC5Db21tb25Db250",
            "ZXh0EjoKB2Rpc3BsYXkYAiABKAsyKS5zcXVhcmVkdXAuRHluYW1pY1RhYmxl",
            "VGlsZUNvbmZpZ19EaXNwbGF5InoKHkR5bmFtaWNUYWJsZVRpbGVDb25maWdf",
            "RGlzcGxheRJKCgtwZXJzcGVjdGl2ZRgBIAEoCzI1LnNxdWFyZWR1cC5EeW5h",
            "bWljVGFibGVUaWxlQ29uZmlnX0Rpc3BsYXlfUGVyc3BlY3RpdmUSDAoEem9v",
            "bRgCIAEoCSJWCipEeW5hbWljVGFibGVUaWxlQ29uZmlnX0Rpc3BsYXlfUGVy",
            "c3BlY3RpdmUSKAoCaWQYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUimwEKEE1hdHJpeFRpbGVDb25maWcSKQoHY29udGV4dBgBIAEoCzIY",
            "LnNxdWFyZWR1cC5Db21tb25Db250ZXh0EjQKB2Rpc3BsYXkYAiABKAsyIy5z",
            "cXVhcmVkdXAuTWF0cml4VGlsZUNvbmZpZ19EaXNwbGF5EiYKBnNvdXJjZRgD",
            "IAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZSLVAQoYTWF0cml4VGlsZUNv",
            "bmZpZ19EaXNwbGF5EgwKBG1vZGUYASABKAkSEQoJcmVuZGVyaW5nGAIgASgJ",
            "EhUKDWZ1bGxfcm93X2xpbmsYAyABKAgSLQoHY29sdW1ucxgEIAMoCzIcLnNx",
            "dWFyZWR1cC5NYXRyaXhUaWxlX0NvbHVtbhJECgtwZXJzcGVjdGl2ZRgFIAEo",
            "CzIvLnNxdWFyZWR1cC5NYXRyaXhUaWxlQ29uZmlnX0Rpc3BsYXlfUGVyc3Bl",
            "Y3RpdmUSDAoEem9vbRgGIAEoCSIyCiRNYXRyaXhUaWxlQ29uZmlnX0Rpc3Bs",
            "YXlfUGVyc3BlY3RpdmUSCgoCaWQYASABKAkiWQoRTWF0cml4VGlsZV9Db2x1",
            "bW4SDQoFX3R5cGUYASABKAkSDQoFdGl0bGUYAiABKAkSJgoGY29uZmlnGAMg",
            "ASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlIrgBChRNYXRyaXhUaWxlX1Ry",
            "YW5zZm9ybRIQCghvcGVyYXRvchgBIAEoCRJDCgpwYXJhbWV0ZXJzGAIgAygL",
            "Mi8uc3F1YXJlZHVwLk1hdHJpeFRpbGVfVHJhbnNmb3JtLlBhcmFtZXRlcnNF",
            "bnRyeRpJCg9QYXJhbWV0ZXJzRW50cnkSCwoDa2V5GAEgASgJEiUKBXZhbHVl",
            "GAIgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlOgI4ASLXAQojQ2VsbFRp",
            "bGVfU2NvbVBlcmZBc1NwYXJrbGluZV9Db25maWcSMgoGc291cmNlGAEgASgL",
            "MiIuc3F1YXJlZHVwLkNvbW1vblBlcmZvcm1hbmNlU291cmNlEkcKB2Rpc3Bs",
            "YXkYAiABKAsyNi5zcXVhcmVkdXAuQ2VsbFRpbGVfU2NvbVBlcmZBc1NwYXJr",
            "bGluZV9Db25maWdfRGlzcGxheRIzCgp0cmFuc2Zvcm1zGAMgAygLMh8uc3F1",
            "YXJlZHVwLk1hdHJpeFRpbGVfVHJhbnNmb3JtIkUKK0NlbGxUaWxlX1Njb21Q",
            "ZXJmQXNTcGFya2xpbmVfQ29uZmlnX0Rpc3BsYXkSFgoObGFiZWxfdGVtcGxh",
            "dGUYASABKAkitwEKE0NlbGxUaWxlX0Jhcl9Db25maWcSMgoGc291cmNlGAEg",
            "ASgLMiIuc3F1YXJlZHVwLkNvbW1vblBlcmZvcm1hbmNlU291cmNlEjcKB2Rp",
            "c3BsYXkYAiABKAsyJi5zcXVhcmVkdXAuQ2VsbFRpbGVfQmFyX0NvbmZpZ19E",
            "aXNwbGF5EjMKCnRyYW5zZm9ybXMYAyADKAsyHy5zcXVhcmVkdXAuTWF0cml4",
            "VGlsZV9UcmFuc2Zvcm0iNQobQ2VsbFRpbGVfQmFyX0NvbmZpZ19EaXNwbGF5",
            "EhYKDnZhbHVlX3RlbXBsYXRlGAEgASgJIoEBChNDZWxsVGlsZV9TbGFfQ29u",
            "ZmlnEjUKBnNvdXJjZRgBIAEoCzIlLnNxdWFyZWR1cC5DZWxsVGlsZV9TbGFf",
            "Q29uZmlnX1NvdXJjZRIzCgp0cmFuc2Zvcm1zGAIgAygLMh8uc3F1YXJlZHVw",
            "Lk1hdHJpeFRpbGVfVHJhbnNmb3JtIlsKGkNlbGxUaWxlX1NsYV9Db25maWdf",
            "U291cmNlEg4KBnNsb19pZBgBIAEoCRItCgl0aW1lZnJhbWUYAiABKAsyGi5z",
            "cXVhcmVkdXAuQ29tbW9uVGltZWZyYW1lIn4KFENlbGxUaWxlX1RleHRfQ29u",
            "ZmlnEjEKB2Rpc3BsYXkYASABKAsyIC5zcXVhcmVkdXAuQ2VsbFRpbGVfVGV4",
            "dF9EaXNwbGF5EjMKCnRyYW5zZm9ybXMYAyADKAsyHy5zcXVhcmVkdXAuTWF0",
            "cml4VGlsZV9UcmFuc2Zvcm0iRQoVQ2VsbFRpbGVfVGV4dF9EaXNwbGF5EhgK",
            "EGNvbnRlbnRfdGVtcGxhdGUYASABKAkSEgoKY2VsbF93aWR0aBgDIAEoCSKS",
            "AQoeQ2VsbFRpbGVfU2lnbmFsU3RyZW5ndGhfQ29uZmlnEjsKB2Rpc3BsYXkY",
            "ASABKAsyKi5zcXVhcmVkdXAuQ2VsbFRpbGVfU2lnbmFsU3RyZW5ndGhfRGlz",
            "cGxheRIzCgp0cmFuc2Zvcm1zGAMgAygLMh8uc3F1YXJlZHVwLk1hdHJpeFRp",
            "bGVfVHJhbnNmb3JtIlgKH0NlbGxUaWxlX1NpZ25hbFN0cmVuZ3RoX0Rpc3Bs",
            "YXkSFgoOdmFsdWVfcHJvcGVydHkYASABKAkSDgoGaGVpZ2h0GAIgASgFEg0K",
            "BXdpZHRoGAMgASgFIrgBChdDZWxsVGlsZV9Nb25pdG9yX0NvbmZpZxIyCgZz",
            "b3VyY2UYASABKAsyIi5zcXVhcmVkdXAuQ2VsbFRpbGVfTW9uaXRvcl9Tb3Vy",
            "Y2USNAoHZGlzcGxheRgCIAEoCzIjLnNxdWFyZWR1cC5DZWxsVGlsZV9Nb25p",
            "dG9yX0Rpc3BsYXkSMwoKdHJhbnNmb3JtcxgDIAMoCzIfLnNxdWFyZWR1cC5N",
            "YXRyaXhUaWxlX1RyYW5zZm9ybSIuChdDZWxsVGlsZV9Nb25pdG9yX1NvdXJj",
            "ZRITCgttb25pdG9yX2lkcxgBIAMoCSIuChhDZWxsVGlsZV9Nb25pdG9yX0Rp",
            "c3BsYXkSEgoKc2hvd19sYWJlbBgBIAEoCCKCAQoWQ2VsbFRpbGVfU3RhdHVz",
            "X0NvbmZpZxIzCgdkaXNwbGF5GAIgASgLMiIuc3F1YXJlZHVwLkNlbGxUaWxl",
            "X1N0YXR1c19EaXNwbGF5EjMKCnRyYW5zZm9ybXMYAyADKAsyHy5zcXVhcmVk",
            "dXAuTWF0cml4VGlsZV9UcmFuc2Zvcm0iXwoXQ2VsbFRpbGVfU3RhdHVzX0Rp",
            "c3BsYXkSGAoQc2hvd19zdGF0dXNfaWNvbhgBIAEoCBIWCg5sYWJlbF90ZW1w",
            "bGF0ZRgCIAEoCRISCgpjZWxsX3dpZHRoGAMgASgJIowBChtDZWxsVGlsZV9T",
            "dGF0dXNCbG9ja19Db25maWcSOAoHZGlzcGxheRgCIAEoCzInLnNxdWFyZWR1",
            "cC5DZWxsVGlsZV9TdGF0dXNCbG9ja19EaXNwbGF5EjMKCnRyYW5zZm9ybXMY",
            "AyADKAsyHy5zcXVhcmVkdXAuTWF0cml4VGlsZV9UcmFuc2Zvcm0iSgocQ2Vs",
            "bFRpbGVfU3RhdHVzQmxvY2tfRGlzcGxheRISCgpmdWxsX3dpZHRoGAEgASgI",
            "EhYKDmxhYmVsX3RlbXBsYXRlGAIgASgJItMBCiBDZWxsVGlsZV9UaW1lc2Vy",
            "aWVzQmxvY2tzX0NvbmZpZxI7CgZzb3VyY2UYASABKAsyKy5zcXVhcmVkdXAu",
            "Q2VsbFRpbGVfVGltZXNlcmllc0Jsb2Nrc19Tb3VyY2USPQoHZGlzcGxheRgC",
            "IAEoCzIsLnNxdWFyZWR1cC5DZWxsVGlsZV9UaW1lc2VyaWVzQmxvY2tzX0Rp",
            "c3BsYXkSMwoKdHJhbnNmb3JtcxgDIAMoCzIfLnNxdWFyZWR1cC5NYXRyaXhU",
            "aWxlX1RyYW5zZm9ybSJaCiFDZWxsVGlsZV9UaW1lc2VyaWVzQmxvY2tzX0Rp",
            "c3BsYXkSDQoFd2lkdGgYASABKAUSEgoKZnVsbF93aWR0aBgCIAEoCBISCgpj",
            "ZWxsX3dpZHRoGAMgASgJImYKIENlbGxUaWxlX1RpbWVzZXJpZXNCbG9ja3Nf",
            "U291cmNlEhMKC21vbml0b3JfaWRzGAEgAygJEi0KCXRpbWVmcmFtZRgEIAEo",
            "CzIaLnNxdWFyZWR1cC5Db21tb25UaW1lZnJhbWUiygEKHUNlbGxUaWxlX01v",
            "bml0b3JTdGF0dXNfQ29uZmlnEjgKBnNvdXJjZRgBIAEoCzIoLnNxdWFyZWR1",
            "cC5DZWxsVGlsZV9Nb25pdG9yU3RhdHVzX1NvdXJjZRI6CgdkaXNwbGF5GAIg",
            "ASgLMikuc3F1YXJlZHVwLkNlbGxUaWxlX01vbml0b3JTdGF0dXNfRGlzcGxh",
            "eRIzCgp0cmFuc2Zvcm1zGAMgAygLMh8uc3F1YXJlZHVwLk1hdHJpeFRpbGVf",
            "VHJhbnNmb3JtIjQKHUNlbGxUaWxlX01vbml0b3JTdGF0dXNfU291cmNlEhMK",
            "C21vbml0b3JfaWRzGAEgAygJIl8KHkNlbGxUaWxlX01vbml0b3JTdGF0dXNf",
            "RGlzcGxheRISCgpmdWxsX3dpZHRoGAEgASgIEhUKDWxpbmtfdGVtcGxhdGUY",
            "AiABKAkSEgoKY2VsbF93aWR0aBgDIAEoCUIdqgIaU3F1YXJlZFVwLkRhc2hi",
            "b2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ContextReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.PerformanceSharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig), global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig.Parser, new[]{ "Context", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display), global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display.Parser, new[]{ "Perspective", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective), global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MatrixTileConfig), global::SquaredUp.Dashboard.Schema.MatrixTileConfig.Parser, new[]{ "Context", "Display", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display), global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display.Parser, new[]{ "Mode", "Rendering", "FullRowLink", "Columns", "Perspective", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective), global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MatrixTile_Column), global::SquaredUp.Dashboard.Schema.MatrixTile_Column.Parser, new[]{ "Type", "Title", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.MatrixTile_Transform), global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser, new[]{ "Operator", "Parameters" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config), global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config.Parser, new[]{ "Source", "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display), global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display.Parser, new[]{ "LabelTemplate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config), global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config.Parser, new[]{ "Source", "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display), global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display.Parser, new[]{ "ValueTemplate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config), global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config.Parser, new[]{ "Source", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source), global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source.Parser, new[]{ "SloId", "Timeframe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Text_Config), global::SquaredUp.Dashboard.Schema.CellTile_Text_Config.Parser, new[]{ "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Text_Display), global::SquaredUp.Dashboard.Schema.CellTile_Text_Display.Parser, new[]{ "ContentTemplate", "CellWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Config), global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Config.Parser, new[]{ "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display), global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display.Parser, new[]{ "ValueProperty", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Config), global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Config.Parser, new[]{ "Source", "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source), global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source.Parser, new[]{ "MonitorIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display), global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display.Parser, new[]{ "ShowLabel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Status_Config), global::SquaredUp.Dashboard.Schema.CellTile_Status_Config.Parser, new[]{ "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_Status_Display), global::SquaredUp.Dashboard.Schema.CellTile_Status_Display.Parser, new[]{ "ShowStatusIcon", "LabelTemplate", "CellWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Config), global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Config.Parser, new[]{ "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display), global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display.Parser, new[]{ "FullWidth", "LabelTemplate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Config), global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Config.Parser, new[]{ "Source", "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display), global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display.Parser, new[]{ "Width", "FullWidth", "CellWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source), global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source.Parser, new[]{ "MonitorIds", "Timeframe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Config), global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Config.Parser, new[]{ "Source", "Display", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source), global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source.Parser, new[]{ "MonitorIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display), global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display.Parser, new[]{ "FullWidth", "LinkTemplate", "CellWidth" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DynamicTableTileConfig : pb::IMessage<DynamicTableTileConfig> {
    private static readonly pb::MessageParser<DynamicTableTileConfig> _parser = new pb::MessageParser<DynamicTableTileConfig>(() => new DynamicTableTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicTableTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig(DynamicTableTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig Clone() {
      return new DynamicTableTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicTableTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicTableTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicTableTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DynamicTableTileConfig_Display : pb::IMessage<DynamicTableTileConfig_Display> {
    private static readonly pb::MessageParser<DynamicTableTileConfig_Display> _parser = new pb::MessageParser<DynamicTableTileConfig_Display>(() => new DynamicTableTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicTableTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display(DynamicTableTileConfig_Display other) : this() {
      Perspective = other.perspective_ != null ? other.Perspective.Clone() : null;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display Clone() {
      return new DynamicTableTileConfig_Display(this);
    }

    /// <summary>Field number for the "perspective" field.</summary>
    public const int PerspectiveFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective perspective_;
    /// <summary>
    /// Perspective to display (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective Perspective {
      get { return perspective_; }
      set {
        perspective_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 2;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicTableTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicTableTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Perspective, other.Perspective)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (perspective_ != null) hash ^= Perspective.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (perspective_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Perspective);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (perspective_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Perspective);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicTableTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.perspective_ != null) {
        if (perspective_ == null) {
          perspective_ = new global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective();
        }
        Perspective.MergeFrom(other.Perspective);
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (perspective_ == null) {
              perspective_ = new global::SquaredUp.Dashboard.Schema.DynamicTableTileConfig_Display_Perspective();
            }
            input.ReadMessage(perspective_);
            break;
          }
          case 18: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DynamicTableTileConfig_Display_Perspective : pb::IMessage<DynamicTableTileConfig_Display_Perspective> {
    private static readonly pb::MessageParser<DynamicTableTileConfig_Display_Perspective> _parser = new pb::MessageParser<DynamicTableTileConfig_Display_Perspective>(() => new DynamicTableTileConfig_Display_Perspective());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicTableTileConfig_Display_Perspective> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display_Perspective() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display_Perspective(DynamicTableTileConfig_Display_Perspective other) : this() {
      Id = other.Id;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicTableTileConfig_Display_Perspective Clone() {
      return new DynamicTableTileConfig_Display_Perspective(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_id_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string id_;
    /// <summary>
    /// ID of any related perspective
    /// Default is null, so this is string value rather than string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicTableTileConfig_Display_Perspective);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicTableTileConfig_Display_Perspective other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        _single_id_codec.WriteTagAndValue(output, Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += _single_id_codec.CalculateSizeWithTag(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicTableTileConfig_Display_Perspective other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null || other.Id != "") {
          Id = other.Id;
        }
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            string value = _single_id_codec.Read(input);
            if (id_ == null || value != "") {
              Id = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// tile/matrix
  /// </summary>
  public sealed partial class MatrixTileConfig : pb::IMessage<MatrixTileConfig> {
    private static readonly pb::MessageParser<MatrixTileConfig> _parser = new pb::MessageParser<MatrixTileConfig>(() => new MatrixTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatrixTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig(MatrixTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig Clone() {
      return new MatrixTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value source_;
    /// <summary>
    /// Generally empty (source: {})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatrixTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatrixTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatrixTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            if (source_ == null) {
              source_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatrixTileConfig_Display : pb::IMessage<MatrixTileConfig_Display> {
    private static readonly pb::MessageParser<MatrixTileConfig_Display> _parser = new pb::MessageParser<MatrixTileConfig_Display>(() => new MatrixTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatrixTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display(MatrixTileConfig_Display other) : this() {
      mode_ = other.mode_;
      rendering_ = other.rendering_;
      fullRowLink_ = other.fullRowLink_;
      columns_ = other.columns_.Clone();
      Perspective = other.perspective_ != null ? other.Perspective.Clone() : null;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display Clone() {
      return new MatrixTileConfig_Display(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private string mode_ = "";
    /// <summary>
    /// e.g. "Large"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rendering" field.</summary>
    public const int RenderingFieldNumber = 2;
    private string rendering_ = "";
    /// <summary>
    /// e.g. "dyanmic"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rendering {
      get { return rendering_; }
      set {
        rendering_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full_row_link" field.</summary>
    public const int FullRowLinkFieldNumber = 3;
    private bool fullRowLink_;
    /// <summary>
    /// whether to "always link to row object"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullRowLink {
      get { return fullRowLink_; }
      set {
        fullRowLink_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(34, global::SquaredUp.Dashboard.Schema.MatrixTile_Column.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Column> columns_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Column> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "perspective" field.</summary>
    public const int PerspectiveFieldNumber = 5;
    private global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective perspective_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective Perspective {
      get { return perspective_; }
      set {
        perspective_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 6;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatrixTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatrixTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Rendering != other.Rendering) return false;
      if (FullRowLink != other.FullRowLink) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!object.Equals(Perspective, other.Perspective)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (Rendering.Length != 0) hash ^= Rendering.GetHashCode();
      if (FullRowLink != false) hash ^= FullRowLink.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (perspective_ != null) hash ^= Perspective.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mode);
      }
      if (Rendering.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Rendering);
      }
      if (FullRowLink != false) {
        output.WriteRawTag(24);
        output.WriteBool(FullRowLink);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (perspective_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Perspective);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (Rendering.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rendering);
      }
      if (FullRowLink != false) {
        size += 1 + 1;
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (perspective_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Perspective);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatrixTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      if (other.Rendering.Length != 0) {
        Rendering = other.Rendering;
      }
      if (other.FullRowLink != false) {
        FullRowLink = other.FullRowLink;
      }
      columns_.Add(other.columns_);
      if (other.perspective_ != null) {
        if (perspective_ == null) {
          perspective_ = new global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective();
        }
        Perspective.MergeFrom(other.Perspective);
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mode = input.ReadString();
            break;
          }
          case 18: {
            Rendering = input.ReadString();
            break;
          }
          case 24: {
            FullRowLink = input.ReadBool();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 42: {
            if (perspective_ == null) {
              perspective_ = new global::SquaredUp.Dashboard.Schema.MatrixTileConfig_Display_Perspective();
            }
            input.ReadMessage(perspective_);
            break;
          }
          case 50: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatrixTileConfig_Display_Perspective : pb::IMessage<MatrixTileConfig_Display_Perspective> {
    private static readonly pb::MessageParser<MatrixTileConfig_Display_Perspective> _parser = new pb::MessageParser<MatrixTileConfig_Display_Perspective>(() => new MatrixTileConfig_Display_Perspective());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatrixTileConfig_Display_Perspective> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display_Perspective() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display_Perspective(MatrixTileConfig_Display_Perspective other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTileConfig_Display_Perspective Clone() {
      return new MatrixTileConfig_Display_Perspective(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the perspective to use for the matrix tile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatrixTileConfig_Display_Perspective);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatrixTileConfig_Display_Perspective other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatrixTileConfig_Display_Perspective other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatrixTile_Column : pb::IMessage<MatrixTile_Column> {
    private static readonly pb::MessageParser<MatrixTile_Column> _parser = new pb::MessageParser<MatrixTile_Column>(() => new MatrixTile_Column());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatrixTile_Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Column(MatrixTile_Column other) : this() {
      Type_ = other.Type_;
      title_ = other.title_;
      Config = other.config_ != null ? other.Config.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Column Clone() {
      return new MatrixTile_Column(this);
    }

    /// <summary>Field number for the "_type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string Type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return Type_; }
      set {
        Type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value config_;
    /// <summary>
    /// Config varying by type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatrixTile_Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatrixTile_Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Title != other.Title) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatrixTile_Column other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Config.MergeFrom(other.Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Transform type - many celltiles have 'transforms' in common
  /// which cotnains this type
  /// </summary>
  public sealed partial class MatrixTile_Transform : pb::IMessage<MatrixTile_Transform> {
    private static readonly pb::MessageParser<MatrixTile_Transform> _parser = new pb::MessageParser<MatrixTile_Transform>(() => new MatrixTile_Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatrixTile_Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Transform(MatrixTile_Transform other) : this() {
      operator_ = other.operator_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatrixTile_Transform Clone() {
      return new MatrixTile_Transform(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private string operator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Operator {
      get { return operator_; }
      set {
        operator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_parameters_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 18);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> parameters_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatrixTile_Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatrixTile_Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (!Parameters.Equals(other.Parameters)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator.Length != 0) hash ^= Operator.GetHashCode();
      hash ^= Parameters.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Operator);
      }
      parameters_.WriteTo(output, _map_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Operator);
      }
      size += parameters_.CalculateSize(_map_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatrixTile_Transform other) {
      if (other == null) {
        return;
      }
      if (other.Operator.Length != 0) {
        Operator = other.Operator;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Operator = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// celltile/scomperf-as-sparkline
  /// </summary>
  public sealed partial class CellTile_ScomPerfAsSparkline_Config : pb::IMessage<CellTile_ScomPerfAsSparkline_Config> {
    private static readonly pb::MessageParser<CellTile_ScomPerfAsSparkline_Config> _parser = new pb::MessageParser<CellTile_ScomPerfAsSparkline_Config>(() => new CellTile_ScomPerfAsSparkline_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_ScomPerfAsSparkline_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config(CellTile_ScomPerfAsSparkline_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config Clone() {
      return new CellTile_ScomPerfAsSparkline_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_ScomPerfAsSparkline_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_ScomPerfAsSparkline_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_ScomPerfAsSparkline_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_ScomPerfAsSparkline_Config_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_ScomPerfAsSparkline_Config_Display : pb::IMessage<CellTile_ScomPerfAsSparkline_Config_Display> {
    private static readonly pb::MessageParser<CellTile_ScomPerfAsSparkline_Config_Display> _parser = new pb::MessageParser<CellTile_ScomPerfAsSparkline_Config_Display>(() => new CellTile_ScomPerfAsSparkline_Config_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_ScomPerfAsSparkline_Config_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config_Display(CellTile_ScomPerfAsSparkline_Config_Display other) : this() {
      labelTemplate_ = other.labelTemplate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_ScomPerfAsSparkline_Config_Display Clone() {
      return new CellTile_ScomPerfAsSparkline_Config_Display(this);
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 1;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_ScomPerfAsSparkline_Config_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_ScomPerfAsSparkline_Config_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LabelTemplate != other.LabelTemplate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LabelTemplate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_ScomPerfAsSparkline_Config_Display other) {
      if (other == null) {
        return;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LabelTemplate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------------------------------------------------------------------------------
  /// celltile/bar
  /// </summary>
  public sealed partial class CellTile_Bar_Config : pb::IMessage<CellTile_Bar_Config> {
    private static readonly pb::MessageParser<CellTile_Bar_Config> _parser = new pb::MessageParser<CellTile_Bar_Config>(() => new CellTile_Bar_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Bar_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config(CellTile_Bar_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config Clone() {
      return new CellTile_Bar_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonPerformanceSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonPerformanceSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Bar_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Bar_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Bar_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CommonPerformanceSource();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Bar_Config_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Bar_Config_Display : pb::IMessage<CellTile_Bar_Config_Display> {
    private static readonly pb::MessageParser<CellTile_Bar_Config_Display> _parser = new pb::MessageParser<CellTile_Bar_Config_Display>(() => new CellTile_Bar_Config_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Bar_Config_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config_Display(CellTile_Bar_Config_Display other) : this() {
      valueTemplate_ = other.valueTemplate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Bar_Config_Display Clone() {
      return new CellTile_Bar_Config_Display(this);
    }

    /// <summary>Field number for the "value_template" field.</summary>
    public const int ValueTemplateFieldNumber = 1;
    private string valueTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueTemplate {
      get { return valueTemplate_; }
      set {
        valueTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Bar_Config_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Bar_Config_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueTemplate != other.ValueTemplate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueTemplate.Length != 0) hash ^= ValueTemplate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueTemplate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ValueTemplate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueTemplate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Bar_Config_Display other) {
      if (other == null) {
        return;
      }
      if (other.ValueTemplate.Length != 0) {
        ValueTemplate = other.ValueTemplate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ValueTemplate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Sla_Config : pb::IMessage<CellTile_Sla_Config> {
    private static readonly pb::MessageParser<CellTile_Sla_Config> _parser = new pb::MessageParser<CellTile_Sla_Config>(() => new CellTile_Sla_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Sla_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config(CellTile_Sla_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config Clone() {
      return new CellTile_Sla_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Sla_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Sla_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Sla_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source();
        }
        Source.MergeFrom(other.Source);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CellTile_Sla_Config_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Sla_Config_Source : pb::IMessage<CellTile_Sla_Config_Source> {
    private static readonly pb::MessageParser<CellTile_Sla_Config_Source> _parser = new pb::MessageParser<CellTile_Sla_Config_Source>(() => new CellTile_Sla_Config_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Sla_Config_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config_Source(CellTile_Sla_Config_Source other) : this() {
      sloId_ = other.sloId_;
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Sla_Config_Source Clone() {
      return new CellTile_Sla_Config_Source(this);
    }

    /// <summary>Field number for the "slo_id" field.</summary>
    public const int SloIdFieldNumber = 1;
    private string sloId_ = "";
    /// <summary>
    /// ID of the service level object to use for the SLA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SloId {
      get { return sloId_; }
      set {
        sloId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Sla_Config_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Sla_Config_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SloId != other.SloId) return false;
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SloId.Length != 0) hash ^= SloId.GetHashCode();
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SloId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SloId);
      }
      if (timeframe_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SloId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SloId);
      }
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Sla_Config_Source other) {
      if (other == null) {
        return;
      }
      if (other.SloId.Length != 0) {
        SloId = other.SloId;
      }
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SloId = input.ReadString();
            break;
          }
          case 18: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Text_Config : pb::IMessage<CellTile_Text_Config> {
    private static readonly pb::MessageParser<CellTile_Text_Config> _parser = new pb::MessageParser<CellTile_Text_Config>(() => new CellTile_Text_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Text_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Config(CellTile_Text_Config other) : this() {
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Config Clone() {
      return new CellTile_Text_Config(this);
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_Text_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Text_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Text_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Text_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (display_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Text_Config other) {
      if (other == null) {
        return;
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Text_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Text_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Text_Display : pb::IMessage<CellTile_Text_Display> {
    private static readonly pb::MessageParser<CellTile_Text_Display> _parser = new pb::MessageParser<CellTile_Text_Display>(() => new CellTile_Text_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Text_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Display(CellTile_Text_Display other) : this() {
      contentTemplate_ = other.contentTemplate_;
      cellWidth_ = other.cellWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Text_Display Clone() {
      return new CellTile_Text_Display(this);
    }

    /// <summary>Field number for the "content_template" field.</summary>
    public const int ContentTemplateFieldNumber = 1;
    private string contentTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentTemplate {
      get { return contentTemplate_; }
      set {
        contentTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cell_width" field.</summary>
    public const int CellWidthFieldNumber = 3;
    private string cellWidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellWidth {
      get { return cellWidth_; }
      set {
        cellWidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Text_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Text_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContentTemplate != other.ContentTemplate) return false;
      if (CellWidth != other.CellWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContentTemplate.Length != 0) hash ^= ContentTemplate.GetHashCode();
      if (CellWidth.Length != 0) hash ^= CellWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContentTemplate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContentTemplate);
      }
      if (CellWidth.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CellWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContentTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentTemplate);
      }
      if (CellWidth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellWidth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Text_Display other) {
      if (other == null) {
        return;
      }
      if (other.ContentTemplate.Length != 0) {
        ContentTemplate = other.ContentTemplate;
      }
      if (other.CellWidth.Length != 0) {
        CellWidth = other.CellWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContentTemplate = input.ReadString();
            break;
          }
          case 26: {
            CellWidth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_SignalStrength_Config : pb::IMessage<CellTile_SignalStrength_Config> {
    private static readonly pb::MessageParser<CellTile_SignalStrength_Config> _parser = new pb::MessageParser<CellTile_SignalStrength_Config>(() => new CellTile_SignalStrength_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_SignalStrength_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Config(CellTile_SignalStrength_Config other) : this() {
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Config Clone() {
      return new CellTile_SignalStrength_Config(this);
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_SignalStrength_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_SignalStrength_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (display_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_SignalStrength_Config other) {
      if (other == null) {
        return;
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_SignalStrength_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_SignalStrength_Display : pb::IMessage<CellTile_SignalStrength_Display> {
    private static readonly pb::MessageParser<CellTile_SignalStrength_Display> _parser = new pb::MessageParser<CellTile_SignalStrength_Display>(() => new CellTile_SignalStrength_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_SignalStrength_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Display(CellTile_SignalStrength_Display other) : this() {
      valueProperty_ = other.valueProperty_;
      height_ = other.height_;
      width_ = other.width_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_SignalStrength_Display Clone() {
      return new CellTile_SignalStrength_Display(this);
    }

    /// <summary>Field number for the "value_property" field.</summary>
    public const int ValuePropertyFieldNumber = 1;
    private string valueProperty_ = "";
    /// <summary>
    /// property accessor to execute and retrieve the numeric value. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueProperty {
      get { return valueProperty_; }
      set {
        valueProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_SignalStrength_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_SignalStrength_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueProperty != other.ValueProperty) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueProperty.Length != 0) hash ^= ValueProperty.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueProperty.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ValueProperty);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueProperty);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_SignalStrength_Display other) {
      if (other == null) {
        return;
      }
      if (other.ValueProperty.Length != 0) {
        ValueProperty = other.ValueProperty;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ValueProperty = input.ReadString();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Monitor_Config : pb::IMessage<CellTile_Monitor_Config> {
    private static readonly pb::MessageParser<CellTile_Monitor_Config> _parser = new pb::MessageParser<CellTile_Monitor_Config>(() => new CellTile_Monitor_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Monitor_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Config(CellTile_Monitor_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Config Clone() {
      return new CellTile_Monitor_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Monitor_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Monitor_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Monitor_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Monitor_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Monitor_Source : pb::IMessage<CellTile_Monitor_Source> {
    private static readonly pb::MessageParser<CellTile_Monitor_Source> _parser = new pb::MessageParser<CellTile_Monitor_Source>(() => new CellTile_Monitor_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Monitor_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Source(CellTile_Monitor_Source other) : this() {
      monitorIds_ = other.monitorIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Source Clone() {
      return new CellTile_Monitor_Source(this);
    }

    /// <summary>Field number for the "monitor_ids" field.</summary>
    public const int MonitorIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_monitorIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> monitorIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MonitorIds {
      get { return monitorIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Monitor_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Monitor_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monitorIds_.Equals(other.monitorIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monitorIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monitorIds_.WriteTo(output, _repeated_monitorIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monitorIds_.CalculateSize(_repeated_monitorIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Monitor_Source other) {
      if (other == null) {
        return;
      }
      monitorIds_.Add(other.monitorIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monitorIds_.AddEntriesFrom(input, _repeated_monitorIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Monitor_Display : pb::IMessage<CellTile_Monitor_Display> {
    private static readonly pb::MessageParser<CellTile_Monitor_Display> _parser = new pb::MessageParser<CellTile_Monitor_Display>(() => new CellTile_Monitor_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Monitor_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Display(CellTile_Monitor_Display other) : this() {
      showLabel_ = other.showLabel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Monitor_Display Clone() {
      return new CellTile_Monitor_Display(this);
    }

    /// <summary>Field number for the "show_label" field.</summary>
    public const int ShowLabelFieldNumber = 1;
    private bool showLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowLabel {
      get { return showLabel_; }
      set {
        showLabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Monitor_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Monitor_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowLabel != other.ShowLabel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowLabel != false) hash ^= ShowLabel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowLabel != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowLabel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowLabel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Monitor_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowLabel != false) {
        ShowLabel = other.ShowLabel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowLabel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Status_Config : pb::IMessage<CellTile_Status_Config> {
    private static readonly pb::MessageParser<CellTile_Status_Config> _parser = new pb::MessageParser<CellTile_Status_Config>(() => new CellTile_Status_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Status_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Config(CellTile_Status_Config other) : this() {
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Config Clone() {
      return new CellTile_Status_Config(this);
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_Status_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_Status_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Status_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Status_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Status_Config other) {
      if (other == null) {
        return;
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Status_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_Status_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_Status_Display : pb::IMessage<CellTile_Status_Display> {
    private static readonly pb::MessageParser<CellTile_Status_Display> _parser = new pb::MessageParser<CellTile_Status_Display>(() => new CellTile_Status_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_Status_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Display(CellTile_Status_Display other) : this() {
      showStatusIcon_ = other.showStatusIcon_;
      labelTemplate_ = other.labelTemplate_;
      cellWidth_ = other.cellWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_Status_Display Clone() {
      return new CellTile_Status_Display(this);
    }

    /// <summary>Field number for the "show_status_icon" field.</summary>
    public const int ShowStatusIconFieldNumber = 1;
    private bool showStatusIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowStatusIcon {
      get { return showStatusIcon_; }
      set {
        showStatusIcon_ = value;
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 2;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cell_width" field.</summary>
    public const int CellWidthFieldNumber = 3;
    private string cellWidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellWidth {
      get { return cellWidth_; }
      set {
        cellWidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_Status_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_Status_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowStatusIcon != other.ShowStatusIcon) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      if (CellWidth != other.CellWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowStatusIcon != false) hash ^= ShowStatusIcon.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      if (CellWidth.Length != 0) hash ^= CellWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowStatusIcon != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowStatusIcon);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LabelTemplate);
      }
      if (CellWidth.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CellWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowStatusIcon != false) {
        size += 1 + 1;
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      if (CellWidth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellWidth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_Status_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowStatusIcon != false) {
        ShowStatusIcon = other.ShowStatusIcon;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
      if (other.CellWidth.Length != 0) {
        CellWidth = other.CellWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowStatusIcon = input.ReadBool();
            break;
          }
          case 18: {
            LabelTemplate = input.ReadString();
            break;
          }
          case 26: {
            CellWidth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_StatusBlock_Config : pb::IMessage<CellTile_StatusBlock_Config> {
    private static readonly pb::MessageParser<CellTile_StatusBlock_Config> _parser = new pb::MessageParser<CellTile_StatusBlock_Config>(() => new CellTile_StatusBlock_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_StatusBlock_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Config(CellTile_StatusBlock_Config other) : this() {
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Config Clone() {
      return new CellTile_StatusBlock_Config(this);
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_StatusBlock_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_StatusBlock_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_StatusBlock_Config other) {
      if (other == null) {
        return;
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_StatusBlock_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_StatusBlock_Display : pb::IMessage<CellTile_StatusBlock_Display> {
    private static readonly pb::MessageParser<CellTile_StatusBlock_Display> _parser = new pb::MessageParser<CellTile_StatusBlock_Display>(() => new CellTile_StatusBlock_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_StatusBlock_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Display(CellTile_StatusBlock_Display other) : this() {
      fullWidth_ = other.fullWidth_;
      labelTemplate_ = other.labelTemplate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_StatusBlock_Display Clone() {
      return new CellTile_StatusBlock_Display(this);
    }

    /// <summary>Field number for the "full_width" field.</summary>
    public const int FullWidthFieldNumber = 1;
    private bool fullWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullWidth {
      get { return fullWidth_; }
      set {
        fullWidth_ = value;
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 2;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_StatusBlock_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_StatusBlock_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FullWidth != other.FullWidth) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FullWidth != false) hash ^= FullWidth.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FullWidth != false) {
        output.WriteRawTag(8);
        output.WriteBool(FullWidth);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LabelTemplate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FullWidth != false) {
        size += 1 + 1;
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_StatusBlock_Display other) {
      if (other == null) {
        return;
      }
      if (other.FullWidth != false) {
        FullWidth = other.FullWidth;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FullWidth = input.ReadBool();
            break;
          }
          case 18: {
            LabelTemplate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_TimeseriesBlocks_Config : pb::IMessage<CellTile_TimeseriesBlocks_Config> {
    private static readonly pb::MessageParser<CellTile_TimeseriesBlocks_Config> _parser = new pb::MessageParser<CellTile_TimeseriesBlocks_Config>(() => new CellTile_TimeseriesBlocks_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_TimeseriesBlocks_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Config(CellTile_TimeseriesBlocks_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Config Clone() {
      return new CellTile_TimeseriesBlocks_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_TimeseriesBlocks_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_TimeseriesBlocks_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_TimeseriesBlocks_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_TimeseriesBlocks_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_TimeseriesBlocks_Display : pb::IMessage<CellTile_TimeseriesBlocks_Display> {
    private static readonly pb::MessageParser<CellTile_TimeseriesBlocks_Display> _parser = new pb::MessageParser<CellTile_TimeseriesBlocks_Display>(() => new CellTile_TimeseriesBlocks_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_TimeseriesBlocks_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Display(CellTile_TimeseriesBlocks_Display other) : this() {
      width_ = other.width_;
      fullWidth_ = other.fullWidth_;
      cellWidth_ = other.cellWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Display Clone() {
      return new CellTile_TimeseriesBlocks_Display(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "full_width" field.</summary>
    public const int FullWidthFieldNumber = 2;
    private bool fullWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullWidth {
      get { return fullWidth_; }
      set {
        fullWidth_ = value;
      }
    }

    /// <summary>Field number for the "cell_width" field.</summary>
    public const int CellWidthFieldNumber = 3;
    private string cellWidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellWidth {
      get { return cellWidth_; }
      set {
        cellWidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_TimeseriesBlocks_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_TimeseriesBlocks_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (FullWidth != other.FullWidth) return false;
      if (CellWidth != other.CellWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (FullWidth != false) hash ^= FullWidth.GetHashCode();
      if (CellWidth.Length != 0) hash ^= CellWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (FullWidth != false) {
        output.WriteRawTag(16);
        output.WriteBool(FullWidth);
      }
      if (CellWidth.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CellWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (FullWidth != false) {
        size += 1 + 1;
      }
      if (CellWidth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellWidth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_TimeseriesBlocks_Display other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.FullWidth != false) {
        FullWidth = other.FullWidth;
      }
      if (other.CellWidth.Length != 0) {
        CellWidth = other.CellWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            FullWidth = input.ReadBool();
            break;
          }
          case 26: {
            CellWidth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_TimeseriesBlocks_Source : pb::IMessage<CellTile_TimeseriesBlocks_Source> {
    private static readonly pb::MessageParser<CellTile_TimeseriesBlocks_Source> _parser = new pb::MessageParser<CellTile_TimeseriesBlocks_Source>(() => new CellTile_TimeseriesBlocks_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_TimeseriesBlocks_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Source(CellTile_TimeseriesBlocks_Source other) : this() {
      monitorIds_ = other.monitorIds_.Clone();
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_TimeseriesBlocks_Source Clone() {
      return new CellTile_TimeseriesBlocks_Source(this);
    }

    /// <summary>Field number for the "monitor_ids" field.</summary>
    public const int MonitorIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_monitorIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> monitorIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MonitorIds {
      get { return monitorIds_; }
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 4;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_TimeseriesBlocks_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_TimeseriesBlocks_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monitorIds_.Equals(other.monitorIds_)) return false;
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monitorIds_.GetHashCode();
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monitorIds_.WriteTo(output, _repeated_monitorIds_codec);
      if (timeframe_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monitorIds_.CalculateSize(_repeated_monitorIds_codec);
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_TimeseriesBlocks_Source other) {
      if (other == null) {
        return;
      }
      monitorIds_.Add(other.monitorIds_);
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monitorIds_.AddEntriesFrom(input, _repeated_monitorIds_codec);
            break;
          }
          case 34: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_MonitorStatus_Config : pb::IMessage<CellTile_MonitorStatus_Config> {
    private static readonly pb::MessageParser<CellTile_MonitorStatus_Config> _parser = new pb::MessageParser<CellTile_MonitorStatus_Config>(() => new CellTile_MonitorStatus_Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_MonitorStatus_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Config(CellTile_MonitorStatus_Config other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Config Clone() {
      return new CellTile_MonitorStatus_Config(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(26, global::SquaredUp.Dashboard.Schema.MatrixTile_Transform.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> transforms_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.MatrixTile_Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_MonitorStatus_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_MonitorStatus_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Display);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_MonitorStatus_Config other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display();
        }
        Display.MergeFrom(other.Display);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.CellTile_MonitorStatus_Display();
            }
            input.ReadMessage(display_);
            break;
          }
          case 26: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_MonitorStatus_Source : pb::IMessage<CellTile_MonitorStatus_Source> {
    private static readonly pb::MessageParser<CellTile_MonitorStatus_Source> _parser = new pb::MessageParser<CellTile_MonitorStatus_Source>(() => new CellTile_MonitorStatus_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_MonitorStatus_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Source(CellTile_MonitorStatus_Source other) : this() {
      monitorIds_ = other.monitorIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Source Clone() {
      return new CellTile_MonitorStatus_Source(this);
    }

    /// <summary>Field number for the "monitor_ids" field.</summary>
    public const int MonitorIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_monitorIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> monitorIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MonitorIds {
      get { return monitorIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_MonitorStatus_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_MonitorStatus_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monitorIds_.Equals(other.monitorIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monitorIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monitorIds_.WriteTo(output, _repeated_monitorIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monitorIds_.CalculateSize(_repeated_monitorIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_MonitorStatus_Source other) {
      if (other == null) {
        return;
      }
      monitorIds_.Add(other.monitorIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monitorIds_.AddEntriesFrom(input, _repeated_monitorIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellTile_MonitorStatus_Display : pb::IMessage<CellTile_MonitorStatus_Display> {
    private static readonly pb::MessageParser<CellTile_MonitorStatus_Display> _parser = new pb::MessageParser<CellTile_MonitorStatus_Display>(() => new CellTile_MonitorStatus_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTile_MonitorStatus_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.DynamicReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Display(CellTile_MonitorStatus_Display other) : this() {
      fullWidth_ = other.fullWidth_;
      linkTemplate_ = other.linkTemplate_;
      cellWidth_ = other.cellWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTile_MonitorStatus_Display Clone() {
      return new CellTile_MonitorStatus_Display(this);
    }

    /// <summary>Field number for the "full_width" field.</summary>
    public const int FullWidthFieldNumber = 1;
    private bool fullWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullWidth {
      get { return fullWidth_; }
      set {
        fullWidth_ = value;
      }
    }

    /// <summary>Field number for the "link_template" field.</summary>
    public const int LinkTemplateFieldNumber = 2;
    private string linkTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkTemplate {
      get { return linkTemplate_; }
      set {
        linkTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cell_width" field.</summary>
    public const int CellWidthFieldNumber = 3;
    private string cellWidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellWidth {
      get { return cellWidth_; }
      set {
        cellWidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTile_MonitorStatus_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTile_MonitorStatus_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FullWidth != other.FullWidth) return false;
      if (LinkTemplate != other.LinkTemplate) return false;
      if (CellWidth != other.CellWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FullWidth != false) hash ^= FullWidth.GetHashCode();
      if (LinkTemplate.Length != 0) hash ^= LinkTemplate.GetHashCode();
      if (CellWidth.Length != 0) hash ^= CellWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FullWidth != false) {
        output.WriteRawTag(8);
        output.WriteBool(FullWidth);
      }
      if (LinkTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LinkTemplate);
      }
      if (CellWidth.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CellWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FullWidth != false) {
        size += 1 + 1;
      }
      if (LinkTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTemplate);
      }
      if (CellWidth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellWidth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTile_MonitorStatus_Display other) {
      if (other == null) {
        return;
      }
      if (other.FullWidth != false) {
        FullWidth = other.FullWidth;
      }
      if (other.LinkTemplate.Length != 0) {
        LinkTemplate = other.LinkTemplate;
      }
      if (other.CellWidth.Length != 0) {
        CellWidth = other.CellWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FullWidth = input.ReadBool();
            break;
          }
          case 18: {
            LinkTemplate = input.ReadString();
            break;
          }
          case 26: {
            CellWidth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
