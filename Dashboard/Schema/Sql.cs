// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from sql.proto</summary>
  public static partial class SqlReflection {

    #region Descriptor
    /// <summary>File descriptor for sql.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SqlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglzcWwucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xlL3Byb3RvYnVmL3N0cnVj",
            "dC5wcm90byLGAQoVU3FsQXNTY2FsYXJUaWxlQ29uZmlnEjkKB2NvbnRleHQY",
            "ASABKAsyKC5zcXVhcmVkdXAuU3FsQXNTY2FsYXJUaWxlQ29uZmlnX0NvbnRl",
            "eHQSNwoGc291cmNlGAIgASgLMicuc3F1YXJlZHVwLlNxbEFzU2NhbGFyVGls",
            "ZUNvbmZpZ19Tb3VyY2USOQoHZGlzcGxheRgDIAEoCzIoLnNxdWFyZWR1cC5T",
            "cWxBc1NjYWxhclRpbGVDb25maWdfRGlzcGxheSIfCh1TcWxBc1NjYWxhclRp",
            "bGVDb25maWdfQ29udGV4dCJ5ChxTcWxBc1NjYWxhclRpbGVDb25maWdfU291",
            "cmNlEhEKCV9zZWN1cml0eRgBIAEoCRIYChBjb25uZWN0aW9uc3RyaW5nGAIg",
            "ASgJEhMKC3F1ZXJ5c3RyaW5nGAMgASgJEhcKC2NvbnRleHR0eXBlGAQgASgJ",
            "QgIYASJkCh1TcWxBc1NjYWxhclRpbGVDb25maWdfRGlzcGxheRIQCghmb250",
            "c2l6ZRgBIAEoARIVCg1jb2VyY2Vfb2JqZWN0GAIgASgIEgwKBHVuaXQYAyAB",
            "KAkSDAoEem9vbRgEIAEoCSLCAQoUU3FsQXNUYWJsZVRpbGVDb25maWcSOAoH",
            "Y29udGV4dBgBIAEoCzInLnNxdWFyZWR1cC5TcWxBc1RhYmxlVGlsZUNvbmZp",
            "Z19Db250ZXh0EjYKBnNvdXJjZRgCIAEoCzImLnNxdWFyZWR1cC5TcWxBc1Rh",
            "YmxlVGlsZUNvbmZpZ19Tb3VyY2USOAoHZGlzcGxheRgDIAEoCzInLnNxdWFy",
            "ZWR1cC5TcWxBc1RhYmxlVGlsZUNvbmZpZ19EaXNwbGF5Ih4KHFNxbEFzVGFi",
            "bGVUaWxlQ29uZmlnX0NvbnRleHQieAobU3FsQXNUYWJsZVRpbGVDb25maWdf",
            "U291cmNlEhEKCV9zZWN1cml0eRgBIAEoCRIYChBjb25uZWN0aW9uc3RyaW5n",
            "GAIgASgJEhMKC3F1ZXJ5c3RyaW5nGAMgASgJEhcKC2NvbnRleHR0eXBlGAQg",
            "ASgJQgIYASLBAwocU3FsQXNUYWJsZVRpbGVDb25maWdfRGlzcGxheRIUCgxz",
            "aG93X2hlYWRlcnMYASABKAgSEAoIYXV0b2hpZGUYAiABKAgSEAoIcm93X2xp",
            "bmsYAyABKAkSVgoQY29sdW1uX292ZXJyaWRlcxgEIAMoCzI8LnNxdWFyZWR1",
            "cC5TcWxBc1RhYmxlVGlsZUNvbmZpZ19EaXNwbGF5LkNvbHVtbk92ZXJyaWRl",
            "c0VudHJ5ElIKDmN1c3RvbV9jb2x1bW5zGAUgAygLMjouc3F1YXJlZHVwLlNx",
            "bEFzVGFibGVUaWxlQ29uZmlnX0Rpc3BsYXkuQ3VzdG9tQ29sdW1uc0VudHJ5",
            "Eg8KB2NvbHVtbnMYBiADKAkSDAoEem9vbRgHIAEoCRpmChRDb2x1bW5PdmVy",
            "cmlkZXNFbnRyeRILCgNrZXkYASABKAkSPQoFdmFsdWUYAiABKAsyLi5zcXVh",
            "cmVkdXAuU3FsQXNUYWJsZVRpbGVDb25maWdfQ29sdW1uT3ZlcnJpZGU6AjgB",
            "GjQKEkN1c3RvbUNvbHVtbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIk0KI1NxbEFzVGFibGVUaWxlQ29uZmlnX0NvbHVtbk92ZXJy",
            "aWRlEhAKCHRlbXBsYXRlGAEgASgJEhQKDGRpc3BsYXlfbmFtZRgCIAEoCUId",
            "qgIaU3F1YXJlZFVwLkRhc2hib2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig), global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context), global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source), global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source.Parser, new[]{ "Security", "Connectionstring", "Querystring", "Contexttype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display), global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display.Parser, new[]{ "Fontsize", "CoerceObject", "Unit", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig), global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context), global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source), global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source.Parser, new[]{ "Security", "Connectionstring", "Querystring", "Contexttype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display), global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display.Parser, new[]{ "ShowHeaders", "Autohide", "RowLink", "ColumnOverrides", "CustomColumns", "Columns", "Zoom" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride), global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride.Parser, new[]{ "Template", "DisplayName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///-------------------------------------------------------------------------------------
  ///
  ///  SQL tile
  ///
  ///-------------------------------------------------------------------------------------
  /// tile/sql-as-scalar
  /// </summary>
  public sealed partial class SqlAsScalarTileConfig : pb::IMessage<SqlAsScalarTileConfig> {
    private static readonly pb::MessageParser<SqlAsScalarTileConfig> _parser = new pb::MessageParser<SqlAsScalarTileConfig>(() => new SqlAsScalarTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsScalarTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig(SqlAsScalarTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig Clone() {
      return new SqlAsScalarTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsScalarTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsScalarTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsScalarTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.SqlAsScalarTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Always empty
  /// </summary>
  public sealed partial class SqlAsScalarTileConfig_Context : pb::IMessage<SqlAsScalarTileConfig_Context> {
    private static readonly pb::MessageParser<SqlAsScalarTileConfig_Context> _parser = new pb::MessageParser<SqlAsScalarTileConfig_Context>(() => new SqlAsScalarTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsScalarTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Context(SqlAsScalarTileConfig_Context other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Context Clone() {
      return new SqlAsScalarTileConfig_Context(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsScalarTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsScalarTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsScalarTileConfig_Context other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SqlAsScalarTileConfig_Source : pb::IMessage<SqlAsScalarTileConfig_Source> {
    private static readonly pb::MessageParser<SqlAsScalarTileConfig_Source> _parser = new pb::MessageParser<SqlAsScalarTileConfig_Source>(() => new SqlAsScalarTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsScalarTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Source(SqlAsScalarTileConfig_Source other) : this() {
      Security_ = other.Security_;
      connectionstring_ = other.connectionstring_;
      querystring_ = other.querystring_;
      contexttype_ = other.contexttype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Source Clone() {
      return new SqlAsScalarTileConfig_Source(this);
    }

    /// <summary>Field number for the "_security" field.</summary>
    public const int SecurityFieldNumber = 1;
    private string Security_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Security {
      get { return Security_; }
      set {
        Security_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionstring" field.</summary>
    public const int ConnectionstringFieldNumber = 2;
    private string connectionstring_ = "";
    /// <summary>
    /// !! Inconsistent vs. naming scheme !!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connectionstring {
      get { return connectionstring_; }
      set {
        connectionstring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "querystring" field.</summary>
    public const int QuerystringFieldNumber = 3;
    private string querystring_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Querystring {
      get { return querystring_; }
      set {
        querystring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contexttype" field.</summary>
    public const int ContexttypeFieldNumber = 4;
    private string contexttype_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contexttype {
      get { return contexttype_; }
      set {
        contexttype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsScalarTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsScalarTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Security != other.Security) return false;
      if (Connectionstring != other.Connectionstring) return false;
      if (Querystring != other.Querystring) return false;
      if (Contexttype != other.Contexttype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Security.Length != 0) hash ^= Security.GetHashCode();
      if (Connectionstring.Length != 0) hash ^= Connectionstring.GetHashCode();
      if (Querystring.Length != 0) hash ^= Querystring.GetHashCode();
      if (Contexttype.Length != 0) hash ^= Contexttype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Security.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Security);
      }
      if (Connectionstring.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Connectionstring);
      }
      if (Querystring.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Querystring);
      }
      if (Contexttype.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Contexttype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Security.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Security);
      }
      if (Connectionstring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connectionstring);
      }
      if (Querystring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Querystring);
      }
      if (Contexttype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contexttype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsScalarTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.Security.Length != 0) {
        Security = other.Security;
      }
      if (other.Connectionstring.Length != 0) {
        Connectionstring = other.Connectionstring;
      }
      if (other.Querystring.Length != 0) {
        Querystring = other.Querystring;
      }
      if (other.Contexttype.Length != 0) {
        Contexttype = other.Contexttype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Security = input.ReadString();
            break;
          }
          case 18: {
            Connectionstring = input.ReadString();
            break;
          }
          case 26: {
            Querystring = input.ReadString();
            break;
          }
          case 34: {
            Contexttype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlAsScalarTileConfig_Display : pb::IMessage<SqlAsScalarTileConfig_Display> {
    private static readonly pb::MessageParser<SqlAsScalarTileConfig_Display> _parser = new pb::MessageParser<SqlAsScalarTileConfig_Display>(() => new SqlAsScalarTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsScalarTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Display(SqlAsScalarTileConfig_Display other) : this() {
      fontsize_ = other.fontsize_;
      coerceObject_ = other.coerceObject_;
      unit_ = other.unit_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsScalarTileConfig_Display Clone() {
      return new SqlAsScalarTileConfig_Display(this);
    }

    /// <summary>Field number for the "fontsize" field.</summary>
    public const int FontsizeFieldNumber = 1;
    private double fontsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fontsize {
      get { return fontsize_; }
      set {
        fontsize_ = value;
      }
    }

    /// <summary>Field number for the "coerce_object" field.</summary>
    public const int CoerceObjectFieldNumber = 2;
    private bool coerceObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CoerceObject {
      get { return coerceObject_; }
      set {
        coerceObject_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 4;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsScalarTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsScalarTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fontsize != other.Fontsize) return false;
      if (CoerceObject != other.CoerceObject) return false;
      if (Unit != other.Unit) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fontsize != 0D) hash ^= Fontsize.GetHashCode();
      if (CoerceObject != false) hash ^= CoerceObject.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fontsize != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Fontsize);
      }
      if (CoerceObject != false) {
        output.WriteRawTag(16);
        output.WriteBool(CoerceObject);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fontsize != 0D) {
        size += 1 + 8;
      }
      if (CoerceObject != false) {
        size += 1 + 1;
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsScalarTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Fontsize != 0D) {
        Fontsize = other.Fontsize;
      }
      if (other.CoerceObject != false) {
        CoerceObject = other.CoerceObject;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Fontsize = input.ReadDouble();
            break;
          }
          case 16: {
            CoerceObject = input.ReadBool();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
          case 34: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlAsTableTileConfig : pb::IMessage<SqlAsTableTileConfig> {
    private static readonly pb::MessageParser<SqlAsTableTileConfig> _parser = new pb::MessageParser<SqlAsTableTileConfig>(() => new SqlAsTableTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsTableTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig(SqlAsTableTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig Clone() {
      return new SqlAsTableTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsTableTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsTableTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsTableTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Always empty
  /// </summary>
  public sealed partial class SqlAsTableTileConfig_Context : pb::IMessage<SqlAsTableTileConfig_Context> {
    private static readonly pb::MessageParser<SqlAsTableTileConfig_Context> _parser = new pb::MessageParser<SqlAsTableTileConfig_Context>(() => new SqlAsTableTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsTableTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Context(SqlAsTableTileConfig_Context other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Context Clone() {
      return new SqlAsTableTileConfig_Context(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsTableTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsTableTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsTableTileConfig_Context other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SqlAsTableTileConfig_Source : pb::IMessage<SqlAsTableTileConfig_Source> {
    private static readonly pb::MessageParser<SqlAsTableTileConfig_Source> _parser = new pb::MessageParser<SqlAsTableTileConfig_Source>(() => new SqlAsTableTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsTableTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Source(SqlAsTableTileConfig_Source other) : this() {
      Security_ = other.Security_;
      connectionstring_ = other.connectionstring_;
      querystring_ = other.querystring_;
      contexttype_ = other.contexttype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Source Clone() {
      return new SqlAsTableTileConfig_Source(this);
    }

    /// <summary>Field number for the "_security" field.</summary>
    public const int SecurityFieldNumber = 1;
    private string Security_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Security {
      get { return Security_; }
      set {
        Security_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionstring" field.</summary>
    public const int ConnectionstringFieldNumber = 2;
    private string connectionstring_ = "";
    /// <summary>
    /// !! Inconsistent vs. naming scheme !!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connectionstring {
      get { return connectionstring_; }
      set {
        connectionstring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "querystring" field.</summary>
    public const int QuerystringFieldNumber = 3;
    private string querystring_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Querystring {
      get { return querystring_; }
      set {
        querystring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contexttype" field.</summary>
    public const int ContexttypeFieldNumber = 4;
    private string contexttype_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contexttype {
      get { return contexttype_; }
      set {
        contexttype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsTableTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsTableTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Security != other.Security) return false;
      if (Connectionstring != other.Connectionstring) return false;
      if (Querystring != other.Querystring) return false;
      if (Contexttype != other.Contexttype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Security.Length != 0) hash ^= Security.GetHashCode();
      if (Connectionstring.Length != 0) hash ^= Connectionstring.GetHashCode();
      if (Querystring.Length != 0) hash ^= Querystring.GetHashCode();
      if (Contexttype.Length != 0) hash ^= Contexttype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Security.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Security);
      }
      if (Connectionstring.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Connectionstring);
      }
      if (Querystring.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Querystring);
      }
      if (Contexttype.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Contexttype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Security.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Security);
      }
      if (Connectionstring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connectionstring);
      }
      if (Querystring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Querystring);
      }
      if (Contexttype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contexttype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsTableTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.Security.Length != 0) {
        Security = other.Security;
      }
      if (other.Connectionstring.Length != 0) {
        Connectionstring = other.Connectionstring;
      }
      if (other.Querystring.Length != 0) {
        Querystring = other.Querystring;
      }
      if (other.Contexttype.Length != 0) {
        Contexttype = other.Contexttype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Security = input.ReadString();
            break;
          }
          case 18: {
            Connectionstring = input.ReadString();
            break;
          }
          case 26: {
            Querystring = input.ReadString();
            break;
          }
          case 34: {
            Contexttype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlAsTableTileConfig_Display : pb::IMessage<SqlAsTableTileConfig_Display> {
    private static readonly pb::MessageParser<SqlAsTableTileConfig_Display> _parser = new pb::MessageParser<SqlAsTableTileConfig_Display>(() => new SqlAsTableTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsTableTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Display(SqlAsTableTileConfig_Display other) : this() {
      showHeaders_ = other.showHeaders_;
      autohide_ = other.autohide_;
      rowLink_ = other.rowLink_;
      columnOverrides_ = other.columnOverrides_.Clone();
      customColumns_ = other.customColumns_.Clone();
      columns_ = other.columns_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_Display Clone() {
      return new SqlAsTableTileConfig_Display(this);
    }

    /// <summary>Field number for the "show_headers" field.</summary>
    public const int ShowHeadersFieldNumber = 1;
    private bool showHeaders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHeaders {
      get { return showHeaders_; }
      set {
        showHeaders_ = value;
      }
    }

    /// <summary>Field number for the "autohide" field.</summary>
    public const int AutohideFieldNumber = 2;
    private bool autohide_;
    /// <summary>
    /// !! Inconsistent vs. naming scheme !!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autohide {
      get { return autohide_; }
      set {
        autohide_ = value;
      }
    }

    /// <summary>Field number for the "row_link" field.</summary>
    public const int RowLinkFieldNumber = 3;
    private string rowLink_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowLink {
      get { return rowLink_; }
      set {
        rowLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_overrides" field.</summary>
    public const int ColumnOverridesFieldNumber = 4;
    private static readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride>.Codec _map_columnOverrides_codec
        = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride.Parser), 34);
    private readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride> columnOverrides_ = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride>();
    /// <summary>
    /// Column template overrides
    /// name -> override data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::SquaredUp.Dashboard.Schema.SqlAsTableTileConfig_ColumnOverride> ColumnOverrides {
      get { return columnOverrides_; }
    }

    /// <summary>Field number for the "custom_columns" field.</summary>
    public const int CustomColumnsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_customColumns_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> customColumns_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom columns
    /// internal name (e.g. custom_column) -> data key path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> CustomColumns {
      get { return customColumns_; }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List/order of each column
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 7;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsTableTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsTableTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowHeaders != other.ShowHeaders) return false;
      if (Autohide != other.Autohide) return false;
      if (RowLink != other.RowLink) return false;
      if (!ColumnOverrides.Equals(other.ColumnOverrides)) return false;
      if (!CustomColumns.Equals(other.CustomColumns)) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowHeaders != false) hash ^= ShowHeaders.GetHashCode();
      if (Autohide != false) hash ^= Autohide.GetHashCode();
      if (RowLink.Length != 0) hash ^= RowLink.GetHashCode();
      hash ^= ColumnOverrides.GetHashCode();
      hash ^= CustomColumns.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowHeaders != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowHeaders);
      }
      if (Autohide != false) {
        output.WriteRawTag(16);
        output.WriteBool(Autohide);
      }
      if (RowLink.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RowLink);
      }
      columnOverrides_.WriteTo(output, _map_columnOverrides_codec);
      customColumns_.WriteTo(output, _map_customColumns_codec);
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowHeaders != false) {
        size += 1 + 1;
      }
      if (Autohide != false) {
        size += 1 + 1;
      }
      if (RowLink.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowLink);
      }
      size += columnOverrides_.CalculateSize(_map_columnOverrides_codec);
      size += customColumns_.CalculateSize(_map_customColumns_codec);
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsTableTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowHeaders != false) {
        ShowHeaders = other.ShowHeaders;
      }
      if (other.Autohide != false) {
        Autohide = other.Autohide;
      }
      if (other.RowLink.Length != 0) {
        RowLink = other.RowLink;
      }
      columnOverrides_.Add(other.columnOverrides_);
      customColumns_.Add(other.customColumns_);
      columns_.Add(other.columns_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowHeaders = input.ReadBool();
            break;
          }
          case 16: {
            Autohide = input.ReadBool();
            break;
          }
          case 26: {
            RowLink = input.ReadString();
            break;
          }
          case 34: {
            columnOverrides_.AddEntriesFrom(input, _map_columnOverrides_codec);
            break;
          }
          case 42: {
            customColumns_.AddEntriesFrom(input, _map_customColumns_codec);
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 58: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlAsTableTileConfig_ColumnOverride : pb::IMessage<SqlAsTableTileConfig_ColumnOverride> {
    private static readonly pb::MessageParser<SqlAsTableTileConfig_ColumnOverride> _parser = new pb::MessageParser<SqlAsTableTileConfig_ColumnOverride>(() => new SqlAsTableTileConfig_ColumnOverride());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlAsTableTileConfig_ColumnOverride> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SqlReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_ColumnOverride() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_ColumnOverride(SqlAsTableTileConfig_ColumnOverride other) : this() {
      template_ = other.template_;
      displayName_ = other.displayName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlAsTableTileConfig_ColumnOverride Clone() {
      return new SqlAsTableTileConfig_ColumnOverride(this);
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 1;
    private string template_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Template {
      get { return template_; }
      set {
        template_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlAsTableTileConfig_ColumnOverride);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlAsTableTileConfig_ColumnOverride other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Template != other.Template) return false;
      if (DisplayName != other.DisplayName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Template.Length != 0) hash ^= Template.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Template.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Template);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Template.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Template);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlAsTableTileConfig_ColumnOverride other) {
      if (other == null) {
        return;
      }
      if (other.Template.Length != 0) {
        Template = other.Template;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Template = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
