// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeframe.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from timeframe.proto</summary>
  public static partial class TimeframeReflection {

    #region Descriptor
    /// <summary>File descriptor for timeframe.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TimeframeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg90aW1lZnJhbWUucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xlL3Byb3RvYnVm",
            "L3N0cnVjdC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3Rv",
            "Gg1vcHRpb25zLnByb3RvInYKD0NvbW1vblRpbWVmcmFtZRIUCgR0eXBlGAEg",
            "ASgJQgaStRgCSAESFQoFcmFuZ2UYAiABKAlCBpK1GAJIARIbCg90aW1lZnJh",
            "bWVfc3RhcnQYAyABKAlCAhgBEhkKDXRpbWVmcmFtZV9lbmQYBCABKAlCAhgB",
            "Qh2qAhpTcXVhcmVkVXAuRGFzaGJvYXJkLlNjaGVtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::SquaredUp.Dashboard.Schema.OptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CommonTimeframe), global::SquaredUp.Dashboard.Schema.CommonTimeframe.Parser, new[]{ "Type", "Range", "TimeframeStart", "TimeframeEnd" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommonTimeframe : pb::IMessage<CommonTimeframe> {
    private static readonly pb::MessageParser<CommonTimeframe> _parser = new pb::MessageParser<CommonTimeframe>(() => new CommonTimeframe());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonTimeframe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTimeframe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTimeframe(CommonTimeframe other) : this() {
      type_ = other.type_;
      range_ = other.range_;
      timeframeStart_ = other.timeframeStart_;
      timeframeEnd_ = other.timeframeEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTimeframe Clone() {
      return new CommonTimeframe(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// The type of timeframe. 'fixed' or 'inherit' (the latter inherits
    /// from the containing page)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 2;
    private string range_ = "";
    /// <summary>
    /// The range of the timeframe
    /// 
    /// This is a string literal such as "Last1Hour", "Last12Months" etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Range {
      get { return range_; }
      set {
        range_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeframe_start" field.</summary>
    public const int TimeframeStartFieldNumber = 3;
    private string timeframeStart_ = "";
    /// <summary>
    /// Custom time range - referenced by the product but cannot actually be set or used
    /// in most instances
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeframeStart {
      get { return timeframeStart_; }
      set {
        timeframeStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeframe_end" field.</summary>
    public const int TimeframeEndFieldNumber = 4;
    private string timeframeEnd_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeframeEnd {
      get { return timeframeEnd_; }
      set {
        timeframeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonTimeframe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonTimeframe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Range != other.Range) return false;
      if (TimeframeStart != other.TimeframeStart) return false;
      if (TimeframeEnd != other.TimeframeEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Range.Length != 0) hash ^= Range.GetHashCode();
      if (TimeframeStart.Length != 0) hash ^= TimeframeStart.GetHashCode();
      if (TimeframeEnd.Length != 0) hash ^= TimeframeEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Range.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Range);
      }
      if (TimeframeStart.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TimeframeStart);
      }
      if (TimeframeEnd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeframeEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Range.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Range);
      }
      if (TimeframeStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeframeStart);
      }
      if (TimeframeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeframeEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonTimeframe other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Range.Length != 0) {
        Range = other.Range;
      }
      if (other.TimeframeStart.Length != 0) {
        TimeframeStart = other.TimeframeStart;
      }
      if (other.TimeframeEnd.Length != 0) {
        TimeframeEnd = other.TimeframeEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Range = input.ReadString();
            break;
          }
          case 26: {
            TimeframeStart = input.ReadString();
            break;
          }
          case 34: {
            TimeframeEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
