// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from task.proto</summary>
  public static partial class TaskReflection {

    #region Descriptor
    /// <summary>File descriptor for task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0YXNrLnByb3RvEglzcXVhcmVkdXAaHGdvb2dsZS9wcm90b2J1Zi9zdHJ1",
            "Y3QucHJvdG8aC3Njb3BlLnByb3RvIpQBChhTY29tVGFza0FzVGV4dFRpbGVD",
            "b25maWcSPAoHY29udGV4dBgBIAEoCzIrLnNxdWFyZWR1cC5TY29tVGFza0Fz",
            "VGV4dFRpbGVDb25maWdfQ29udGV4dBI6CgZzb3VyY2UYAiABKAsyKi5zcXVh",
            "cmVkdXAuU2NvbVRhc2tBc1RleHRUaWxlQ29uZmlnX1NvdXJjZSJ3CiBTY29t",
            "VGFza0FzVGV4dFRpbGVDb25maWdfQ29udGV4dBIRCglvYmplY3RfaWQYASAB",
            "KAkSQAoFc2NvcGUYAiABKAsyMS5zcXVhcmVkdXAuU2NvbVRhc2tBc1RleHRU",
            "aWxlQ29uZmlnX0NvbnRleHRfU2NvcGUiKAomU2NvbVRhc2tBc1RleHRUaWxl",
            "Q29uZmlnX0NvbnRleHRfU2NvcGUifAofU2NvbVRhc2tBc1RleHRUaWxlQ29u",
            "ZmlnX1NvdXJjZRIPCgd0YXNrX2lkGAEgASgJEkgKCnBhcmFtZXRlcnMYAiAD",
            "KAsyNC5zcXVhcmVkdXAuU2NvbVRhc2tBc1RleHRUaWxlQ29uZmlnX1NvdXJj",
            "ZV9QYXJhbWV0ZXIiXwopU2NvbVRhc2tBc1RleHRUaWxlQ29uZmlnX1NvdXJj",
            "ZV9QYXJhbWV0ZXISCwoDa2V5GAEgASgJEiUKBXZhbHVlGAIgASgLMhYuZ29v",
            "Z2xlLnByb3RvYnVmLlZhbHVlItYBChlTY29tVGFza0FzVGFibGVUaWxlQ29u",
            "ZmlnEj0KB2NvbnRleHQYASABKAsyLC5zcXVhcmVkdXAuU2NvbVRhc2tBc1Rh",
            "YmxlVGlsZUNvbmZpZ19Db250ZXh0EjsKBnNvdXJjZRgCIAEoCzIrLnNxdWFy",
            "ZWR1cC5TY29tVGFza0FzVGFibGVUaWxlQ29uZmlnX1NvdXJjZRI9CgdkaXNw",
            "bGF5GAMgASgLMiwuc3F1YXJlZHVwLlNjb21UYXNrQXNUYWJsZVRpbGVDb25m",
            "aWdfRGlzcGxheSJ5CiFTY29tVGFza0FzVGFibGVUaWxlQ29uZmlnX0NvbnRl",
            "eHQSEQoJb2JqZWN0X2lkGAEgASgJEkEKBXNjb3BlGAIgASgLMjIuc3F1YXJl",
            "ZHVwLlNjb21UYXNrQXNUYWJsZVRpbGVDb25maWdfQ29udGV4dF9TY29wZSIp",
            "CidTY29tVGFza0FzVGFibGVUaWxlQ29uZmlnX0NvbnRleHRfU2NvcGUiogEK",
            "IFNjb21UYXNrQXNUYWJsZVRpbGVDb25maWdfU291cmNlEg4KBmZvcm1hdBgB",
            "IAEoCRISCgpza2lwX2xpbmVzGAIgASgFEg8KB3Rhc2tfaWQYAyABKAkSSQoK",
            "cGFyYW1ldGVycxgEIAMoCzI1LnNxdWFyZWR1cC5TY29tVGFza0FzVGFibGVU",
            "aWxlQ29uZmlnX1NvdXJjZV9QYXJhbWV0ZXIiYAoqU2NvbVRhc2tBc1RhYmxl",
            "VGlsZUNvbmZpZ19Tb3VyY2VfUGFyYW1ldGVyEgsKA2tleRgBIAEoCRIlCgV2",
            "YWx1ZRgCIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZSLVAwohU2NvbVRh",
            "c2tBc1RhYmxlVGlsZUNvbmZpZ19EaXNwbGF5EhAKCGF1dG9oaWRlGAEgASgI",
            "EhAKCHJvd19saW5rGAIgASgJEhQKDHNob3dfaGVhZGVycxgDIAEoCBJbChBj",
            "b2x1bW5fb3ZlcnJpZGVzGAQgAygLMkEuc3F1YXJlZHVwLlNjb21UYXNrQXNU",
            "YWJsZVRpbGVDb25maWdfRGlzcGxheS5Db2x1bW5PdmVycmlkZXNFbnRyeRJX",
            "Cg5jdXN0b21fY29sdW1ucxgFIAMoCzI/LnNxdWFyZWR1cC5TY29tVGFza0Fz",
            "VGFibGVUaWxlQ29uZmlnX0Rpc3BsYXkuQ3VzdG9tQ29sdW1uc0VudHJ5Eg8K",
            "B2NvbHVtbnMYBiADKAkSDAoEem9vbRgHIAEoCRprChRDb2x1bW5PdmVycmlk",
            "ZXNFbnRyeRILCgNrZXkYASABKAkSQgoFdmFsdWUYAiABKAsyMy5zcXVhcmVk",
            "dXAuU2NvbVRhc2tBc1RhYmxlVGlsZUNvbmZpZ19Db2x1bW5PdmVycmlkZToC",
            "OAEaNAoSQ3VzdG9tQ29sdW1uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEiPAooU2NvbVRhc2tBc1RhYmxlVGlsZUNvbmZpZ19Db2x1",
            "bW5PdmVycmlkZRIQCgh0ZW1wbGF0ZRgBIAEoCUIdqgIaU3F1YXJlZFVwLkRh",
            "c2hib2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig), global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig.Parser, new[]{ "Context", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context.Parser, new[]{ "ObjectId", "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope), global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source), global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source.Parser, new[]{ "TaskId", "Parameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter), global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context.Parser, new[]{ "ObjectId", "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source.Parser, new[]{ "Format", "SkipLines", "TaskId", "Parameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display.Parser, new[]{ "Autohide", "RowLink", "ShowHeaders", "ColumnOverrides", "CustomColumns", "Columns", "Zoom" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride), global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride.Parser, new[]{ "Template" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// tile/scomtask-as-text
  /// </summary>
  public sealed partial class ScomTaskAsTextTileConfig : pb::IMessage<ScomTaskAsTextTileConfig> {
    private static readonly pb::MessageParser<ScomTaskAsTextTileConfig> _parser = new pb::MessageParser<ScomTaskAsTextTileConfig>(() => new ScomTaskAsTextTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTextTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig(ScomTaskAsTextTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig Clone() {
      return new ScomTaskAsTextTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTextTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTextTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTextTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTextTileConfig_Context : pb::IMessage<ScomTaskAsTextTileConfig_Context> {
    private static readonly pb::MessageParser<ScomTaskAsTextTileConfig_Context> _parser = new pb::MessageParser<ScomTaskAsTextTileConfig_Context>(() => new ScomTaskAsTextTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTextTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context(ScomTaskAsTextTileConfig_Context other) : this() {
      objectId_ = other.objectId_;
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context Clone() {
      return new ScomTaskAsTextTileConfig_Context(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTextTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTextTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectId);
      }
      if (scope_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTextTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObjectId = input.ReadString();
            break;
          }
          case 18: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Context_Scope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO: May contain redudnant class ID etc. that is ignored?
  /// </summary>
  public sealed partial class ScomTaskAsTextTileConfig_Context_Scope : pb::IMessage<ScomTaskAsTextTileConfig_Context_Scope> {
    private static readonly pb::MessageParser<ScomTaskAsTextTileConfig_Context_Scope> _parser = new pb::MessageParser<ScomTaskAsTextTileConfig_Context_Scope>(() => new ScomTaskAsTextTileConfig_Context_Scope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTextTileConfig_Context_Scope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context_Scope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context_Scope(ScomTaskAsTextTileConfig_Context_Scope other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Context_Scope Clone() {
      return new ScomTaskAsTextTileConfig_Context_Scope(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTextTileConfig_Context_Scope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTextTileConfig_Context_Scope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTextTileConfig_Context_Scope other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTextTileConfig_Source : pb::IMessage<ScomTaskAsTextTileConfig_Source> {
    private static readonly pb::MessageParser<ScomTaskAsTextTileConfig_Source> _parser = new pb::MessageParser<ScomTaskAsTextTileConfig_Source>(() => new ScomTaskAsTextTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTextTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source(ScomTaskAsTextTileConfig_Source other) : this() {
      taskId_ = other.taskId_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source Clone() {
      return new ScomTaskAsTextTileConfig_Source(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    /// ID of the task to execute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter> parameters_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTextTileConfig_Source_Parameter> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTextTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTextTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= parameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTextTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTextTileConfig_Source_Parameter : pb::IMessage<ScomTaskAsTextTileConfig_Source_Parameter> {
    private static readonly pb::MessageParser<ScomTaskAsTextTileConfig_Source_Parameter> _parser = new pb::MessageParser<ScomTaskAsTextTileConfig_Source_Parameter>(() => new ScomTaskAsTextTileConfig_Source_Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTextTileConfig_Source_Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source_Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source_Parameter(ScomTaskAsTextTileConfig_Source_Parameter other) : this() {
      key_ = other.key_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTextTileConfig_Source_Parameter Clone() {
      return new ScomTaskAsTextTileConfig_Source_Parameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Value value_;
    /// <summary>
    /// Assumed to be arbitrary type although often string in practice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTextTileConfig_Source_Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTextTileConfig_Source_Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTextTileConfig_Source_Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig : pb::IMessage<ScomTaskAsTableTileConfig> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig>(() => new ScomTaskAsTableTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig(ScomTaskAsTableTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig Clone() {
      return new ScomTaskAsTableTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig_Context : pb::IMessage<ScomTaskAsTableTileConfig_Context> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_Context> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_Context>(() => new ScomTaskAsTableTileConfig_Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context(ScomTaskAsTableTileConfig_Context other) : this() {
      objectId_ = other.objectId_;
      Scope = other.scope_ != null ? other.Scope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context Clone() {
      return new ScomTaskAsTableTileConfig_Context(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope scope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (!object.Equals(Scope, other.Scope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (scope_ != null) hash ^= Scope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectId);
      }
      if (scope_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_Context other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          scope_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope();
        }
        Scope.MergeFrom(other.Scope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObjectId = input.ReadString();
            break;
          }
          case 18: {
            if (scope_ == null) {
              scope_ = new global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Context_Scope();
            }
            input.ReadMessage(scope_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO: May contain redudnant class ID etc. that is ignored?
  /// </summary>
  public sealed partial class ScomTaskAsTableTileConfig_Context_Scope : pb::IMessage<ScomTaskAsTableTileConfig_Context_Scope> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_Context_Scope> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_Context_Scope>(() => new ScomTaskAsTableTileConfig_Context_Scope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_Context_Scope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context_Scope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context_Scope(ScomTaskAsTableTileConfig_Context_Scope other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Context_Scope Clone() {
      return new ScomTaskAsTableTileConfig_Context_Scope(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_Context_Scope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_Context_Scope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_Context_Scope other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig_Source : pb::IMessage<ScomTaskAsTableTileConfig_Source> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_Source> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_Source>(() => new ScomTaskAsTableTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source(ScomTaskAsTableTileConfig_Source other) : this() {
      format_ = other.format_;
      skipLines_ = other.skipLines_;
      taskId_ = other.taskId_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source Clone() {
      return new ScomTaskAsTableTileConfig_Source(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private string format_ = "";
    /// <summary>
    /// eg. powershell/table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skip_lines" field.</summary>
    public const int SkipLinesFieldNumber = 2;
    private int skipLines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkipLines {
      get { return skipLines_; }
      set {
        skipLines_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 3;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(34, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter.Parser);
    private readonly pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter> parameters_ = new pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_Source_Parameter> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Format != other.Format) return false;
      if (SkipLines != other.SkipLines) return false;
      if (TaskId != other.TaskId) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (SkipLines != 0) hash ^= SkipLines.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= parameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Format.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Format);
      }
      if (SkipLines != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkipLines);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TaskId);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (SkipLines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipLines);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.SkipLines != 0) {
        SkipLines = other.SkipLines;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Format = input.ReadString();
            break;
          }
          case 16: {
            SkipLines = input.ReadInt32();
            break;
          }
          case 26: {
            TaskId = input.ReadString();
            break;
          }
          case 34: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig_Source_Parameter : pb::IMessage<ScomTaskAsTableTileConfig_Source_Parameter> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_Source_Parameter> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_Source_Parameter>(() => new ScomTaskAsTableTileConfig_Source_Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_Source_Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source_Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source_Parameter(ScomTaskAsTableTileConfig_Source_Parameter other) : this() {
      key_ = other.key_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Source_Parameter Clone() {
      return new ScomTaskAsTableTileConfig_Source_Parameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Value value_;
    /// <summary>
    /// Assumed to be arbitrary type although often string in practice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_Source_Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_Source_Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_Source_Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig_Display : pb::IMessage<ScomTaskAsTableTileConfig_Display> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_Display> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_Display>(() => new ScomTaskAsTableTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Display(ScomTaskAsTableTileConfig_Display other) : this() {
      autohide_ = other.autohide_;
      rowLink_ = other.rowLink_;
      showHeaders_ = other.showHeaders_;
      columnOverrides_ = other.columnOverrides_.Clone();
      customColumns_ = other.customColumns_.Clone();
      columns_ = other.columns_.Clone();
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_Display Clone() {
      return new ScomTaskAsTableTileConfig_Display(this);
    }

    /// <summary>Field number for the "autohide" field.</summary>
    public const int AutohideFieldNumber = 1;
    private bool autohide_;
    /// <summary>
    /// !! Property inconsistent with naming scheme !!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autohide {
      get { return autohide_; }
      set {
        autohide_ = value;
      }
    }

    /// <summary>Field number for the "row_link" field.</summary>
    public const int RowLinkFieldNumber = 2;
    private string rowLink_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowLink {
      get { return rowLink_; }
      set {
        rowLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "show_headers" field.</summary>
    public const int ShowHeadersFieldNumber = 3;
    private bool showHeaders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHeaders {
      get { return showHeaders_; }
      set {
        showHeaders_ = value;
      }
    }

    /// <summary>Field number for the "column_overrides" field.</summary>
    public const int ColumnOverridesFieldNumber = 4;
    private static readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride>.Codec _map_columnOverrides_codec
        = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride.Parser), 34);
    private readonly pbc::MapField<string, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride> columnOverrides_ = new pbc::MapField<string, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride>();
    /// <summary>
    /// Column template overrides
    /// name -> override data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::SquaredUp.Dashboard.Schema.ScomTaskAsTableTileConfig_ColumnOverride> ColumnOverrides {
      get { return columnOverrides_; }
    }

    /// <summary>Field number for the "custom_columns" field.</summary>
    public const int CustomColumnsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_customColumns_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> customColumns_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom columns
    /// internal name (e.g. custom_column) -> data key path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> CustomColumns {
      get { return customColumns_; }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List/order of each column
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 7;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Autohide != other.Autohide) return false;
      if (RowLink != other.RowLink) return false;
      if (ShowHeaders != other.ShowHeaders) return false;
      if (!ColumnOverrides.Equals(other.ColumnOverrides)) return false;
      if (!CustomColumns.Equals(other.CustomColumns)) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Autohide != false) hash ^= Autohide.GetHashCode();
      if (RowLink.Length != 0) hash ^= RowLink.GetHashCode();
      if (ShowHeaders != false) hash ^= ShowHeaders.GetHashCode();
      hash ^= ColumnOverrides.GetHashCode();
      hash ^= CustomColumns.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Autohide != false) {
        output.WriteRawTag(8);
        output.WriteBool(Autohide);
      }
      if (RowLink.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowLink);
      }
      if (ShowHeaders != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowHeaders);
      }
      columnOverrides_.WriteTo(output, _map_columnOverrides_codec);
      customColumns_.WriteTo(output, _map_customColumns_codec);
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Zoom.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Autohide != false) {
        size += 1 + 1;
      }
      if (RowLink.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowLink);
      }
      if (ShowHeaders != false) {
        size += 1 + 1;
      }
      size += columnOverrides_.CalculateSize(_map_columnOverrides_codec);
      size += customColumns_.CalculateSize(_map_customColumns_codec);
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.Autohide != false) {
        Autohide = other.Autohide;
      }
      if (other.RowLink.Length != 0) {
        RowLink = other.RowLink;
      }
      if (other.ShowHeaders != false) {
        ShowHeaders = other.ShowHeaders;
      }
      columnOverrides_.Add(other.columnOverrides_);
      customColumns_.Add(other.customColumns_);
      columns_.Add(other.columns_);
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Autohide = input.ReadBool();
            break;
          }
          case 18: {
            RowLink = input.ReadString();
            break;
          }
          case 24: {
            ShowHeaders = input.ReadBool();
            break;
          }
          case 34: {
            columnOverrides_.AddEntriesFrom(input, _map_columnOverrides_codec);
            break;
          }
          case 42: {
            customColumns_.AddEntriesFrom(input, _map_customColumns_codec);
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 58: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScomTaskAsTableTileConfig_ColumnOverride : pb::IMessage<ScomTaskAsTableTileConfig_ColumnOverride> {
    private static readonly pb::MessageParser<ScomTaskAsTableTileConfig_ColumnOverride> _parser = new pb::MessageParser<ScomTaskAsTableTileConfig_ColumnOverride>(() => new ScomTaskAsTableTileConfig_ColumnOverride());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScomTaskAsTableTileConfig_ColumnOverride> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.TaskReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_ColumnOverride() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_ColumnOverride(ScomTaskAsTableTileConfig_ColumnOverride other) : this() {
      template_ = other.template_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScomTaskAsTableTileConfig_ColumnOverride Clone() {
      return new ScomTaskAsTableTileConfig_ColumnOverride(this);
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 1;
    private string template_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Template {
      get { return template_; }
      set {
        template_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScomTaskAsTableTileConfig_ColumnOverride);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScomTaskAsTableTileConfig_ColumnOverride other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Template != other.Template) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Template.Length != 0) hash ^= Template.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Template.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Template);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Template.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Template);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScomTaskAsTableTileConfig_ColumnOverride other) {
      if (other == null) {
        return;
      }
      if (other.Template.Length != 0) {
        Template = other.Template;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Template = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
