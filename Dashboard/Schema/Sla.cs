// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sla.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from sla.proto</summary>
  public static partial class SlaReflection {

    #region Descriptor
    /// <summary>File descriptor for sla.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglzbGEucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xlL3Byb3RvYnVmL3N0cnVj",
            "dC5wcm90bxoLc2NvcGUucHJvdG8aD3RpbWVmcmFtZS5wcm90bxoNY29udGV4",
            "dC5wcm90byKeAQoNU2xhVGlsZUNvbmZpZxIpCgdjb250ZXh0GAEgASgLMhgu",
            "c3F1YXJlZHVwLkNvbW1vbkNvbnRleHQSLwoGc291cmNlGAIgASgLMh8uc3F1",
            "YXJlZHVwLlNsYVRpbGVDb25maWdfU291cmNlEjEKB2Rpc3BsYXkYAyABKAsy",
            "IC5zcXVhcmVkdXAuU2xhVGlsZUNvbmZpZ19EaXNwbGF5IlUKFFNsYVRpbGVD",
            "b25maWdfU291cmNlEi0KCXRpbWVmcmFtZRgBIAEoCzIaLnNxdWFyZWR1cC5D",
            "b21tb25UaW1lZnJhbWUSDgoGc2xvX2lkGAIgASgJIr4BChVTbGFUaWxlQ29u",
            "ZmlnX0Rpc3BsYXkSEQoJc2hvd19pY29uGAEgASgIEhIKCnNob3dfbGFiZWwY",
            "AiABKAgSEgoKc2hvd19nYXVnZRgDIAEoCBINCgVzdHlsZRgEIAEoCRILCgNt",
            "aW4YBSABKAESCwoDbWF4GAYgASgBEg0KBWxhYmVsGAcgASgJEhQKDGN1c3Rv",
            "bV9sYWJlbBgIIAEoCRIOCgZpbmxpbmUYCSABKAgSDAoEem9vbRgKIAEoCUId",
            "qgIaU3F1YXJlZFVwLkRhc2hib2FyZC5TY2hlbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SlaTileConfig), global::SquaredUp.Dashboard.Schema.SlaTileConfig.Parser, new[]{ "Context", "Source", "Display" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source), global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source.Parser, new[]{ "Timeframe", "SloId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display), global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display.Parser, new[]{ "ShowIcon", "ShowLabel", "ShowGauge", "Style", "Min", "Max", "Label", "CustomLabel", "Inline", "Zoom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SlaTileConfig : pb::IMessage<SlaTileConfig> {
    private static readonly pb::MessageParser<SlaTileConfig> _parser = new pb::MessageParser<SlaTileConfig>(() => new SlaTileConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlaTileConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SlaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig(SlaTileConfig other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Display = other.display_ != null ? other.Display.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig Clone() {
      return new SlaTileConfig(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlaTileConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlaTileConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Display, other.Display)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (display_ != null) hash ^= Display.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (display_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (display_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Display);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlaTileConfig other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.display_ != null) {
        if (display_ == null) {
          display_ = new global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display();
        }
        Display.MergeFrom(other.Display);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::SquaredUp.Dashboard.Schema.CommonContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::SquaredUp.Dashboard.Schema.SlaTileConfig_Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 26: {
            if (display_ == null) {
              display_ = new global::SquaredUp.Dashboard.Schema.SlaTileConfig_Display();
            }
            input.ReadMessage(display_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SlaTileConfig_Source : pb::IMessage<SlaTileConfig_Source> {
    private static readonly pb::MessageParser<SlaTileConfig_Source> _parser = new pb::MessageParser<SlaTileConfig_Source>(() => new SlaTileConfig_Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlaTileConfig_Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SlaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Source(SlaTileConfig_Source other) : this() {
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
      sloId_ = other.sloId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Source Clone() {
      return new SlaTileConfig_Source(this);
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 1;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    /// <summary>Field number for the "slo_id" field.</summary>
    public const int SloIdFieldNumber = 2;
    private string sloId_ = "";
    /// <summary>
    /// ID of the service level object to use for the SLA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SloId {
      get { return sloId_; }
      set {
        sloId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlaTileConfig_Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlaTileConfig_Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      if (SloId != other.SloId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      if (SloId.Length != 0) hash ^= SloId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timeframe_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timeframe);
      }
      if (SloId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SloId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      if (SloId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SloId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlaTileConfig_Source other) {
      if (other == null) {
        return;
      }
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
      if (other.SloId.Length != 0) {
        SloId = other.SloId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
          case 18: {
            SloId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SlaTileConfig_Display : pb::IMessage<SlaTileConfig_Display> {
    private static readonly pb::MessageParser<SlaTileConfig_Display> _parser = new pb::MessageParser<SlaTileConfig_Display>(() => new SlaTileConfig_Display());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlaTileConfig_Display> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.SlaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Display() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Display(SlaTileConfig_Display other) : this() {
      showIcon_ = other.showIcon_;
      showLabel_ = other.showLabel_;
      showGauge_ = other.showGauge_;
      style_ = other.style_;
      min_ = other.min_;
      max_ = other.max_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      inline_ = other.inline_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaTileConfig_Display Clone() {
      return new SlaTileConfig_Display(this);
    }

    /// <summary>Field number for the "show_icon" field.</summary>
    public const int ShowIconFieldNumber = 1;
    private bool showIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowIcon {
      get { return showIcon_; }
      set {
        showIcon_ = value;
      }
    }

    /// <summary>Field number for the "show_label" field.</summary>
    public const int ShowLabelFieldNumber = 2;
    private bool showLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowLabel {
      get { return showLabel_; }
      set {
        showLabel_ = value;
      }
    }

    /// <summary>Field number for the "show_gauge" field.</summary>
    public const int ShowGaugeFieldNumber = 3;
    private bool showGauge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowGauge {
      get { return showGauge_; }
      set {
        showGauge_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 4;
    private string style_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Style {
      get { return style_; }
      set {
        style_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 5;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 6;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 7;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 8;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inline" field.</summary>
    public const int InlineFieldNumber = 9;
    private bool inline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inline {
      get { return inline_; }
      set {
        inline_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 10;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlaTileConfig_Display);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlaTileConfig_Display other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowIcon != other.ShowIcon) return false;
      if (ShowLabel != other.ShowLabel) return false;
      if (ShowGauge != other.ShowGauge) return false;
      if (Style != other.Style) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (Inline != other.Inline) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowIcon != false) hash ^= ShowIcon.GetHashCode();
      if (ShowLabel != false) hash ^= ShowLabel.GetHashCode();
      if (ShowGauge != false) hash ^= ShowGauge.GetHashCode();
      if (Style.Length != 0) hash ^= Style.GetHashCode();
      if (Min != 0D) hash ^= Min.GetHashCode();
      if (Max != 0D) hash ^= Max.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (Inline != false) hash ^= Inline.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowIcon != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowIcon);
      }
      if (ShowLabel != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowLabel);
      }
      if (ShowGauge != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowGauge);
      }
      if (Style.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Style);
      }
      if (Min != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Max);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomLabel);
      }
      if (Inline != false) {
        output.WriteRawTag(72);
        output.WriteBool(Inline);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowIcon != false) {
        size += 1 + 1;
      }
      if (ShowLabel != false) {
        size += 1 + 1;
      }
      if (ShowGauge != false) {
        size += 1 + 1;
      }
      if (Style.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Style);
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (Inline != false) {
        size += 1 + 1;
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlaTileConfig_Display other) {
      if (other == null) {
        return;
      }
      if (other.ShowIcon != false) {
        ShowIcon = other.ShowIcon;
      }
      if (other.ShowLabel != false) {
        ShowLabel = other.ShowLabel;
      }
      if (other.ShowGauge != false) {
        ShowGauge = other.ShowGauge;
      }
      if (other.Style.Length != 0) {
        Style = other.Style;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.Inline != false) {
        Inline = other.Inline;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowIcon = input.ReadBool();
            break;
          }
          case 16: {
            ShowLabel = input.ReadBool();
            break;
          }
          case 24: {
            ShowGauge = input.ReadBool();
            break;
          }
          case 34: {
            Style = input.ReadString();
            break;
          }
          case 41: {
            Min = input.ReadDouble();
            break;
          }
          case 49: {
            Max = input.ReadDouble();
            break;
          }
          case 58: {
            Label = input.ReadString();
            break;
          }
          case 66: {
            CustomLabel = input.ReadString();
            break;
          }
          case 72: {
            Inline = input.ReadBool();
            break;
          }
          case 82: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
