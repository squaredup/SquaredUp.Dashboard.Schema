// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance_shared.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SquaredUp.Dashboard.Schema {

  /// <summary>Holder for reflection information generated from performance_shared.proto</summary>
  public static partial class PerformanceSharedReflection {

    #region Descriptor
    /// <summary>File descriptor for performance_shared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerformanceSharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhwZXJmb3JtYW5jZV9zaGFyZWQucHJvdG8SCXNxdWFyZWR1cBocZ29vZ2xl",
            "L3Byb3RvYnVmL3N0cnVjdC5wcm90bxoLc2NvcGUucHJvdG8aD3RpbWVmcmFt",
            "ZS5wcm90byLjAgoYQ29tbW9uUGVyZm9ybWFuY2VEaXNwbGF5Eg0KBXJhbmdl",
            "GAEgASgJEhAKCHVuaXRfa2V5GAIgAygJEg4KBmhlaWdodBgDIAEoARINCgVs",
            "YWJlbBgEIAEoCRIUCgxjdXN0b21fbGFiZWwYBSABKAkSFQoNbGlua190ZW1w",
            "bGF0ZRgGIAEoCRIWCg5sYWJlbF90ZW1wbGF0ZRgHIAEoCRIQCghyYW5nZW1h",
            "eBgIIAEoARIQCghyYW5nZW1pbhgJIAEoARJDCghtZXRhZGF0YRgKIAMoCzIx",
            "LnNxdWFyZWR1cC5Db21tb25QZXJmb3JtYW5jZURpc3BsYXkuTWV0YWRhdGFF",
            "bnRyeRIQCghzaG93X2tleRgLIAEoCBpHCg1NZXRhZGF0YUVudHJ5EgsKA2tl",
            "eRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1",
            "ZToCOAEi4wEKF0NvbW1vblBlcmZvcm1hbmNlU291cmNlEhwKFGFnZ3JlZ2F0",
            "ZV92YWx1ZV90eXBlGAEgASgJEhIKCnJlc29sdXRpb24YAiABKAkSLQoJdGlt",
            "ZWZyYW1lGAMgASgLMhouc3F1YXJlZHVwLkNvbW1vblRpbWVmcmFtZRISCgpv",
            "YmplY3RuYW1lGAQgASgJEhMKC2NvdW50ZXJuYW1lGAUgASgJEhQKDGluc3Rh",
            "bmNlbmFtZRgGIAEoCRIMCgRkZXNjGAcgASgIEgwKBHRvcG4YCCABKA0SDAoE",
            "em9vbRgJIAEoCUIdqgIaU3F1YXJlZFVwLkRhc2hib2FyZC5TY2hlbWFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::SquaredUp.Dashboard.Schema.ScopeReflection.Descriptor, global::SquaredUp.Dashboard.Schema.TimeframeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay), global::SquaredUp.Dashboard.Schema.CommonPerformanceDisplay.Parser, new[]{ "Range", "UnitKey", "Height", "Label", "CustomLabel", "LinkTemplate", "LabelTemplate", "Rangemax", "Rangemin", "Metadata", "ShowKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SquaredUp.Dashboard.Schema.CommonPerformanceSource), global::SquaredUp.Dashboard.Schema.CommonPerformanceSource.Parser, new[]{ "AggregateValueType", "Resolution", "Timeframe", "Objectname", "Countername", "Instancename", "Desc", "Topn", "Zoom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Display settings common to most performance graphs
  /// </summary>
  public sealed partial class CommonPerformanceDisplay : pb::IMessage<CommonPerformanceDisplay> {
    private static readonly pb::MessageParser<CommonPerformanceDisplay> _parser = new pb::MessageParser<CommonPerformanceDisplay>(() => new CommonPerformanceDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonPerformanceDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceSharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceDisplay(CommonPerformanceDisplay other) : this() {
      range_ = other.range_;
      unitKey_ = other.unitKey_.Clone();
      height_ = other.height_;
      label_ = other.label_;
      customLabel_ = other.customLabel_;
      linkTemplate_ = other.linkTemplate_;
      labelTemplate_ = other.labelTemplate_;
      rangemax_ = other.rangemax_;
      rangemin_ = other.rangemin_;
      metadata_ = other.metadata_.Clone();
      showKey_ = other.showKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceDisplay Clone() {
      return new CommonPerformanceDisplay(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private string range_ = "";
    /// <summary>
    /// e.g. fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Range {
      get { return range_; }
      set {
        range_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_key" field.</summary>
    public const int UnitKeyFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unitKey_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unitKey_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// e.g. object, counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnitKey {
      get { return unitKey_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_label" field.</summary>
    public const int CustomLabelFieldNumber = 5;
    private string customLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomLabel {
      get { return customLabel_; }
      set {
        customLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_template" field.</summary>
    public const int LinkTemplateFieldNumber = 6;
    private string linkTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkTemplate {
      get { return linkTemplate_; }
      set {
        linkTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_template" field.</summary>
    public const int LabelTemplateFieldNumber = 7;
    private string labelTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelTemplate {
      get { return labelTemplate_; }
      set {
        labelTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rangemax" field.</summary>
    public const int RangemaxFieldNumber = 8;
    private double rangemax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemax {
      get { return rangemax_; }
      set {
        rangemax_ = value;
      }
    }

    /// <summary>Field number for the "rangemin" field.</summary>
    public const int RangeminFieldNumber = 9;
    private double rangemin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rangemin {
      get { return rangemin_; }
      set {
        rangemin_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 82);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> metadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Unknown/unverified content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "show_key" field.</summary>
    public const int ShowKeyFieldNumber = 11;
    private bool showKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowKey {
      get { return showKey_; }
      set {
        showKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonPerformanceDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonPerformanceDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if(!unitKey_.Equals(other.unitKey_)) return false;
      if (Height != other.Height) return false;
      if (Label != other.Label) return false;
      if (CustomLabel != other.CustomLabel) return false;
      if (LinkTemplate != other.LinkTemplate) return false;
      if (LabelTemplate != other.LabelTemplate) return false;
      if (Rangemax != other.Rangemax) return false;
      if (Rangemin != other.Rangemin) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (ShowKey != other.ShowKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range.Length != 0) hash ^= Range.GetHashCode();
      hash ^= unitKey_.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (CustomLabel.Length != 0) hash ^= CustomLabel.GetHashCode();
      if (LinkTemplate.Length != 0) hash ^= LinkTemplate.GetHashCode();
      if (LabelTemplate.Length != 0) hash ^= LabelTemplate.GetHashCode();
      if (Rangemax != 0D) hash ^= Rangemax.GetHashCode();
      if (Rangemin != 0D) hash ^= Rangemin.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (ShowKey != false) hash ^= ShowKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Range);
      }
      unitKey_.WriteTo(output, _repeated_unitKey_codec);
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (CustomLabel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LabelTemplate);
      }
      if (Rangemax != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rangemax);
      }
      if (Rangemin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Rangemin);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (ShowKey != false) {
        output.WriteRawTag(88);
        output.WriteBool(ShowKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Range);
      }
      size += unitKey_.CalculateSize(_repeated_unitKey_codec);
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (CustomLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomLabel);
      }
      if (LinkTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTemplate);
      }
      if (LabelTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelTemplate);
      }
      if (Rangemax != 0D) {
        size += 1 + 8;
      }
      if (Rangemin != 0D) {
        size += 1 + 8;
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (ShowKey != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonPerformanceDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Range.Length != 0) {
        Range = other.Range;
      }
      unitKey_.Add(other.unitKey_);
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.CustomLabel.Length != 0) {
        CustomLabel = other.CustomLabel;
      }
      if (other.LinkTemplate.Length != 0) {
        LinkTemplate = other.LinkTemplate;
      }
      if (other.LabelTemplate.Length != 0) {
        LabelTemplate = other.LabelTemplate;
      }
      if (other.Rangemax != 0D) {
        Rangemax = other.Rangemax;
      }
      if (other.Rangemin != 0D) {
        Rangemin = other.Rangemin;
      }
      metadata_.Add(other.metadata_);
      if (other.ShowKey != false) {
        ShowKey = other.ShowKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Range = input.ReadString();
            break;
          }
          case 18: {
            unitKey_.AddEntriesFrom(input, _repeated_unitKey_codec);
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
          case 42: {
            CustomLabel = input.ReadString();
            break;
          }
          case 50: {
            LinkTemplate = input.ReadString();
            break;
          }
          case 58: {
            LabelTemplate = input.ReadString();
            break;
          }
          case 65: {
            Rangemax = input.ReadDouble();
            break;
          }
          case 73: {
            Rangemin = input.ReadDouble();
            break;
          }
          case 82: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 88: {
            ShowKey = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonPerformanceSource : pb::IMessage<CommonPerformanceSource> {
    private static readonly pb::MessageParser<CommonPerformanceSource> _parser = new pb::MessageParser<CommonPerformanceSource>(() => new CommonPerformanceSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonPerformanceSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SquaredUp.Dashboard.Schema.PerformanceSharedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceSource(CommonPerformanceSource other) : this() {
      aggregateValueType_ = other.aggregateValueType_;
      resolution_ = other.resolution_;
      Timeframe = other.timeframe_ != null ? other.Timeframe.Clone() : null;
      objectname_ = other.objectname_;
      countername_ = other.countername_;
      instancename_ = other.instancename_;
      desc_ = other.desc_;
      topn_ = other.topn_;
      zoom_ = other.zoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPerformanceSource Clone() {
      return new CommonPerformanceSource(this);
    }

    /// <summary>Field number for the "aggregate_value_type" field.</summary>
    public const int AggregateValueTypeFieldNumber = 1;
    private string aggregateValueType_ = "";
    /// <summary>
    /// default is 'average'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AggregateValueType {
      get { return aggregateValueType_; }
      set {
        aggregateValueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 2;
    private string resolution_ = "";
    /// <summary>
    /// default is 'raw'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolution {
      get { return resolution_; }
      set {
        resolution_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeframe" field.</summary>
    public const int TimeframeFieldNumber = 3;
    private global::SquaredUp.Dashboard.Schema.CommonTimeframe timeframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SquaredUp.Dashboard.Schema.CommonTimeframe Timeframe {
      get { return timeframe_; }
      set {
        timeframe_ = value;
      }
    }

    /// <summary>Field number for the "objectname" field.</summary>
    public const int ObjectnameFieldNumber = 4;
    private string objectname_ = "";
    /// <summary>
    /// These settings are shared/used by other performance tiles (and are not specified by allscomperf's defaults)
    /// - but in practice these values are set on various dashboards (e.g. all-performance.json) and are specified
    /// here for completeness as optional values
    ///
    /// !! Naming conventions here are broken !!
    ///
    /// Typically * (any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Objectname {
      get { return objectname_; }
      set {
        objectname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countername" field.</summary>
    public const int CounternameFieldNumber = 5;
    private string countername_ = "";
    /// <summary>
    /// Typically * (any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Countername {
      get { return countername_; }
      set {
        countername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instancename" field.</summary>
    public const int InstancenameFieldNumber = 6;
    private string instancename_ = "";
    /// <summary>
    /// e.g. "_Total"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instancename {
      get { return instancename_; }
      set {
        instancename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private bool desc_;
    /// <summary>
    /// Unknown purpose
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "topn" field.</summary>
    public const int TopnFieldNumber = 8;
    private uint topn_;
    /// <summary>
    /// Whether to fetch Top N items 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Topn {
      get { return topn_; }
      set {
        topn_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 9;
    private string zoom_ = "";
    /// <summary>
    /// e.g. 'column'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zoom {
      get { return zoom_; }
      set {
        zoom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonPerformanceSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonPerformanceSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AggregateValueType != other.AggregateValueType) return false;
      if (Resolution != other.Resolution) return false;
      if (!object.Equals(Timeframe, other.Timeframe)) return false;
      if (Objectname != other.Objectname) return false;
      if (Countername != other.Countername) return false;
      if (Instancename != other.Instancename) return false;
      if (Desc != other.Desc) return false;
      if (Topn != other.Topn) return false;
      if (Zoom != other.Zoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AggregateValueType.Length != 0) hash ^= AggregateValueType.GetHashCode();
      if (Resolution.Length != 0) hash ^= Resolution.GetHashCode();
      if (timeframe_ != null) hash ^= Timeframe.GetHashCode();
      if (Objectname.Length != 0) hash ^= Objectname.GetHashCode();
      if (Countername.Length != 0) hash ^= Countername.GetHashCode();
      if (Instancename.Length != 0) hash ^= Instancename.GetHashCode();
      if (Desc != false) hash ^= Desc.GetHashCode();
      if (Topn != 0) hash ^= Topn.GetHashCode();
      if (Zoom.Length != 0) hash ^= Zoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AggregateValueType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AggregateValueType);
      }
      if (Resolution.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resolution);
      }
      if (timeframe_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timeframe);
      }
      if (Objectname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Objectname);
      }
      if (Countername.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Countername);
      }
      if (Instancename.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Instancename);
      }
      if (Desc != false) {
        output.WriteRawTag(56);
        output.WriteBool(Desc);
      }
      if (Topn != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Topn);
      }
      if (Zoom.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Zoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AggregateValueType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AggregateValueType);
      }
      if (Resolution.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolution);
      }
      if (timeframe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeframe);
      }
      if (Objectname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Objectname);
      }
      if (Countername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Countername);
      }
      if (Instancename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instancename);
      }
      if (Desc != false) {
        size += 1 + 1;
      }
      if (Topn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Topn);
      }
      if (Zoom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonPerformanceSource other) {
      if (other == null) {
        return;
      }
      if (other.AggregateValueType.Length != 0) {
        AggregateValueType = other.AggregateValueType;
      }
      if (other.Resolution.Length != 0) {
        Resolution = other.Resolution;
      }
      if (other.timeframe_ != null) {
        if (timeframe_ == null) {
          timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
        }
        Timeframe.MergeFrom(other.Timeframe);
      }
      if (other.Objectname.Length != 0) {
        Objectname = other.Objectname;
      }
      if (other.Countername.Length != 0) {
        Countername = other.Countername;
      }
      if (other.Instancename.Length != 0) {
        Instancename = other.Instancename;
      }
      if (other.Desc != false) {
        Desc = other.Desc;
      }
      if (other.Topn != 0) {
        Topn = other.Topn;
      }
      if (other.Zoom.Length != 0) {
        Zoom = other.Zoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AggregateValueType = input.ReadString();
            break;
          }
          case 18: {
            Resolution = input.ReadString();
            break;
          }
          case 26: {
            if (timeframe_ == null) {
              timeframe_ = new global::SquaredUp.Dashboard.Schema.CommonTimeframe();
            }
            input.ReadMessage(timeframe_);
            break;
          }
          case 34: {
            Objectname = input.ReadString();
            break;
          }
          case 42: {
            Countername = input.ReadString();
            break;
          }
          case 50: {
            Instancename = input.ReadString();
            break;
          }
          case 56: {
            Desc = input.ReadBool();
            break;
          }
          case 64: {
            Topn = input.ReadUInt32();
            break;
          }
          case 74: {
            Zoom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
